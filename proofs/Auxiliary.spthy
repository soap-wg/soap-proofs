theory MessagingOIDC begin

// Function signature and definition of the equational theory E

functions: e2ee/3, e2eeDec/2, extract/1, fingerprint/1, fst/1, h/2,
           pair/2, pk/1, s256/1, sign/2, snd/1, true/0, verify/3
equations:
    e2eeDec(e2ee(sks, pk(skr), m), skr) = m,
    extract(fingerprint(x)) = x,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true



heuristic: o "./oracle.py"

restriction OnlyOnce:
  "∀ t #x #y. ((OnlyOnce( t ) @ #x) ∧ (OnlyOnce( t ) @ #y)) ⇒ (#x = #y)"
  // safety formula

restriction Equality:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

restriction Inequality:
  "∀ x #t. (Neq( x, x ) @ #t) ⇒ (⊥)"
  // safety formula



rule (modulo E) Phone:
   [ ]
  --[ ClaimNumber( $A, $Number ), IsPhoneNumber( $Number ) ]->
   [ !Phone( $A, $Number ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) SMSOut[color=#ffffff]:
   [ SMS_Out( $Number, sms ), !Phone( $A, $Number ) ]
  -->
   [ !SMS( $Number, sms ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) AdversarySMSOut[color=#ff6961]:
   [ In( sms ), !Phone( $A, $Number ) ]
  --[ AdversaryActivity( ) ]->
   [ !SMS( $Number, sms ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) SMSIn[color=#ffffff]:
   [ !SMS( $Number, sms ) ] --> [ SMS_In( $Number, sms ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) SMSLeak[color=#ff6961]:
   [ !SMS( $Number, sms ) ]
  --[ SMSLeak( ), AdversaryActivity( ) ]->
   [ Out( sms ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Domain:
   [ ] --> [ !Domain( $Domain ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) DomainCompromise:
   [ !Domain( $Domain ) ]
  --[ CompromisedDomain( $Domain ), AdversaryActivity( ) ]->
   [ !DomainCompromise( $Domain ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) TLSClientOut[color=#ffffff]:
   [ TLSClient_Out( method, ~sess, $Domain, msg ), !Domain( $Domain ) ]
  -->
   [ !TLSClient( method, ~sess, $Domain, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) TLSAdversaryClientOut[color=#ff6961]:
   [ In( method ), In( ~sess ), In( msg ), !Domain( $Domain ) ]
  -->
   [ !TLSClient( method, ~sess, $Domain, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) TLSServerOut[color=#ffffff]:
   [ TLSServer_Out( method, ~sess, $Domain, msg ), !Domain( $Domain ) ]
  -->
   [ !TLSServer( method, ~sess, $Domain, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) TLSAdversaryServerOut[color=#ff6961]:
   [ In( method ), In( ~sess ), In( msg ), !DomainCompromise( $Domain ) ]
  --[ AdversaryActivity( ) ]->
   [ !TLSServer( method, ~sess, $Domain, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) TLSClientToServer[color=#ffffff]:
   [ !TLSClient( method, ~sess, $Domain, msg ) ]
  -->
   [ TLSServer_In( method, ~sess, $Domain, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) TLSClientToAdversaryServer[color=#ff6961]:
   [ !TLSClient( method, ~sess, $Domain, msg ), !DomainCompromise( $Domain )
   ]
  --[ AdversaryActivity( ) ]->
   [ Out( msg ), Out( ~sess ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) TLSServerToClient[color=#ffffff]:
   [ !TLSServer( method, ~sess, $Domain, msg ) ]
  -->
   [ TLSClient_In( method, ~sess, $Domain, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) TLSServerToAdversaryClient[color=#ff6961]:
   [
   In( ~adversarySess ), !TLSServer( method, ~adversarySess, $Domain, msg )
   ]
  --[ AdversaryActivity( ) ]->
   [ Out( msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) IdPSetup:
   [ !Domain( $IdP ), Fr( ~idpSk ) ]
  -->
   [ !IdP( $IdP ), !IdPLtk( $IdP, ~idpSk ), Out( pk(~idpSk) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) IdPCompromise[color=#ff6961]:
   [ !IdPLtk( $IdP, idpSk ) ]
  --[ CompromisedIdP( $IdP ), AdversaryActivity( ) ]->
   [ !IdPCompromise( $IdP ), Out( idpSk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) IdPKeyRequest[color=#9ad5d8]:
   [ !IdP( $IdP ), Fr( ~sess ) ]
  -->
   [
   TLSClient_Out( 'GET', ~sess, $IdP, 'pk_req' ),
   St_IdPKeyReq( $IdP, ~sess )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) IdPPkDistribute[color=#9ad5d8]:
   [ TLSServer_In( 'GET', ~sess, $IdP, 'pk_req' ), !IdPLtk( $IdP, idpSk ) ]
  -->
   [ TLSServer_Out( 'GET', ~sess, $IdP, <'idp_pk', pk(idpSk)> ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) IdPKeyObtain[color=#9ad5d8]:
   [
   St_IdPKeyReq( $IdP, ~sess ),
   TLSClient_In( 'GET', ~sess, $IdP, <'idp_pk', idpPk> )
   ]
  -->
   [ !UseIdPKey( $User, $IdP, idpPk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) IdPSignUp:
   [ Fr( ~pw ), !IdP( $IdP ) ]
  --[ Username( $A, $IdP, $Username, ~pw ) ]->
   [ !IdPAccount( $A, $IdP, $Username, ~pw ) ]

  /* has exactly the trivial AC variant */

restriction AccountsUnique:
  "∀ p1 p2 idp u pw1 pw2 #a #b.
    ((Username( p1, idp, u, pw1 ) @ #a) ∧
     (Username( p2, idp, u, pw2 ) @ #b)) ⇒
    (((p1 = p2) ∧ (pw1 = pw2)) ∧ (#a = #b))"
  // safety formula

rule (modulo E) IdPAccountCompromise[color=#ff6961]:
   [ !IdPAccount( $A, $IdP, $Username, ~pw ) ]
  --[ CompromisedAccount( $A, $IdP, $Username ), AdversaryActivity( ) ]->
   [ Out( ~pw ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) IdPPublishClient:
   [ Fr( ~sess ), Fr( ~m ), !IdPAccount( $A, $IdP, $Username, ~pw ) ]
  --[ SendIdP( $IdP, $Username, ~m ), Sender( $A ) ]->
   [ TLSClient_Out( 'GET', ~sess, $IdP, <'publish', $Username, ~pw, ~m> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) IdPPublishServer:
   [
   !IdPAccount( p, $IdP, $Username, ~pw ),
   TLSServer_In( 'GET', ~sess, $IdP, <'publish', $Username, ~pw, m> )
   ]
  -->
   [ Out( m ), !Publish( $IdP, $Username, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) IdPPublishCompromised:
   [ !IdPCompromise( $IdP ), In( m ) ]
  --[ AdversaryActivity( ) ]->
   [ !Publish( $IdP, $Username, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) IdPRead:
   [ !Publish( $IdP, $Username, m ) ]
  --[ ReceiveIdP( $IdP, $Username, m ) ]->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) KeyServer:
   [ !Domain( $Domain ) ]
  --[ OnlyOnce( 'key_server' ), IsKeyServer( $Domain ) ]->
   [ !KeyServer( $Domain ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) MessagingRegister[color=#fdfd96]:
   [ Fr( ~sk ), Fr( ~sess ), !Phone( $A, $Number ), !KeyServer( $KeyServer )
   ]
  --[ IsMessagingKey( ~sk ) ]->
   [
   TLSClient_Out( 'GET', ~sess, $KeyServer,
                  <'msg_signup_req', $Number, pk(~sk)>
   ),
   Out( pk(~sk) ), St_MessagingReg_App( $A, $Number, ~sess, ~sk )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) MessagingChallenge[color=#fdfd96]:
   [
   Fr( ~challenge ), !KeyServer( $Server ),
   TLSServer_In( 'GET', ~sess, $Server, <'msg_signup_req', $Number, ltk> )
   ]
  --[ IsOTP( ~challenge ) ]->
   [
   SMS_Out( $Number, ~challenge ),
   St_SigReg_Server( ~sess, $Number, ltk, ~challenge )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) MessagingRespond[color=#fdfd96]:
   [
   !KeyServer( $Server ), St_MessagingReg_App( $A, $Number, ~sess, sk ),
   SMS_In( $Number, challenge )
   ]
  --[ MustBeOTP( challenge ) ]->
   [
   TLSClient_Out( 'GET', ~sess, $Server, <'otp_respond', challenge> ),
   St_MessagingReg_AppWait( $A, $Number, ~sess, sk )
   ]

  // loop breaker: [2]
  /* has exactly the trivial AC variant */

rule (modulo E) MessagingAck[color=#fdfd96]:
   [
   !KeyServer( $Server ),
   St_SigReg_Server( ~sess, $Number, ltk, challenge ),
   TLSServer_In( 'GET', ~sess, $Server, <'otp_respond', challenge> )
   ]
  --[ MessagingKeyServer( $Number, ltk ) ]->
   [
   !MessagingLtkServer( $Number, ltk ),
   TLSServer_Out( 'GET', ~sess, $Server, 'msg_signup_ack' )
   ]

  // loop breakers: [1,2]
  /* has exactly the trivial AC variant */

restriction KeysUnique:
  "∀ phone ltk1 ltk2 #a #b.
    ((MessagingKeyServer( phone, ltk1 ) @ #a) ∧
     (MessagingKeyServer( phone, ltk2 ) @ #b)) ⇒
    ((#a = #b) ∧ (ltk1 = ltk2))"
  // safety formula

rule (modulo E) MessagingFin[color=#fdfd96]:
   [
   !KeyServer( $Server ), St_MessagingReg_AppWait( $A, $Number, ~sess, sk ),
   TLSClient_In( 'GET', ~sess, $Server, 'msg_signup_ack' )
   ]
  --[ ClaimMessagingKey( $A, $Number, sk ) ]->
   [ !MessagingLtkUser( $A, $Number, sk )[no_precomp] ]

  /* has exactly the trivial AC variant */

rule (modulo E) MessagingCompromise[color=#ff6961]:
   [ !MessagingLtkUser( $A, $Number, ~sk )[no_precomp] ]
  --[ CompromisedMessaging( $A, pk(~sk) ), AdversaryActivity( ) ]->
   [ Out( ~sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) MessagingKeyRequest[color=#9ad5d8]:
   [
   !MessagingLtkServer( $Number, ltk ), !KeyServer( $Server ),
   TLSServer_In( 'GET', ~sess, $Server, <'msg_key_req', $Number> )
   ]
  --[ MustBeMessagingKey( ltk ) ]->
   [ TLSServer_Out( 'GET', ~sess, $Server, <'msg_key_resp', $Number, ltk> )
   ]

  // loop breaker: [2]
  /* has exactly the trivial AC variant */

rule (modulo E) ObtainKey[color=#9ad5d8]:
   [ Fr( ~sess ), !KeyServer( $Server ) ]
  -->
   [
   TLSClient_Out( 'GET', ~sess, $Server, <'msg_key_req', $Phone> ),
   St_KeyReq( $A, $Phone, ~sess )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) ObtainKeyFin[color=#9ad5d8]:
   [
   !KeyServer( $Server ), St_KeyReq( $A, $Phone, ~sess ),
   TLSClient_In( 'GET', ~sess, $Server, <'msg_key_resp', $Phone, ltk> )
   ]
  -->
   [ !UseMessagingKeyFor( $A, $Phone, ltk )[no_precomp] ]

  /* has exactly the trivial AC variant */

rule (modulo E) SendInterface:
   [ Fr( ~m ) ] --> [ SendAsTo( $A, $Phone, ~m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) MessagingSend:
   [
   SendAsTo( $A, $PeerPhone, m ),
   !MessagingLtkUser( $A, $MyPhone, ~sk )[no_precomp],
   !UseMessagingKeyFor( $A, $PeerPhone, ltk )[no_precomp]
   ]
  --[
  SendMessaging( pk(~sk), ltk, m ), Sender( $A ),
  SendTo( $PeerPhone, 'messaging', m )
  ]->
   [ Out( e2ee(~sk, ltk, m) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) MessagingReceive:
   [
   !MessagingLtkUser( $A, $MyPhone, ~skr )[no_precomp],
   !UseMessagingKeyFor( $A, $PeerPhone, pk(skPeer) )[no_precomp],
   In( e2ee(skPeer, pk(~skr), m) )
   ]
  --[ ReceiveMessaging( pk(skPeer), pk(~skr), m ) ]->
   [ ]

  /* has exactly the trivial AC variant */

predicate: KeyServerCompromise( )<=>∃ d #x #y. (IsKeyServer( d ) @ #x) ∧ (CompromisedDomain( d ) @ #y)

rule (modulo E) Client:
   [ ] --> [ !Client( $App ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) MessagingApp:
   [ !Client( $App ) ]
  --[ IsMessagingApp( $App ), OnlyOnce( 'messaging_app_client' ) ]->
   [ !MessagingApp( $App ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) RedirectURL:
   [ !IdP( $IdP ), !Client( $App ), !Domain( $RedirectURL ) ]
  --[ IsRedirectURL( $IdP, $App, $RedirectURL ) ]->
   [ !RedirectURL( $IdP, $App, $RedirectURL ) ]

  /* has exactly the trivial AC variant */

restriction UniqueRedirectURLs:
  "∀ idp1 idp2 app1 app2 url #t1 #t2 #t3.
    (((IsMessagingApp( app1 ) @ #t1) ∧
      (IsRedirectURL( idp1, app1, url ) @ #t2)) ∧
     (IsRedirectURL( idp2, app2, url ) @ #t3)) ⇒
    ((idp1 = idp2) ∧ (app1 = app2))"
  // safety formula

rule (modulo E) 0_InitSessionStore:
   [ ]
  --[ OnlyOnce( <'init_session_store', $User> ) ]->
   [ SessionStore( $User, 'null', 'null' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ClearSessionStore:
   [ SessionStore( $User, x, y ) ]
  -->
   [ SessionStore( $User, 'null', 'null' ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) LinkClick[color=#ff6961]:
   [ Fr( ~sess ), In( m ), !Domain( $Domain ) ]
  --[ AdversaryActivity( ) ]->
   [ TLSClient_Out( 'GET', ~sess, $Domain, m ), !Browser( $Prover, ~sess ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) OIDCAppLaunchBrowser[color=#b4d9ef]:
   [
   !IdP( $IdP ), !MessagingApp( $App ),
   !RedirectURL( $IdP, $App, $RedirectURL ),
   !MessagingLtkUser( $Prover, $ProverPhone, skProver )[no_precomp],
   !UseMessagingKeyFor( $Prover, $VerifierPhone, pkVerifier )[no_precomp],
   SessionStore( $Prover, drop1, drop2 ), Fr( salt ), Fr( nonce ),
   Fr( code_verifier ), Fr( ~sess )
   ]
  --[
  IsNonce( nonce ), GenerateCodeVerifierFor( code_verifier, $IdP ),
  SOAPStart( $Prover, nonce ),
  SOAPMessaging( $Prover, nonce, pkVerifier, pk(skProver) )
  ]->
   [
   TLSClient_Out( 'GET', ~sess, $IdP,
                  <'oidc_req', $App, h(fingerprint(<pk(skProver), pkVerifier>), salt), 
                   nonce, s256(code_verifier), $RedirectURL>
   ),
   Out( <h(fingerprint(<pk(skProver), pkVerifier>), salt), nonce, 
         s256(code_verifier)>
   ),
   SessionStore( $Prover, nonce,
                 <$IdP, $VerifierPhone, h(fingerprint(<pk(skProver), pkVerifier>), salt), 
                  salt, code_verifier>
   ),
   !Browser( $Prover, ~sess )
   ]

  // loop breaker: [5]
  /* has exactly the trivial AC variant */

rule (modulo E) OIDCIdPInit[color=#b4d9ef]:
   [
   !IdP( $IdP ), !RedirectURL( $IdP, $Client, $RedirectURL ),
   TLSServer_In( 'GET', ~sess, $IdP,
                 <'oidc_req', $Client, hash, nonce, code_challenge, $RedirectURL>
   )
   ]
  --[ MustBeNonce( nonce ) ]->
   [
   TLSServer_Out( 'GET', ~sess, $IdP, 'auth_req' ),
   St_OIDCServer_Auth( $IdP, $Client, $RedirectURL, ~sess, hash, nonce,
                       code_challenge
   )
   ]

  // loop breaker: [2]
  /* has exactly the trivial AC variant */

rule (modulo E) OIDCAppLogin[color=#b4d9ef]:
   [
   !Browser( $Prover, ~sess ), !IdP( $IdP ),
   TLSClient_In( 'GET', ~sess, $IdP, 'auth_req' ),
   !IdPAccount( $Prover, $IdP, $Username, ~pw )
   ]
  -->
   [ TLSClient_Out( 'GET', ~sess, $IdP, <'login', $Username, ~pw> ) ]

  /* has exactly the trivial AC variant */

lemma PasswordsConfidential [reuse]:
  all-traces
  "∀ user idp username pw #t1 #t2.
    ((Username( user, idp, username, pw ) @ #t1) ∧ (!KU( pw ) @ #t2)) ⇒
    ((∃ #x. CompromisedDomain( idp ) @ #x) ∨
     (∃ someone #x. CompromisedAccount( someone, idp, username ) @ #x))"
/*
guarded formula characterizing all counter-examples:
"∃ user idp username pw #t1 #t2.
  (Username( user, idp, username, pw ) @ #t1) ∧ (!KU( pw ) @ #t2)
 ∧
  (∀ #x. (CompromisedDomain( idp ) @ #x) ⇒ ⊥) ∧
  (∀ someone #x. (CompromisedAccount( someone, idp, username ) @ #x) ⇒ ⊥)"
*/
simplify
solve( !IdP( $IdP ) ▶₁ #t1 )
  case IdPSetup
  solve( !KU( ~pw ) @ #t2 )
    case IdPAccountCompromise
    by contradiction /* from formulas */
  next
    case TLSClientToAdversaryServer_case_01
    by contradiction /* from formulas */
  next
    case TLSClientToAdversaryServer_case_02
    by contradiction /* from formulas */
  next
    case TLSClientToAdversaryServer_case_03
    by contradiction /* from formulas */
  next
    case TLSClientToAdversaryServer_case_04
    by contradiction /* from formulas */
  next
    case TLSClientToAdversaryServer_case_05
    by contradiction /* from formulas */
  next
    case TLSClientToAdversaryServer_case_06
    by contradiction /* from formulas */
  next
    case TLSClientToAdversaryServer_case_07
    by contradiction /* from formulas */
  next
    case TLSClientToAdversaryServer_case_08
    by contradiction /* from formulas */
  next
    case TLSClientToAdversaryServer_case_09
    by contradiction /* from formulas */
  next
    case TLSClientToAdversaryServer_case_10
    by contradiction /* from formulas */
  next
    case TLSClientToAdversaryServer_case_11
    by contradiction /* from formulas */
  next
    case TLSClientToAdversaryServer_case_12
    solve( TLSServer_In( 'GET', ~pw, $IdP.1,
                         <'oidc_req', $Client, hash, nonce, code_challenge, $Domain>
           ) ▶₂ #vr.10 )
      case TLSClientToServer
      by contradiction /* cyclic */
    qed
  qed
qed

lemma MessagingKeysUnique [reuse]:
  all-traces
  "∀ userA userB phoneA phoneB sk #a #b.
    ((ClaimMessagingKey( userA, phoneA, sk ) @ #a) ∧
     (ClaimMessagingKey( userB, phoneB, sk ) @ #b)) ⇒
    ((((#a = #b) ∧ (userA = userB)) ∧ (phoneA = phoneB)) ∨
     (∃ d #x #y. (IsKeyServer( d ) @ #x) ∧ (CompromisedDomain( d ) @ #y)))"
/*
guarded formula characterizing all counter-examples:
"∃ userA userB phoneA phoneB sk #a #b.
  (ClaimMessagingKey( userA, phoneA, sk ) @ #a) ∧
  (ClaimMessagingKey( userB, phoneB, sk ) @ #b)
 ∧
  (((¬(#a = #b)) ∨ (¬(userA = userB)) ∨ (¬(phoneA = phoneB)))) ∧
  (∀ d #x #y. (IsKeyServer( d ) @ #x) ∧ (CompromisedDomain( d ) @ #y) ⇒ ⊥)"
*/
simplify
solve( (¬(#a = #b))  ∥ (¬($A = $A.1))  ∥ (¬($Number = $Number.1)) )
  case case_1
  solve( !KeyServer( $Server ) ▶₀ #a )
    case KeyServer
    solve( St_MessagingReg_AppWait( $A, $Number, ~sess, sk ) ▶₁ #a )
      case MessagingRespond
      solve( TLSClient_In( 'GET', ~sess, $Server, 'msg_signup_ack' ) ▶₂ #a )
        case TLSServerToClient_case_1
        solve( !KeyServer( $Server.1 ) ▶₀ #b )
          case KeyServer
          solve( St_MessagingReg_AppWait( $A.1, $Number.1, ~sess.1, ~sk ) ▶₁ #b )
            case MessagingRespond
            by contradiction /* from formulas */
          qed
        qed
      next
        case TLSServerToClient_case_2
        by contradiction /* from formulas */
      qed
    qed
  qed
next
  case case_2
  solve( !KeyServer( $Server ) ▶₀ #a )
    case KeyServer
    solve( St_MessagingReg_AppWait( $A, $Number, ~sess, sk ) ▶₁ #a )
      case MessagingRespond
      solve( TLSClient_In( 'GET', ~sess, $Server, 'msg_signup_ack' ) ▶₂ #a )
        case TLSServerToClient_case_1
        solve( !KeyServer( $Server.1 ) ▶₀ #b )
          case KeyServer
          solve( St_MessagingReg_AppWait( $A.1, $Number.1, ~sess.1, ~sk ) ▶₁ #b )
            case MessagingRespond
            by contradiction /* from formulas */
          qed
        qed
      next
        case TLSServerToClient_case_2
        by contradiction /* from formulas */
      qed
    qed
  qed
next
  case case_3
  solve( !KeyServer( $Server ) ▶₀ #a )
    case KeyServer
    solve( St_MessagingReg_AppWait( $A, $Number, ~sess, sk ) ▶₁ #a )
      case MessagingRespond
      solve( TLSClient_In( 'GET', ~sess, $Server, 'msg_signup_ack' ) ▶₂ #a )
        case TLSServerToClient_case_1
        solve( !KeyServer( $Server.1 ) ▶₀ #b )
          case KeyServer
          solve( St_MessagingReg_AppWait( $A.1, $Number.1, ~sess.1, ~sk ) ▶₁ #b )
            case MessagingRespond
            by contradiction /* from formulas */
          qed
        qed
      next
        case TLSServerToClient_case_2
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

rule (modulo E) OIDCIdPIssueCode[color=#b4d9ef]:
   [
   !IdP( $IdP ), !IdPAccount( $User, $IdP, $Username, pw ), Fr( ~code ),
   St_OIDCServer_Auth( $IdP, $Client, $RedirectURL, ~sess, hash, nonce,
                       code_challenge
   ),
   TLSServer_In( 'GET', ~sess, $IdP, <'login', $Username, pw> )
   ]
  --[
  IsCode( ~code ), MustBeNonce( nonce ),
  SOAPIdP( $User, nonce, $IdP, $Username )
  ]->
   [
   TLSClient_Out( 'GET', ~sess, $RedirectURL, <'code', ~code, nonce> ),
   St_OIDCIdP_Code( $IdP, $Username, $Client, $RedirectURL, ~code, hash,
                    nonce, code_challenge
   )
   ]

  // loop breaker: [4]
  /* has exactly the trivial AC variant */

rule (modulo E) OIDCAppCodeRedirect[color=#b4d9ef]:
   [
   !RedirectURL( $IdP, $App, $RedirectURL ), !IdP( $IdP ),
   !MessagingApp( $App ), Fr( ~sessPost ),
   SessionStore( $Prover, nonce,
                 <$IdP, $VerifierPhone, hash, salt, code_verifier>
   ),
   !Browser( $Prover, ~sess ),
   TLSServer_In( 'GET', ~sess, $RedirectURL, <'code', code, nonce> )
   ]
  --[
  SelfIssued( $Prover, nonce ), Neq( nonce, 'null' ), MustBeCode( code )
  ]->
   [
   TLSClient_Out( 'POST', ~sessPost, $IdP,
                  <'token_req', code, code_verifier, $RedirectURL>
   ),
   St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost, hash, salt,
                       code
   ),
   SessionStore( $Prover, 'null', 'null' )
   ]

  // loop breaker: [6]
  /* has exactly the trivial AC variant */

rule (modulo E) OIDCIdPTokenIssue[color=#b4d9ef]:
   [
   !IdPLtk( $IdP, idpSk ),
   St_OIDCIdP_Code( $IdP, $Username, $Client, $RedirectURL, code, hash,
                    nonce, code_challenge
   ),
   TLSServer_In( 'POST', ~sess, $IdP,
                 <'token_req', code, code_verifier, $RedirectURL>
   )
   ]
  --[
  Eq( s256(code_verifier), code_challenge ),
  IssueTokenForCode( $IdP, ~sess, code ),
  MustBeToken( <<$IdP, $Client, $Username, nonce, hash>, 
                sign(<$IdP, $Client, $Username, nonce, hash>, idpSk)>
  ),
  UseCode( $IdP, $Client, code ), UseCodeVerifierFor( $IdP, code_verifier )
  ]->
   [
   TLSServer_Out( 'POST', ~sess, $IdP,
                  <'token', <$IdP, $Client, $Username, nonce, hash>, 
                   sign(<$IdP, $Client, $Username, nonce, hash>, idpSk)>
   )
   ]

  // loop breaker: [2]
  /* has exactly the trivial AC variant */

lemma CodeSecrecy [reuse]:
  all-traces
  "∀ idp client code #t1 #t2 #t3.
    (((UseCode( idp, client, code ) @ #t1) ∧
      (IsMessagingApp( client ) @ #t2)) ∧
     (!KU( code ) @ #t3)) ⇒
    (((∃ #x. (UsedCode( idp, code ) @ #x) ∧ (#x < #t3)) ∨
      (∃ url #x #y.
        (IsRedirectURL( idp, client, url ) @ #x) ∧
        (CompromisedDomain( url ) @ #y))) ∨
     (∃ #x. CompromisedDomain( idp ) @ #x))"
/*
guarded formula characterizing all counter-examples:
"∃ idp client code #t1 #t2 #t3.
  (UseCode( idp, client, code ) @ #t1) ∧
  (IsMessagingApp( client ) @ #t2) ∧
  (!KU( code ) @ #t3)
 ∧
  (∀ #x. (UsedCode( idp, code ) @ #x) ⇒ ¬(#x < #t3)) ∧
  (∀ url #x #y.
    (IsRedirectURL( idp, client, url ) @ #x) ∧
    (CompromisedDomain( url ) @ #y)
   ⇒
    ⊥) ∧
  (∀ #x. (CompromisedDomain( idp ) @ #x) ⇒ ⊥)"
*/
simplify
solve( St_OIDCIdP_Code( $IdP, $Username, $Client, $RedirectURL, code,
                        hash, nonce, s256(code_verifier)
       ) ▶₁ #t1 )
  case OIDCIdPIssueCode
  solve( !KU( ~code ) @ #t3 )
    case OIDCTokenForward_case_01
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* cyclic */
    next
      case TLSClientToServer_case_2
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_3
      by contradiction /* cyclic */
    qed
  next
    case OIDCTokenForward_case_02
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* cyclic */
    next
      case TLSClientToServer_case_2
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_3
      by contradiction /* cyclic */
    qed
  next
    case OIDCTokenForward_case_03
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* cyclic */
    next
      case TLSClientToServer_case_2
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_3
      by contradiction /* cyclic */
    qed
  next
    case OIDCTokenForward_case_04
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* cyclic */
    next
      case TLSClientToServer_case_2
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_3
      by contradiction /* cyclic */
    qed
  next
    case OIDCTokenForward_case_05
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* cyclic */
    next
      case TLSClientToServer_case_2
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_3
      by contradiction /* cyclic */
    qed
  next
    case OIDCTokenForward_case_06
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* cyclic */
    next
      case TLSClientToServer_case_2
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_3
      by contradiction /* cyclic */
    qed
  next
    case OIDCTokenForward_case_07
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* cyclic */
    next
      case TLSClientToServer_case_2
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_3
      by contradiction /* cyclic */
    qed
  next
    case OIDCTokenForward_case_08
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* cyclic */
    next
      case TLSClientToServer_case_2
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_3
      by contradiction /* cyclic */
    qed
  next
    case OIDCTokenForward_case_09
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* cyclic */
    next
      case TLSClientToServer_case_2
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_3
      by contradiction /* cyclic */
    qed
  next
    case OIDCTokenForward_case_10
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* cyclic */
    next
      case TLSClientToServer_case_2
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_3
      by contradiction /* cyclic */
    qed
  next
    case OIDCTokenForward_case_11
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* cyclic */
    next
      case TLSClientToServer_case_2
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_3
      by contradiction /* cyclic */
    qed
  next
    case OIDCTokenForward_case_12
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* cyclic */
    next
      case TLSClientToServer_case_2
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_3
      by contradiction /* cyclic */
    qed
  next
    case OIDCTokenForward_case_13
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* cyclic */
    next
      case TLSClientToServer_case_2
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_3
      by contradiction /* cyclic */
    qed
  next
    case OIDCTokenForward_case_14
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* cyclic */
    next
      case TLSClientToServer_case_2
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_3
      by contradiction /* cyclic */
    qed
  next
    case OIDCTokenForward_case_15
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* cyclic */
    next
      case TLSClientToServer_case_2
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_3
      by contradiction /* cyclic */
    qed
  next
    case OIDCTokenForward_case_16
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* cyclic */
    next
      case TLSClientToServer_case_2
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_3
      by contradiction /* cyclic */
    qed
  next
    case OIDCTokenForward_case_17
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_2
      by contradiction /* cyclic */
    qed
  next
    case OIDCTokenForward_case_18
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_2
      by contradiction /* cyclic */
    qed
  next
    case OIDCTokenForward_case_19
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_2
      by contradiction /* cyclic */
    qed
  next
    case OIDCTokenForward_case_20
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_2
      by contradiction /* cyclic */
    qed
  next
    case OIDCTokenForward_case_21
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_2
      by contradiction /* cyclic */
    qed
  next
    case OIDCTokenForward_case_22
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_2
      by contradiction /* cyclic */
    qed
  next
    case OIDCTokenForward_case_23
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_2
      by contradiction /* cyclic */
    qed
  next
    case OIDCTokenForward_case_24
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_2
      by contradiction /* cyclic */
    qed
  next
    case OIDCTokenForward_case_25
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_2
      by contradiction /* cyclic */
    qed
  next
    case OIDCTokenForward_case_26
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_2
      by contradiction /* cyclic */
    qed
  next
    case OIDCTokenForward_case_27
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_2
      by contradiction /* cyclic */
    qed
  next
    case OIDCTokenForward_case_28
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_2
      by contradiction /* cyclic */
    qed
  next
    case OIDCTokenForward_case_29
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_2
      by contradiction /* cyclic */
    qed
  next
    case OIDCTokenForward_case_30
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_2
      by contradiction /* cyclic */
    qed
  next
    case OIDCTokenForward_case_31
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_2
      by contradiction /* cyclic */
    qed
  next
    case OIDCTokenForward_case_32
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_2
      by contradiction /* cyclic */
    qed
  next
    case TLSClientToAdversaryServer_case_01
    by contradiction /* from formulas */
  next
    case TLSClientToAdversaryServer_case_02
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* cyclic */
    next
      case TLSClientToServer_case_2
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_3
      by contradiction /* cyclic */
    qed
  next
    case TLSClientToAdversaryServer_case_03
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* cyclic */
    next
      case TLSClientToServer_case_2
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_3
      by contradiction /* cyclic */
    qed
  next
    case TLSClientToAdversaryServer_case_04
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* cyclic */
    next
      case TLSClientToServer_case_2
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_3
      by contradiction /* cyclic */
    qed
  next
    case TLSClientToAdversaryServer_case_05
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* cyclic */
    next
      case TLSClientToServer_case_2
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_3
      by contradiction /* cyclic */
    qed
  next
    case TLSClientToAdversaryServer_case_06
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_2
      by contradiction /* cyclic */
    qed
  next
    case TLSClientToAdversaryServer_case_07
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_2
      by contradiction /* cyclic */
    qed
  next
    case TLSClientToAdversaryServer_case_08
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_2
      by contradiction /* cyclic */
    qed
  next
    case TLSClientToAdversaryServer_case_09
    solve( TLSServer_In( 'GET', ~sess.3, $RedirectURL.1,
                         <'code', ~code, ~n.1>
           ) ▶₆ #vr.17 )
      case TLSClientToServer_case_1
      by contradiction /* from formulas */
    next
      case TLSClientToServer_case_2
      by contradiction /* cyclic */
    qed
  next
    case TLSClientToAdversaryServer_case_10
    solve( TLSServer_In( 'GET', ~code, $IdP.1, <'login', $Username.1, ~pw.1>
           ) ▶₄ #vr.17 )
      case TLSClientToServer
      by contradiction /* cyclic */
    qed
  qed
qed

lemma CodeVerifierSecrecy [reuse]:
  all-traces
  "∀ verifier idp #x #y.
    ((UseCodeVerifierFor( idp, verifier ) @ #x) ∧
     (GenerateCodeVerifierFor( verifier, idp ) @ #y)) ⇒
    ((¬(∃ #z. !KU( verifier ) @ #z)) ∨
     (∃ #z. CompromisedDomain( idp ) @ #z))"
/*
guarded formula characterizing all counter-examples:
"∃ verifier idp #x #y.
  (UseCodeVerifierFor( idp, verifier ) @ #x) ∧
  (GenerateCodeVerifierFor( verifier, idp ) @ #y)
 ∧
  (∃ #z. (!KU( verifier ) @ #z)) ∧
  (∀ #z. (CompromisedDomain( idp ) @ #z) ⇒ ⊥)"
*/
simplify
solve( !KU( ~n ) @ #z )
  case TLSClientToAdversaryServer_case_1
  by contradiction /* from formulas */
next
  case TLSClientToAdversaryServer_case_2
  by contradiction /* from formulas */
next
  case TLSClientToAdversaryServer_case_3
  by contradiction /* from formulas */
next
  case TLSClientToAdversaryServer_case_4
  by contradiction /* from formulas */
next
  case TLSClientToAdversaryServer_case_5
  by contradiction /* from formulas */
next
  case TLSClientToAdversaryServer_case_6
  by contradiction /* from formulas */
next
  case TLSClientToAdversaryServer_case_7
  by contradiction /* from formulas */
next
  case TLSClientToAdversaryServer_case_8
  by contradiction /* from formulas */
next
  case TLSClientToAdversaryServer_case_9
  solve( TLSServer_In( 'GET', ~n.1, $IdP.1,
                       <'oidc_req', $Client.1, hash.1, nonce.1, code_challenge, $Domain>
         ) ▶₂ #vr.8 )
    case TLSClientToServer
    by contradiction /* cyclic */
  qed
qed

lemma TokenFormatAndOTPLearning [sources]:
  all-traces
  "((((∀ token #i.
        (MustBeToken( token ) @ #i) ⇒
        (∃ first second user idp client nonce hashed sk.
          ((((token = <first, second>) ∧
             (first = <idp, client, user, nonce, hashed>)) ∧
            ((∃ #h. (!KU( nonce ) @ #h) ∧ (#h < #i)) ∨
             (∃ #h. IsNonce( nonce ) @ #h))) ∧
           ((∃ #h. (!KU( hashed ) @ #h) ∧ (#h < #i)) ∨
            (∃ fp salt. hashed = h(fp, salt)))) ∧
          (second = sign(first, sk)))) ∧
      (∀ nonce #i.
        (MustBeNonce( nonce ) @ #i) ⇒
        ((∃ #h. (!KU( nonce ) @ #h) ∧ (#h < #i)) ∨
         (∃ #h. IsNonce( nonce ) @ #h)))) ∧
     (∀ code #i.
       (MustBeCode( code ) @ #i) ⇒
       ((∃ #h. (!KU( code ) @ #h) ∧ (#h < #i)) ∨
        (∃ #h. IsCode( code ) @ #h)))) ∧
    (∀ chall #i.
      (MustBeOTP( chall ) @ #i) ⇒
      ((∃ #j. (IsOTP( chall ) @ #j) ∧ (#j < #i)) ∨
       (∃ #j. (!KU( chall ) @ #j) ∧ (#j < #i))))) ∧
   (∀ ltk #i.
     (MustBeMessagingKey( ltk ) @ #i) ⇒
     ((∃ sk #j. (IsMessagingKey( sk ) @ #j) ∧ (ltk = pk(sk))) ∨
      (∃ #j. (!KU( ltk ) @ #j) ∧ (#j < #i))))"
/*
guarded formula characterizing all counter-examples:
"((∃ token #i.
    (MustBeToken( token ) @ #i)
   ∧
    ∀ first second user idp client nonce hashed sk.
     (token = <first, second>) ∧
     (first = <idp, client, user, nonce, hashed>) ∧
     (second = sign(first, sk))
    ⇒
     (((∀ #h. (!KU( nonce ) @ #h) ⇒ ¬(#h < #i)) ∧
       (∀ #h. (IsNonce( nonce ) @ #h) ⇒ ⊥)) ∨
      ((∀ #h. (!KU( hashed ) @ #h) ⇒ ¬(#h < #i)) ∧
       (∀ fp salt. (hashed = h(fp, salt)) ⇒ ⊥)))) ∨
  (∃ nonce #i.
    (MustBeNonce( nonce ) @ #i)
   ∧
    (∀ #h. (!KU( nonce ) @ #h) ⇒ ¬(#h < #i)) ∧
    (∀ #h. (IsNonce( nonce ) @ #h) ⇒ ⊥)) ∨
  (∃ code #i.
    (MustBeCode( code ) @ #i)
   ∧
    (∀ #h. (!KU( code ) @ #h) ⇒ ¬(#h < #i)) ∧
    (∀ #h. (IsCode( code ) @ #h) ⇒ ⊥)) ∨
  (∃ chall #i.
    (MustBeOTP( chall ) @ #i)
   ∧
    (∀ #j. (IsOTP( chall ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j. (!KU( chall ) @ #j) ⇒ ¬(#j < #i))) ∨
  (∃ ltk #i.
    (MustBeMessagingKey( ltk ) @ #i)
   ∧
    (∀ sk #j. (IsMessagingKey( sk ) @ #j) ∧ (ltk = pk(sk)) ⇒ ⊥) ∧
    (∀ #j. (!KU( ltk ) @ #j) ⇒ ¬(#j < #i))))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∃ token #i.
           (MustBeToken( token ) @ #i)
          ∧
           ∀ first second user idp client nonce hashed sk.
            (token = <first, second>) ∧
            (first = <idp, client, user, nonce, hashed>) ∧
            (second = sign(first, sk))
           ⇒
            (((∀ #h. (!KU( nonce ) @ #h) ⇒ ¬(#h < #i)) ∧
              (∀ #h. (IsNonce( nonce ) @ #h) ⇒ ⊥)) ∨
             ((∀ #h. (!KU( hashed ) @ #h) ⇒ ¬(#h < #i)) ∧
              (∀ fp salt. (hashed = h(fp, salt)) ⇒ ⊥))))  ∥
         (∃ nonce #i.
           (MustBeNonce( nonce ) @ #i)
          ∧
           (∀ #h. (!KU( nonce ) @ #h) ⇒ ¬(#h < #i)) ∧
           (∀ #h. (IsNonce( nonce ) @ #h) ⇒ ⊥))  ∥
         (∃ code #i.
           (MustBeCode( code ) @ #i)
          ∧
           (∀ #h. (!KU( code ) @ #h) ⇒ ¬(#h < #i)) ∧
           (∀ #h. (IsCode( code ) @ #h) ⇒ ⊥))  ∥
         (∃ chall #i.
           (MustBeOTP( chall ) @ #i)
          ∧
           (∀ #j. (IsOTP( chall ) @ #j) ⇒ ¬(#j < #i)) ∧
           (∀ #j. (!KU( chall ) @ #j) ⇒ ¬(#j < #i)))  ∥
         (∃ ltk #i.
           (MustBeMessagingKey( ltk ) @ #i)
          ∧
           (∀ sk #j. (IsMessagingKey( sk ) @ #j) ∧ (ltk = pk(sk)) ⇒ ⊥) ∧
           (∀ #j. (!KU( ltk ) @ #j) ⇒ ¬(#j < #i))) )
    case case_1
    solve( (last(#i))  ∥
           (∃ first second user idp client nonce hashed sk.
             (token = <first, second>) ∧
             (first = <idp, client, user, nonce, hashed>) ∧
             (second = sign(first, sk))
            ∧
             (((∃ #h. (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #i)) ∨
               (∃ #h. (IsNonce( nonce ) @ #h) ∧ ¬(last(#h))))) ∧
             (((∃ #h. (!KU( hashed ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #i)) ∨
               (∃ fp salt. (hashed = h(fp, salt)))))) )
      case case_1
      solve( MustBeToken( token ) @ #i )
        case OIDCIdPTokenIssue
        solve( ((∀ #h. (!KU( nonce ) @ #h) ⇒ ¬(#h < #i)) ∧
                (∀ #h. (IsNonce( nonce ) @ #h) ⇒ ⊥))  ∥
               ((∀ #h. (!KU( hash ) @ #h) ⇒ ¬(#h < #i)) ∧
                (∀ fp salt. (hash = h(fp, salt)) ⇒ ⊥)) )
          case case_1
          solve( St_OIDCIdP_Code( $IdP, $Username, $Client, $RedirectURL, code,
                                  hash, nonce, s256(code_verifier)
                 ) ▶₁ #i )
            case OIDCIdPIssueCode
            solve( (∃ #h. (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ #h. (IsNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        next
          case case_2
          solve( St_OIDCIdP_Code( $IdP, $Username, $Client, $RedirectURL, code,
                                  hash, nonce, s256(code_verifier)
                 ) ▶₁ #i )
            case OIDCIdPIssueCode
            solve( (∃ #h. (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ #h. (IsNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.3))  ∥
                     (∃ #h. (IsNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( TLSServer_In( 'GET', ~sess.1, $IdP,
                                     <'oidc_req', $Client, hash, nonce, s256(code_verifier), $RedirectURL>
                       ) ▶₂ #vr.3 )
                  case TLSClientToServer_case_1
                  by contradiction /* from formulas */
                next
                  case TLSClientToServer_case_2
                  by contradiction /* from formulas */
                next
                  case TLSClientToServer_case_3
                  by contradiction /* from formulas */
                next
                  case TLSClientToServer_case_4
                  by contradiction /* from formulas */
                next
                  case TLSClientToServer_case_5
                  by contradiction /* from formulas */
                next
                  case TLSClientToServer_case_6
                  by contradiction /* from formulas */
                qed
              next
                case case_2
                solve( TLSServer_In( 'GET', ~sess.1, $IdP,
                                     <'oidc_req', $Client, hash, ~n, s256(code_verifier), $RedirectURL>
                       ) ▶₂ #vr.3 )
                  case TLSClientToServer_case_1
                  by contradiction /* from formulas */
                next
                  case TLSClientToServer_case_2
                  by contradiction /* from formulas */
                next
                  case TLSClientToServer_case_3
                  by contradiction /* from formulas */
                next
                  case TLSClientToServer_case_4
                  by contradiction /* from formulas */
                next
                  case TLSClientToServer_case_5
                  by contradiction /* from formulas */
                next
                  case TLSClientToServer_case_6
                  by contradiction /* from formulas */
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.3))  ∥
                     (∃ #h. (IsNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( TLSServer_In( 'GET', ~sess.2, $IdP.1,
                                     <'oidc_req', $Client, hash, ~n.1, s256(code_verifier), $RedirectURL.1>
                       ) ▶₂ #vr.3 )
                  case TLSClientToServer_case_1
                  by contradiction /* from formulas */
                next
                  case TLSClientToServer_case_2
                  by contradiction /* from formulas */
                next
                  case TLSClientToServer_case_3
                  by contradiction /* from formulas */
                next
                  case TLSClientToServer_case_4
                  by contradiction /* from formulas */
                next
                  case TLSClientToServer_case_5
                  by contradiction /* from formulas */
                next
                  case TLSClientToServer_case_6
                  by contradiction /* from formulas */
                qed
              next
                case case_2
                solve( TLSServer_In( 'GET', ~sess.2, $IdP.1,
                                     <'oidc_req', $Client, hash, ~n.1, s256(code_verifier), $RedirectURL.1>
                       ) ▶₂ #vr.3 )
                  case TLSClientToServer_case_1
                  by contradiction /* from formulas */
                next
                  case TLSClientToServer_case_2
                  by contradiction /* from formulas */
                next
                  case TLSClientToServer_case_3
                  by contradiction /* from formulas */
                next
                  case TLSClientToServer_case_4
                  by contradiction /* from formulas */
                next
                  case TLSClientToServer_case_5
                  by contradiction /* from formulas */
                next
                  case TLSClientToServer_case_6
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      next
        case OIDCTokenForward
        solve( ((∀ #h. (!KU( nonce ) @ #h) ⇒ ¬(#h < #i)) ∧
                (∀ #h. (IsNonce( nonce ) @ #h) ⇒ ⊥))  ∥
               ((∀ #h.
                  (!KU( h(fingerprint(<pk(skProver), pkVerifier>), salt) ) @ #h)
                 ⇒
                  ¬(#h < #i)) ∧
                (∀ fp salt.1.
                  (h(fingerprint(<pk(skProver), pkVerifier>), salt) = h(fp, salt.1))
                 ⇒
                  ⊥)) )
          case case_1
          solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                               <'token', 
                                <$IdP, $App, $Username, nonce, 
                                 h(fingerprint(<pk(skProver), pkVerifier>), salt)>, 
                                sign(<$IdP, $App, $Username, nonce, 
                                      h(fingerprint(<pk(skProver), pkVerifier>), salt)>,
                                     x)
                               >
                 ) ▶₆ #i )
            case TLSServerToClient_case_1
            solve( (∃ #h. (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.2))  ∥
                   (∃ #h. (IsNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case TLSServerToClient_case_2
            by contradiction /* from formulas */
          qed
        next
          case case_2
          by contradiction /* from formulas */
        qed
      qed
    next
      case case_2
      solve( (∃ #h. (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #i))  ∥
             (∃ #h. (IsNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
        case case_1
        solve( (∃ #h. (!KU( hashed ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #i))  ∥
               (∃ fp salt. (hashed = h(fp, salt))) )
          case case_1
          solve( ((∀ #h. (!KU( nonce ) @ #h) ⇒ ¬(#h < #i)) ∧
                  (∀ #h. (IsNonce( nonce ) @ #h) ⇒ ⊥))  ∥
                 ((∀ #h. (!KU( hashed ) @ #h) ⇒ ¬(#h < #i)) ∧
                  (∀ fp salt. (hashed = h(fp, salt)) ⇒ ⊥)) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_2
          solve( ((∀ #h. (!KU( nonce ) @ #h) ⇒ ¬(#h < #i)) ∧
                  (∀ #h. (IsNonce( nonce ) @ #h) ⇒ ⊥))  ∥
                 ((∀ #h. (!KU( h(fp, salt) ) @ #h) ⇒ ¬(#h < #i)) ∧
                  (∀ fp.1 salt.1. (h(fp, salt) = h(fp.1, salt.1)) ⇒ ⊥)) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        qed
      next
        case case_2
        solve( (∃ #h. (!KU( hashed ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #i))  ∥
               (∃ fp salt. (hashed = h(fp, salt))) )
          case case_1
          solve( ((∀ #h. (!KU( ~n.1 ) @ #h) ⇒ ¬(#h < #i)) ∧
                  (∀ #h. (IsNonce( ~n.1 ) @ #h) ⇒ ⊥))  ∥
                 ((∀ #h. (!KU( hashed ) @ #h) ⇒ ¬(#h < #i)) ∧
                  (∀ fp salt. (hashed = h(fp, salt)) ⇒ ⊥)) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_2
          solve( ((∀ #h. (!KU( ~n.1 ) @ #h) ⇒ ¬(#h < #i)) ∧
                  (∀ #h. (IsNonce( ~n.1 ) @ #h) ⇒ ⊥))  ∥
                 ((∀ #h. (!KU( h(fp, salt) ) @ #h) ⇒ ¬(#h < #i)) ∧
                  (∀ fp.1 salt.1. (h(fp, salt) = h(fp.1, salt.1)) ⇒ ⊥)) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( (last(#i))  ∥
           (∃ #h. (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #i))  ∥
           (∃ #h. (IsNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
      case case_1
      solve( MustBeNonce( nonce ) @ #i )
        case OIDCIdPInit
        solve( TLSServer_In( 'GET', ~sess, $IdP,
                             <'oidc_req', $Client, hash, nonce, code_challenge, $RedirectURL>
               ) ▶₂ #i )
          case TLSClientToServer_case_1
          by contradiction /* from formulas */
        next
          case TLSClientToServer_case_2
          by contradiction /* from formulas */
        next
          case TLSClientToServer_case_3
          by contradiction /* from formulas */
        next
          case TLSClientToServer_case_4
          by contradiction /* from formulas */
        next
          case TLSClientToServer_case_5
          by contradiction /* from formulas */
        next
          case TLSClientToServer_case_6
          by contradiction /* from formulas */
        qed
      next
        case OIDCIdPIssueCode
        solve( St_OIDCServer_Auth( $IdP, $Client, $RedirectURL, ~sess, hash,
                                   nonce, code_challenge
               ) ▶₃ #i )
          case OIDCIdPInit
          solve( (∃ #h. (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                 (∃ #h. (IsNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  next
    case case_3
    solve( (last(#i))  ∥
           (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #i))  ∥
           (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
      case case_1
      solve( MustBeCode( code ) @ #i )
        case OIDCAppCodeRedirect
        solve( TLSServer_In( 'GET', ~sess, $RedirectURL, <'code', code, nonce>
               ) ▶₆ #i )
          case TLSClientToServer_case_1
          by contradiction /* from formulas */
        next
          case TLSClientToServer_case_2
          by contradiction /* from formulas */
        next
          case TLSClientToServer_case_3
          by contradiction /* from formulas */
        qed
      next
        case OIDCTokenForward
        solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                             <'token', 
                              <$IdP, $App, $Username, nonce, 
                               h(fingerprint(<pk(skProver), pkVerifier>), salt)>, 
                              sign(<$IdP, $App, $Username, nonce, 
                                    h(fingerprint(<pk(skProver), pkVerifier>), salt)>,
                                   x)
                             >
               ) ▶₆ #i )
          case TLSServerToClient_case_1
          solve( (∃ #h. (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.2))  ∥
                 (∃ #h. (IsNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            solve( (∃ #h.
                     (!KU( h(fingerprint(<pk(skProver), pkVerifier>), salt) ) @ #h)
                    ∧
                     (¬(last(#h))) ∧ (#h < #vr.2))  ∥
                   (∃ fp salt.1.
                     (h(fingerprint(<pk(skProver), pkVerifier>), salt) = h(fp, salt.1))) )
              case case_1
              solve( (∃ #h. (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.5))  ∥
                     (∃ #h. (IsNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                       (∃ #h. (IsNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( TLSServer_In( 'GET', ~sess, $IdP,
                                       <'oidc_req', $App, h(fingerprint(<pk(skProver), pkVerifier>), salt), 
                                        nonce, s256(code_verifier), $RedirectURL>
                         ) ▶₂ #vr.9 )
                    case TLSClientToServer_case_1
                    solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                               h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, code
                           ) ▶₅ #i )
                      case OIDCAppCodeRedirect_case_1
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_2
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_3
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_4
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_5
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_6
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_7
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_8
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.35))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.35)) )
                      case case_1
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.47)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                                   h(fingerprint(<pk(~sk.1), pk(~sk)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.50))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.50))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.50))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.50))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.47)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                                   h(fingerprint(<pk(~sk.1), pk(~sk)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.50))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.50))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.50))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.50))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.35))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.35)) )
                      case case_1
                      solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_4
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.35))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.35)) )
                      case case_1
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.47)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                                   h(fingerprint(<pk(~sk.1), pk(~sk)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.50))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.50))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.50))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.50))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.47)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                                   h(fingerprint(<pk(~sk.1), pk(~sk)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.50))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.50))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.50))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.50))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_5
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.35))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.35)) )
                      case case_1
                      solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_6
                    solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                               h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, code
                           ) ▶₅ #i )
                      case OIDCAppCodeRedirect_case_1
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_2
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_3
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_4
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_5
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_6
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_7
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_8
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( TLSServer_In( 'GET', ~sess, $IdP,
                                       <'oidc_req', $App, h(fingerprint(<pk(skProver), pkVerifier>), salt), 
                                        ~n, s256(code_verifier), $RedirectURL>
                         ) ▶₂ #vr.9 )
                    case TLSClientToServer_case_1
                    solve( St_OIDCApp_CodeReq( $Prover.1, $IdP.1, $VerifierPhone.1,
                                               ~sessPost,
                                               h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), salt,
                                               code
                           ) ▶₅ #i )
                      case OIDCAppCodeRedirect_case_1
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_2
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_3
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_4
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_5
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_6
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_7
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_8
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_4
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_5
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_6
                    solve( St_OIDCApp_CodeReq( $Prover.1, $IdP.1, $VerifierPhone.1,
                                               ~sessPost,
                                               h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), salt,
                                               code
                           ) ▶₅ #i )
                      case OIDCAppCodeRedirect_case_1
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_2
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_3
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_4
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_5
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_6
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_7
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_8
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                       (∃ #h. (IsNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( TLSServer_In( 'GET', ~sess.1, $IdP.1,
                                       <'oidc_req', $App.1, 
                                        h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), ~n.1, 
                                        s256(code_verifier), $RedirectURL.1>
                         ) ▶₂ #vr.9 )
                    case TLSClientToServer_case_1
                    solve( St_OIDCApp_CodeReq( $Prover.1, $IdP.1, $VerifierPhone.1,
                                               ~sessPost,
                                               h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), salt,
                                               code
                           ) ▶₅ #i )
                      case OIDCAppCodeRedirect_case_1
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_2
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_3
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_4
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_5
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_6
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_7
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_8
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_4
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_5
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_6
                    solve( St_OIDCApp_CodeReq( $Prover.1, $IdP.1, $VerifierPhone.1,
                                               ~sessPost,
                                               h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), salt,
                                               code
                           ) ▶₅ #i )
                      case OIDCAppCodeRedirect_case_1
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_2
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_3
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_4
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_5
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_6
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_7
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_8
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( TLSServer_In( 'GET', ~sess.1, $IdP.1,
                                       <'oidc_req', $App.1, 
                                        h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), ~n.1, 
                                        s256(code_verifier), $RedirectURL.1>
                         ) ▶₂ #vr.9 )
                    case TLSClientToServer_case_1
                    solve( St_OIDCApp_CodeReq( $Prover.1, $IdP.1, $VerifierPhone.1,
                                               ~sessPost,
                                               h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), salt,
                                               code
                           ) ▶₅ #i )
                      case OIDCAppCodeRedirect_case_1
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_2
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_3
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_4
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_5
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_6
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_7
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_8
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_4
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_5
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_6
                    solve( St_OIDCApp_CodeReq( $Prover.1, $IdP.1, $VerifierPhone.1,
                                               ~sessPost,
                                               h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), salt,
                                               code
                           ) ▶₅ #i )
                      case OIDCAppCodeRedirect_case_1
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_2
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_3
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_4
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_5
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_6
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_7
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_8
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.5))  ∥
                     (∃ #h. (IsNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                       (∃ #h. (IsNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( TLSServer_In( 'GET', ~sess, $IdP,
                                       <'oidc_req', $App, h(fingerprint(<pk(skProver), pkVerifier>), salt), 
                                        nonce, s256(code_verifier), $RedirectURL>
                         ) ▶₂ #vr.9 )
                    case TLSClientToServer_case_1
                    solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                               h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, code
                           ) ▶₅ #i )
                      case OIDCAppCodeRedirect_case_1
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_2
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_3
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_4
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_5
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_6
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_7
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_8
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.35))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.35)) )
                      case case_1
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.47)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                                   h(fingerprint(<pk(~sk.1), pk(~sk)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.50))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.50))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.50))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.50))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.47)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                                   h(fingerprint(<pk(~sk.1), pk(~sk)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.50))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.50))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.50))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.50))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.35))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.35)) )
                      case case_1
                      solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_4
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.35))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.35)) )
                      case case_1
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.47)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                                   h(fingerprint(<pk(~sk.1), pk(~sk)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.50))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.50))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.50))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.50))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.47)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                                   h(fingerprint(<pk(~sk.1), pk(~sk)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.50))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.50))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.50))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.50))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_5
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.35))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.35)) )
                      case case_1
                      solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_6
                    solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                               h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, code
                           ) ▶₅ #i )
                      case OIDCAppCodeRedirect_case_1
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_2
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_3
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_4
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_5
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_6
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_7
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_8
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( TLSServer_In( 'GET', ~sess, $IdP,
                                       <'oidc_req', $App, h(fingerprint(<pk(skProver), pkVerifier>), salt), 
                                        ~n, s256(code_verifier), $RedirectURL>
                         ) ▶₂ #vr.9 )
                    case TLSClientToServer_case_1
                    solve( St_OIDCApp_CodeReq( $Prover.1, $IdP.1, $VerifierPhone.1,
                                               ~sessPost,
                                               h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), salt,
                                               code
                           ) ▶₅ #i )
                      case OIDCAppCodeRedirect_case_1
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_2
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_3
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_4
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_5
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_6
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_7
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_8
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_4
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_5
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_6
                    solve( St_OIDCApp_CodeReq( $Prover.1, $IdP.1, $VerifierPhone.1,
                                               ~sessPost,
                                               h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), salt,
                                               code
                           ) ▶₅ #i )
                      case OIDCAppCodeRedirect_case_1
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_2
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_3
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_4
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_5
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_6
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_7
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_8
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                       (∃ #h. (IsNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( TLSServer_In( 'GET', ~sess.1, $IdP.1,
                                       <'oidc_req', $App.1, 
                                        h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), ~n.1, 
                                        s256(code_verifier), $RedirectURL.1>
                         ) ▶₂ #vr.9 )
                    case TLSClientToServer_case_1
                    solve( St_OIDCApp_CodeReq( $Prover.1, $IdP.1, $VerifierPhone.1,
                                               ~sessPost,
                                               h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), salt,
                                               code
                           ) ▶₅ #i )
                      case OIDCAppCodeRedirect_case_1
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_2
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_3
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_4
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_5
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_6
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_7
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_8
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_4
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_5
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_6
                    solve( St_OIDCApp_CodeReq( $Prover.1, $IdP.1, $VerifierPhone.1,
                                               ~sessPost,
                                               h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), salt,
                                               code
                           ) ▶₅ #i )
                      case OIDCAppCodeRedirect_case_1
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_2
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_3
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_4
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_5
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_6
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_7
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_8
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( TLSServer_In( 'GET', ~sess.1, $IdP.1,
                                       <'oidc_req', $App.1, 
                                        h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), ~n.1, 
                                        s256(code_verifier), $RedirectURL.1>
                         ) ▶₂ #vr.9 )
                    case TLSClientToServer_case_1
                    solve( St_OIDCApp_CodeReq( $Prover.1, $IdP.1, $VerifierPhone.1,
                                               ~sessPost,
                                               h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), salt,
                                               code
                           ) ▶₅ #i )
                      case OIDCAppCodeRedirect_case_1
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_2
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_3
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_4
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_5
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_6
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_7
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_8
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_4
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_5
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_6
                    solve( St_OIDCApp_CodeReq( $Prover.1, $IdP.1, $VerifierPhone.1,
                                               ~sessPost,
                                               h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), salt,
                                               code
                           ) ▶₅ #i )
                      case OIDCAppCodeRedirect_case_1
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_2
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_3
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_4
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_5
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_6
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_7
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_8
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case case_2
            solve( (∃ #h.
                     (!KU( h(fingerprint(<pk(skProver), pkVerifier>), salt) ) @ #h)
                    ∧
                     (¬(last(#h))) ∧ (#h < #vr.2))  ∥
                   (∃ fp salt.1.
                     (h(fingerprint(<pk(skProver), pkVerifier>), salt) = h(fp, salt.1))) )
              case case_1
              solve( (∃ #h. (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.5))  ∥
                     (∃ #h. (IsNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                       (∃ #h. (IsNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( TLSServer_In( 'GET', ~sess.1, $IdP.1,
                                       <'oidc_req', $App.1, 
                                        h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), ~n.1, 
                                        s256(code_verifier), $RedirectURL.1>
                         ) ▶₂ #vr.9 )
                    case TLSClientToServer_case_1
                    solve( St_OIDCApp_CodeReq( $Prover.1, $IdP.1, $VerifierPhone.1,
                                               ~sessPost,
                                               h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), salt,
                                               code
                           ) ▶₅ #i )
                      case OIDCAppCodeRedirect_case_1
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_2
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_3
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_4
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_5
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_6
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_7
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_8
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_4
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_5
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_6
                    solve( St_OIDCApp_CodeReq( $Prover.1, $IdP.1, $VerifierPhone.1,
                                               ~sessPost,
                                               h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), salt,
                                               code
                           ) ▶₅ #i )
                      case OIDCAppCodeRedirect_case_1
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_2
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_3
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_4
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_5
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_6
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_7
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_8
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( TLSServer_In( 'GET', ~sess.1, $IdP.1,
                                       <'oidc_req', $App.1, 
                                        h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), ~n.1, 
                                        s256(code_verifier), $RedirectURL.1>
                         ) ▶₂ #vr.9 )
                    case TLSClientToServer_case_1
                    solve( St_OIDCApp_CodeReq( $Prover.1, $IdP.1, $VerifierPhone.1,
                                               ~sessPost,
                                               h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), salt,
                                               code
                           ) ▶₅ #i )
                      case OIDCAppCodeRedirect_case_1
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_2
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_3
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_4
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_5
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_6
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_7
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_8
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_4
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_5
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_6
                    solve( St_OIDCApp_CodeReq( $Prover.1, $IdP.1, $VerifierPhone.1,
                                               ~sessPost,
                                               h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), salt,
                                               code
                           ) ▶₅ #i )
                      case OIDCAppCodeRedirect_case_1
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_2
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_3
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_4
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_5
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_6
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_7
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_8
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                       (∃ #h. (IsNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( TLSServer_In( 'GET', ~sess.1, $IdP.1,
                                       <'oidc_req', $App.1, 
                                        h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), ~n.1, 
                                        s256(code_verifier), $RedirectURL.1>
                         ) ▶₂ #vr.9 )
                    case TLSClientToServer_case_1
                    solve( St_OIDCApp_CodeReq( $Prover.1, $IdP.1, $VerifierPhone.1,
                                               ~sessPost,
                                               h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), salt,
                                               code
                           ) ▶₅ #i )
                      case OIDCAppCodeRedirect_case_1
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_2
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_3
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_4
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_5
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_6
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_7
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_8
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_4
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_5
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_6
                    solve( St_OIDCApp_CodeReq( $Prover.1, $IdP.1, $VerifierPhone.1,
                                               ~sessPost,
                                               h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), salt,
                                               code
                           ) ▶₅ #i )
                      case OIDCAppCodeRedirect_case_1
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_2
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_3
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_4
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_5
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_6
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_7
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_8
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( TLSServer_In( 'GET', ~sess.1, $IdP.1,
                                       <'oidc_req', $App.1, 
                                        h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), ~n.1, 
                                        s256(code_verifier), $RedirectURL.1>
                         ) ▶₂ #vr.9 )
                    case TLSClientToServer_case_1
                    solve( St_OIDCApp_CodeReq( $Prover.1, $IdP.1, $VerifierPhone.1,
                                               ~sessPost,
                                               h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), salt,
                                               code
                           ) ▶₅ #i )
                      case OIDCAppCodeRedirect_case_1
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_2
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_3
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_4
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_5
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_6
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_7
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_8
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_4
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_5
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_6
                    solve( St_OIDCApp_CodeReq( $Prover.1, $IdP.1, $VerifierPhone.1,
                                               ~sessPost,
                                               h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), salt,
                                               code
                           ) ▶₅ #i )
                      case OIDCAppCodeRedirect_case_1
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_2
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_3
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_4
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_5
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_6
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_7
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_8
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.5))  ∥
                     (∃ #h. (IsNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                       (∃ #h. (IsNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( TLSServer_In( 'GET', ~sess.1, $IdP.1,
                                       <'oidc_req', $App.1, 
                                        h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), ~n.1, 
                                        s256(code_verifier), $RedirectURL.1>
                         ) ▶₂ #vr.9 )
                    case TLSClientToServer_case_1
                    solve( St_OIDCApp_CodeReq( $Prover.1, $IdP.1, $VerifierPhone.1,
                                               ~sessPost,
                                               h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), salt,
                                               code
                           ) ▶₅ #i )
                      case OIDCAppCodeRedirect_case_1
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_2
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_3
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_4
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_5
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_6
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_7
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_8
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_4
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_5
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_6
                    solve( St_OIDCApp_CodeReq( $Prover.1, $IdP.1, $VerifierPhone.1,
                                               ~sessPost,
                                               h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), salt,
                                               code
                           ) ▶₅ #i )
                      case OIDCAppCodeRedirect_case_1
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_2
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_3
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_4
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_5
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_6
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_7
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_8
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( TLSServer_In( 'GET', ~sess.1, $IdP.1,
                                       <'oidc_req', $App.1, 
                                        h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), ~n.1, 
                                        s256(code_verifier), $RedirectURL.1>
                         ) ▶₂ #vr.9 )
                    case TLSClientToServer_case_1
                    solve( St_OIDCApp_CodeReq( $Prover.1, $IdP.1, $VerifierPhone.1,
                                               ~sessPost,
                                               h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), salt,
                                               code
                           ) ▶₅ #i )
                      case OIDCAppCodeRedirect_case_1
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_2
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_3
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_4
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_5
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_6
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_7
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_8
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_4
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_5
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_6
                    solve( St_OIDCApp_CodeReq( $Prover.1, $IdP.1, $VerifierPhone.1,
                                               ~sessPost,
                                               h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), salt,
                                               code
                           ) ▶₅ #i )
                      case OIDCAppCodeRedirect_case_1
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_2
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_3
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_4
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_5
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_6
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_7
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_8
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                       (∃ #h. (IsNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( TLSServer_In( 'GET', ~sess.1, $IdP.1,
                                       <'oidc_req', $App.1, 
                                        h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), ~n.1, 
                                        s256(code_verifier), $RedirectURL.1>
                         ) ▶₂ #vr.9 )
                    case TLSClientToServer_case_1
                    solve( St_OIDCApp_CodeReq( $Prover.1, $IdP.1, $VerifierPhone.1,
                                               ~sessPost,
                                               h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), salt,
                                               code
                           ) ▶₅ #i )
                      case OIDCAppCodeRedirect_case_1
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_2
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_3
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_4
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_5
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_6
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_7
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_8
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_4
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_5
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_6
                    solve( St_OIDCApp_CodeReq( $Prover.1, $IdP.1, $VerifierPhone.1,
                                               ~sessPost,
                                               h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), salt,
                                               code
                           ) ▶₅ #i )
                      case OIDCAppCodeRedirect_case_1
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_2
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_3
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_4
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_5
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_6
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_7
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_8
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( TLSServer_In( 'GET', ~sess.1, $IdP.1,
                                       <'oidc_req', $App.1, 
                                        h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), ~n.1, 
                                        s256(code_verifier), $RedirectURL.1>
                         ) ▶₂ #vr.9 )
                    case TLSClientToServer_case_1
                    solve( St_OIDCApp_CodeReq( $Prover.1, $IdP.1, $VerifierPhone.1,
                                               ~sessPost,
                                               h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), salt,
                                               code
                           ) ▶₅ #i )
                      case OIDCAppCodeRedirect_case_1
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_2
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_3
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_4
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_5
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_6
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_7
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_8
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.25))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_4
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ sk #j.
                               (IsMessagingKey( sk ) @ #j) ∧ (pkVerifier = pk(sk)) ∧ ¬(last(#j)))  ∥
                             (∃ #j. (!KU( pkVerifier ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.46)) )
                        case case_1
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pk(~sk.1)>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                   h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                               ) ▶₅ #i )
                          case OIDCAppCodeRedirect_case_1
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCAppCodeRedirect_case_2
                          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.49))  ∥
                                 (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_5
                    solve( (∃ #j.
                             (IsOTP( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.34)) )
                      case case_1
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                                 h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, code
                             ) ▶₅ #i )
                        case OIDCAppCodeRedirect_case_1
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCAppCodeRedirect_case_2
                        solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.48))  ∥
                               (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case TLSClientToServer_case_6
                    solve( St_OIDCApp_CodeReq( $Prover.1, $IdP.1, $VerifierPhone.1,
                                               ~sessPost,
                                               h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt), salt,
                                               code
                           ) ▶₅ #i )
                      case OIDCAppCodeRedirect_case_1
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_2
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_3
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_4
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_5
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_6
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_7
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCAppCodeRedirect_case_8
                      solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                             (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case TLSServerToClient_case_2
          solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                     h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, code
                 ) ▶₅ #i )
            case OIDCAppCodeRedirect_case_1
            solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.4))  ∥
                   (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case OIDCAppCodeRedirect_case_2
            solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.4))  ∥
                   (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case OIDCAppCodeRedirect_case_3
            solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.4))  ∥
                   (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case OIDCAppCodeRedirect_case_4
            solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.4))  ∥
                   (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case OIDCAppCodeRedirect_case_5
            solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.4))  ∥
                   (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case OIDCAppCodeRedirect_case_6
            solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.4))  ∥
                   (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case OIDCAppCodeRedirect_case_7
            solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.4))  ∥
                   (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case OIDCAppCodeRedirect_case_8
            solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.4))  ∥
                   (∃ #h. (IsCode( code ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  next
    case case_4
    solve( (last(#i))  ∥
           (∃ #j. (IsOTP( chall ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j. (!KU( chall ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( !KeyServer( $Server ) ▶₀ #i )
        case KeyServer
        solve( St_MessagingReg_App( $A, $Number, ~sess, sk ) ▶₁ #i )
          case MessagingRegister
          solve( SMS_In( $Number, chall ) ▶₂ #i )
            case SMSIn_case_1
            by contradiction /* from formulas */
          next
            case SMSIn_case_2
            by contradiction /* from formulas */
          next
            case SMSIn_case_3
            by contradiction /* from formulas */
          next
            case SMSIn_case_4
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  next
    case case_5
    solve( (last(#i))  ∥
           (∃ sk #j. (IsMessagingKey( sk ) @ #j) ∧ (ltk = pk(sk)) ∧ ¬(last(#j)))  ∥
           (∃ #j. (!KU( ltk ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( !MessagingLtkServer( $Number, ltk ) ▶₀ #i )
        case MessagingAck
        solve( St_SigReg_Server( ~sess.1, $Number, ltk, challenge ) ▶₁ #vr )
          case MessagingChallenge_case_1
          by contradiction /* from formulas */
        next
          case MessagingChallenge_case_2
          by contradiction /* from formulas */
        next
          case MessagingChallenge_case_3
          by contradiction /* from formulas */
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  qed
qed

rule (modulo E) OIDCTokenForward[color=#b4d9ef]:
   [
   !IdP( $IdP ), !MessagingApp( $App ),
   !UseMessagingKeyFor( $Prover, $VerifierPhone, pkVerifier )[no_precomp],
   !UseIdPKey( $Prover, $IdP, pkIdP ),
   !MessagingLtkUser( $Prover, $ProverPhone, skProver )[no_precomp],
   St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost, hash, salt,
                       code
   ),
   TLSClient_In( 'POST', ~sessPost, $IdP,
                 <'token', <$IdP, $App, $Username, nonce, hash>, signature>
   )
   ]
  --[
  Eq( h(fingerprint(<pk(skProver), pkVerifier>), salt), hash ),
  Eq( verify(signature, <$IdP, $App, $Username, nonce, hash>, pkIdP), true
  ),
  GetTokenForCode( $IdP, ~sessPost, code ),
  MustBeToken( <<$IdP, $App, $Username, nonce, hash>, signature> ),
  MustBeCode( code ), UsedCode( $IdP, code )
  ]->
   [
   SendAsTo( $Prover, $VerifierPhone,
             <'fwd_token', <<$IdP, $App, $Username, nonce, hash>, signature>, salt>
   ),
   Out( code )
   ]

  /*
  rule (modulo AC) OIDCTokenForward[color=#b4d9ef]:
     [
     !IdP( $IdP ), !MessagingApp( $App ),
     !UseMessagingKeyFor( $Prover, $VerifierPhone, pkVerifier )[no_precomp],
     !UseIdPKey( $Prover, $IdP, pkIdP ),
     !MessagingLtkUser( $Prover, $ProverPhone, skProver )[no_precomp],
     St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost, hash, salt,
                         code
     ),
     TLSClient_In( 'POST', ~sessPost, $IdP,
                   <'token', <$IdP, $App, $Username, nonce, hash>, signature>
     )
     ]
    --[
    Eq( h(fingerprint(<pk(skProver), pkVerifier>), salt), hash ),
    Eq( z, true ), GetTokenForCode( $IdP, ~sessPost, code ),
    MustBeToken( <<$IdP, $App, $Username, nonce, hash>, signature> ),
    MustBeCode( code ), UsedCode( $IdP, code )
    ]->
     [
     SendAsTo( $Prover, $VerifierPhone,
               <'fwd_token', <<$IdP, $App, $Username, nonce, hash>, signature>, salt>
     ),
     Out( code )
     ]
    variants (modulo AC)
    1. $App  = $App.34
       $IdP  = $IdP.35
       $Username
             = $Username.38
       hash  = hash.42
       nonce = nonce.43
       pkIdP = pkIdP.44
       signature
             = signature.47
       z     = verify(signature.47,
                      <$IdP.35, $App.34, $Username.38, nonce.43, hash.42>, pkIdP.44)
    
    2. $App  = $App.69
       $IdP  = $IdP.70
       $Username
             = $Username.73
       hash  = hash.77
       nonce = nonce.78
       pkIdP = pk(x.136)
       signature
             = sign(<$IdP.70, $App.69, $Username.73, nonce.78, hash.77>, x.136)
       z     = true
  */

lemma CodeAgreement [use_induction, reuse]:
  all-traces
  "∀ idp sess codeClient codeIdP #t1 #t2.
    ((GetTokenForCode( idp, sess, codeClient ) @ #t1) ∧
     (IssueTokenForCode( idp, sess, codeIdP ) @ #t2)) ⇒
    ((codeClient = codeIdP) ∨ (∃ #x. CompromisedDomain( idp ) @ #x))"
/*
guarded formula characterizing all counter-examples:
"∃ idp sess codeClient codeIdP #t1 #t2.
  (GetTokenForCode( idp, sess, codeClient ) @ #t1) ∧
  (IssueTokenForCode( idp, sess, codeIdP ) @ #t2)
 ∧
  (¬(codeClient = codeIdP)) ∧ (∀ #x. (CompromisedDomain( idp ) @ #x) ⇒ ⊥)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#t2))  ∥ (last(#t1))  ∥ (codeClient = codeIdP)  ∥
         (∃ #x. (CompromisedDomain( $IdP ) @ #x) ∧ ¬(last(#x))) )
    case case_1
    solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                               h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, codeClient
           ) ▶₅ #t1 )
      case OIDCAppCodeRedirect_case_1
      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                           <'token', 
                            <$IdP, $App, $Username, nonce, h(fingerprint(<pk(~sk), pkVerifier>), ~n)
                            >, 
                            sign(<$IdP, $App, $Username, nonce, 
                                  h(fingerprint(<pk(~sk), pkVerifier>), ~n)>,
                                 x)
                           >
             ) ▶₆ #t1 )
        case TLSServerToClient_case_1
        solve( (codeClient = ~code)  ∥
               (∃ #x. (CompromisedDomain( $IdP ) @ #x) ∧ ¬(last(#x))) )
          case case_1
          solve( TLSServer_In( 'POST', ~sessPost, $IdP,
                               <'token_req', codeIdP, code_verifier, $RedirectURL>
                 ) ▶₂ #t2 )
            case TLSClientToServer_case_1
            by contradiction /* from formulas */
          next
            case TLSClientToServer_case_2
            solve( !KU( ~sessPost ) @ #vk.2 )
              case TLSClientToAdversaryServer_case_1
              solve( TLSServer_In( 'GET', ~sessPost, $IdP.1,
                                   <'login', $Username.2, ~pw.1>
                     ) ▶₄ #vr.63 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            next
              case TLSClientToAdversaryServer_case_2
              by contradiction /* from formulas */
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        qed
      next
        case TLSServerToClient_case_2
        by contradiction /* from formulas */
      qed
    next
      case OIDCAppCodeRedirect_case_2
      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                           <'token', 
                            <$IdP, $App, $Username, nonce, h(fingerprint(<pk(~sk), pkVerifier>), ~n)
                            >, 
                            sign(<$IdP, $App, $Username, nonce, 
                                  h(fingerprint(<pk(~sk), pkVerifier>), ~n)>,
                                 x)
                           >
             ) ▶₆ #t1 )
        case TLSServerToClient_case_1
        solve( (codeClient = ~code)  ∥
               (∃ #x. (CompromisedDomain( $IdP ) @ #x) ∧ ¬(last(#x))) )
          case case_1
          solve( TLSServer_In( 'POST', ~sessPost, $IdP,
                               <'token_req', codeIdP, code_verifier, $RedirectURL>
                 ) ▶₂ #t2 )
            case TLSClientToServer_case_1
            by contradiction /* from formulas */
          next
            case TLSClientToServer_case_2
            solve( !KU( ~sessPost ) @ #vk.9 )
              case TLSClientToAdversaryServer_case_1
              solve( TLSServer_In( 'GET', ~sessPost, $IdP.1,
                                   <'login', $Username.2, ~pw.1>
                     ) ▶₄ #vr.62 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            next
              case TLSClientToAdversaryServer_case_2
              by contradiction /* from formulas */
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        qed
      next
        case TLSServerToClient_case_2
        by contradiction /* from formulas */
      qed
    next
      case OIDCAppCodeRedirect_case_3
      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                           <'token', 
                            <$IdP, $App, $Username, nonce, h(fingerprint(<pk(~sk), pkVerifier>), ~n)
                            >, 
                            sign(<$IdP, $App, $Username, nonce, 
                                  h(fingerprint(<pk(~sk), pkVerifier>), ~n)>,
                                 x)
                           >
             ) ▶₆ #t1 )
        case TLSServerToClient_case_1
        solve( (codeClient = ~code)  ∥
               (∃ #x. (CompromisedDomain( $IdP ) @ #x) ∧ ¬(last(#x))) )
          case case_1
          solve( TLSServer_In( 'POST', ~sessPost, $IdP,
                               <'token_req', codeIdP, code_verifier, $RedirectURL>
                 ) ▶₂ #t2 )
            case TLSClientToServer_case_1
            by contradiction /* from formulas */
          next
            case TLSClientToServer_case_2
            solve( !KU( ~sessPost ) @ #vk.5 )
              case TLSClientToAdversaryServer_case_1
              solve( TLSServer_In( 'GET', ~sessPost, $IdP.1,
                                   <'login', $Username.2, ~pw.1>
                     ) ▶₄ #vr.63 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            next
              case TLSClientToAdversaryServer_case_2
              by contradiction /* from formulas */
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        qed
      next
        case TLSServerToClient_case_2
        by contradiction /* from formulas */
      qed
    next
      case OIDCAppCodeRedirect_case_4
      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                           <'token', 
                            <$IdP, $App, $Username, nonce, h(fingerprint(<pk(~sk), pkVerifier>), ~n)
                            >, 
                            sign(<$IdP, $App, $Username, nonce, 
                                  h(fingerprint(<pk(~sk), pkVerifier>), ~n)>,
                                 x)
                           >
             ) ▶₆ #t1 )
        case TLSServerToClient_case_1
        solve( (codeClient = ~code)  ∥
               (∃ #x. (CompromisedDomain( $IdP ) @ #x) ∧ ¬(last(#x))) )
          case case_1
          solve( TLSServer_In( 'POST', ~sessPost, $IdP,
                               <'token_req', codeIdP, code_verifier, $RedirectURL>
                 ) ▶₂ #t2 )
            case TLSClientToServer_case_1
            by contradiction /* from formulas */
          next
            case TLSClientToServer_case_2
            solve( !KU( ~sessPost ) @ #vk.11 )
              case TLSClientToAdversaryServer_case_1
              solve( TLSServer_In( 'GET', ~sessPost, $IdP.1,
                                   <'login', $Username.2, ~pw.1>
                     ) ▶₄ #vr.62 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            next
              case TLSClientToAdversaryServer_case_2
              by contradiction /* from formulas */
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        qed
      next
        case TLSServerToClient_case_2
        by contradiction /* from formulas */
      qed
    next
      case OIDCAppCodeRedirect_case_5
      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                           <'token', 
                            <$IdP, $App, $Username, nonce, h(fingerprint(<pk(~sk), pkVerifier>), ~n)
                            >, 
                            sign(<$IdP, $App, $Username, nonce, 
                                  h(fingerprint(<pk(~sk), pkVerifier>), ~n)>,
                                 x)
                           >
             ) ▶₆ #t1 )
        case TLSServerToClient_case_1
        solve( (codeClient = ~code)  ∥
               (∃ #x. (CompromisedDomain( $IdP ) @ #x) ∧ ¬(last(#x))) )
          case case_1
          solve( TLSServer_In( 'POST', ~sessPost, $IdP,
                               <'token_req', codeIdP, code_verifier, $RedirectURL>
                 ) ▶₂ #t2 )
            case TLSClientToServer_case_1
            by contradiction /* from formulas */
          next
            case TLSClientToServer_case_2
            solve( !KU( ~sessPost ) @ #vk.1 )
              case TLSClientToAdversaryServer_case_1
              solve( TLSServer_In( 'GET', ~sessPost, $IdP.2,
                                   <'login', $Username.2, ~pw.1>
                     ) ▶₄ #vr.69 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            next
              case TLSClientToAdversaryServer_case_2
              by contradiction /* from formulas */
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        qed
      next
        case TLSServerToClient_case_2
        by contradiction /* from formulas */
      qed
    next
      case OIDCAppCodeRedirect_case_6
      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                           <'token', 
                            <$IdP, $App, $Username, nonce, h(fingerprint(<pk(~sk), pkVerifier>), ~n)
                            >, 
                            sign(<$IdP, $App, $Username, nonce, 
                                  h(fingerprint(<pk(~sk), pkVerifier>), ~n)>,
                                 x)
                           >
             ) ▶₆ #t1 )
        case TLSServerToClient_case_1
        solve( (codeClient = ~code)  ∥
               (∃ #x. (CompromisedDomain( $IdP ) @ #x) ∧ ¬(last(#x))) )
          case case_1
          solve( TLSServer_In( 'POST', ~sessPost, $IdP,
                               <'token_req', codeIdP, code_verifier, $RedirectURL>
                 ) ▶₂ #t2 )
            case TLSClientToServer_case_1
            by contradiction /* from formulas */
          next
            case TLSClientToServer_case_2
            solve( !KU( ~sessPost ) @ #vk.8 )
              case TLSClientToAdversaryServer_case_1
              solve( TLSServer_In( 'GET', ~sessPost, $IdP.2,
                                   <'login', $Username.2, ~pw.1>
                     ) ▶₄ #vr.68 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            next
              case TLSClientToAdversaryServer_case_2
              by contradiction /* from formulas */
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        qed
      next
        case TLSServerToClient_case_2
        by contradiction /* from formulas */
      qed
    next
      case OIDCAppCodeRedirect_case_7
      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                           <'token', 
                            <$IdP, $App, $Username, nonce, h(fingerprint(<pk(~sk), pkVerifier>), ~n)
                            >, 
                            sign(<$IdP, $App, $Username, nonce, 
                                  h(fingerprint(<pk(~sk), pkVerifier>), ~n)>,
                                 x)
                           >
             ) ▶₆ #t1 )
        case TLSServerToClient_case_1
        solve( (codeClient = ~code)  ∥
               (∃ #x. (CompromisedDomain( $IdP ) @ #x) ∧ ¬(last(#x))) )
          case case_1
          solve( TLSServer_In( 'POST', ~sessPost, $IdP,
                               <'token_req', codeIdP, code_verifier, $RedirectURL>
                 ) ▶₂ #t2 )
            case TLSClientToServer_case_1
            by contradiction /* from formulas */
          next
            case TLSClientToServer_case_2
            solve( !KU( ~sessPost ) @ #vk.4 )
              case TLSClientToAdversaryServer_case_1
              solve( TLSServer_In( 'GET', ~sessPost, $IdP.2,
                                   <'login', $Username.2, ~pw.1>
                     ) ▶₄ #vr.69 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            next
              case TLSClientToAdversaryServer_case_2
              by contradiction /* from formulas */
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        qed
      next
        case TLSServerToClient_case_2
        by contradiction /* from formulas */
      qed
    next
      case OIDCAppCodeRedirect_case_8
      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                           <'token', 
                            <$IdP, $App, $Username, nonce, h(fingerprint(<pk(~sk), pkVerifier>), ~n)
                            >, 
                            sign(<$IdP, $App, $Username, nonce, 
                                  h(fingerprint(<pk(~sk), pkVerifier>), ~n)>,
                                 x)
                           >
             ) ▶₆ #t1 )
        case TLSServerToClient_case_1
        solve( (codeClient = ~code)  ∥
               (∃ #x. (CompromisedDomain( $IdP ) @ #x) ∧ ¬(last(#x))) )
          case case_1
          solve( TLSServer_In( 'POST', ~sessPost, $IdP,
                               <'token_req', codeIdP, code_verifier, $RedirectURL>
                 ) ▶₂ #t2 )
            case TLSClientToServer_case_1
            by contradiction /* from formulas */
          next
            case TLSClientToServer_case_2
            solve( !KU( ~sessPost ) @ #vk.10 )
              case TLSClientToAdversaryServer_case_1
              solve( TLSServer_In( 'GET', ~sessPost, $IdP.2,
                                   <'login', $Username.2, ~pw.1>
                     ) ▶₄ #vr.68 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            next
              case TLSClientToAdversaryServer_case_2
              by contradiction /* from formulas */
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        qed
      next
        case TLSServerToClient_case_2
        by contradiction /* from formulas */
      qed
    qed
  next
    case case_2
    solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                               h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, codeClient
           ) ▶₅ #t1 )
      case OIDCAppCodeRedirect_case_1
      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                           <'token', 
                            <$IdP, $App, $Username, nonce, h(fingerprint(<pk(~sk), pkVerifier>), ~n)
                            >, 
                            sign(<$IdP, $App, $Username, nonce, 
                                  h(fingerprint(<pk(~sk), pkVerifier>), ~n)>,
                                 x)
                           >
             ) ▶₆ #t1 )
        case TLSServerToClient_case_1
        solve( TLSServer_In( 'POST', ~sessPost, $IdP,
                             <'token_req', codeIdP, code_verifier, $RedirectURL>
               ) ▶₂ #t2 )
          case TLSClientToServer_case_1
          by contradiction /* from formulas */
        next
          case TLSClientToServer_case_2
          solve( !KU( ~sessPost ) @ #vk.2 )
            case TLSClientToAdversaryServer_case_1
            solve( TLSServer_In( 'GET', ~sessPost, $IdP.1,
                                 <'login', $Username.2, ~pw.1>
                   ) ▶₄ #vr.63 )
              case TLSClientToServer
              by contradiction /* cyclic */
            qed
          next
            case TLSClientToAdversaryServer_case_2
            by contradiction /* from formulas */
          qed
        qed
      next
        case TLSServerToClient_case_2
        by contradiction /* from formulas */
      qed
    next
      case OIDCAppCodeRedirect_case_2
      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                           <'token', 
                            <$IdP, $App, $Username, nonce, h(fingerprint(<pk(~sk), pkVerifier>), ~n)
                            >, 
                            sign(<$IdP, $App, $Username, nonce, 
                                  h(fingerprint(<pk(~sk), pkVerifier>), ~n)>,
                                 x)
                           >
             ) ▶₆ #t1 )
        case TLSServerToClient_case_1
        solve( TLSServer_In( 'POST', ~sessPost, $IdP,
                             <'token_req', codeIdP, code_verifier, $RedirectURL>
               ) ▶₂ #t2 )
          case TLSClientToServer_case_1
          by contradiction /* from formulas */
        next
          case TLSClientToServer_case_2
          solve( !KU( ~sessPost ) @ #vk.9 )
            case TLSClientToAdversaryServer_case_1
            solve( TLSServer_In( 'GET', ~sessPost, $IdP.1,
                                 <'login', $Username.2, ~pw.1>
                   ) ▶₄ #vr.62 )
              case TLSClientToServer
              by contradiction /* cyclic */
            qed
          next
            case TLSClientToAdversaryServer_case_2
            by contradiction /* from formulas */
          qed
        qed
      next
        case TLSServerToClient_case_2
        by contradiction /* from formulas */
      qed
    next
      case OIDCAppCodeRedirect_case_3
      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                           <'token', 
                            <$IdP, $App, $Username, nonce, h(fingerprint(<pk(~sk), pkVerifier>), ~n)
                            >, 
                            sign(<$IdP, $App, $Username, nonce, 
                                  h(fingerprint(<pk(~sk), pkVerifier>), ~n)>,
                                 x)
                           >
             ) ▶₆ #t1 )
        case TLSServerToClient_case_1
        solve( TLSServer_In( 'POST', ~sessPost, $IdP,
                             <'token_req', codeIdP, code_verifier, $RedirectURL>
               ) ▶₂ #t2 )
          case TLSClientToServer_case_1
          by contradiction /* from formulas */
        next
          case TLSClientToServer_case_2
          solve( !KU( ~sessPost ) @ #vk.5 )
            case TLSClientToAdversaryServer_case_1
            solve( TLSServer_In( 'GET', ~sessPost, $IdP.1,
                                 <'login', $Username.2, ~pw.1>
                   ) ▶₄ #vr.63 )
              case TLSClientToServer
              by contradiction /* cyclic */
            qed
          next
            case TLSClientToAdversaryServer_case_2
            by contradiction /* from formulas */
          qed
        qed
      next
        case TLSServerToClient_case_2
        by contradiction /* from formulas */
      qed
    next
      case OIDCAppCodeRedirect_case_4
      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                           <'token', 
                            <$IdP, $App, $Username, nonce, h(fingerprint(<pk(~sk), pkVerifier>), ~n)
                            >, 
                            sign(<$IdP, $App, $Username, nonce, 
                                  h(fingerprint(<pk(~sk), pkVerifier>), ~n)>,
                                 x)
                           >
             ) ▶₆ #t1 )
        case TLSServerToClient_case_1
        solve( TLSServer_In( 'POST', ~sessPost, $IdP,
                             <'token_req', codeIdP, code_verifier, $RedirectURL>
               ) ▶₂ #t2 )
          case TLSClientToServer_case_1
          by contradiction /* from formulas */
        next
          case TLSClientToServer_case_2
          solve( !KU( ~sessPost ) @ #vk.11 )
            case TLSClientToAdversaryServer_case_1
            solve( TLSServer_In( 'GET', ~sessPost, $IdP.1,
                                 <'login', $Username.2, ~pw.1>
                   ) ▶₄ #vr.62 )
              case TLSClientToServer
              by contradiction /* cyclic */
            qed
          next
            case TLSClientToAdversaryServer_case_2
            by contradiction /* from formulas */
          qed
        qed
      next
        case TLSServerToClient_case_2
        by contradiction /* from formulas */
      qed
    next
      case OIDCAppCodeRedirect_case_5
      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                           <'token', 
                            <$IdP, $App, $Username, nonce, h(fingerprint(<pk(~sk), pkVerifier>), ~n)
                            >, 
                            sign(<$IdP, $App, $Username, nonce, 
                                  h(fingerprint(<pk(~sk), pkVerifier>), ~n)>,
                                 x)
                           >
             ) ▶₆ #t1 )
        case TLSServerToClient_case_1
        solve( TLSServer_In( 'POST', ~sessPost, $IdP,
                             <'token_req', codeIdP, code_verifier, $RedirectURL>
               ) ▶₂ #t2 )
          case TLSClientToServer_case_1
          by contradiction /* from formulas */
        next
          case TLSClientToServer_case_2
          solve( !KU( ~sessPost ) @ #vk.1 )
            case TLSClientToAdversaryServer_case_1
            solve( TLSServer_In( 'GET', ~sessPost, $IdP.2,
                                 <'login', $Username.2, ~pw.1>
                   ) ▶₄ #vr.69 )
              case TLSClientToServer
              by contradiction /* cyclic */
            qed
          next
            case TLSClientToAdversaryServer_case_2
            by contradiction /* from formulas */
          qed
        qed
      next
        case TLSServerToClient_case_2
        by contradiction /* from formulas */
      qed
    next
      case OIDCAppCodeRedirect_case_6
      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                           <'token', 
                            <$IdP, $App, $Username, nonce, h(fingerprint(<pk(~sk), pkVerifier>), ~n)
                            >, 
                            sign(<$IdP, $App, $Username, nonce, 
                                  h(fingerprint(<pk(~sk), pkVerifier>), ~n)>,
                                 x)
                           >
             ) ▶₆ #t1 )
        case TLSServerToClient_case_1
        solve( TLSServer_In( 'POST', ~sessPost, $IdP,
                             <'token_req', codeIdP, code_verifier, $RedirectURL>
               ) ▶₂ #t2 )
          case TLSClientToServer_case_1
          by contradiction /* from formulas */
        next
          case TLSClientToServer_case_2
          solve( !KU( ~sessPost ) @ #vk.8 )
            case TLSClientToAdversaryServer_case_1
            solve( TLSServer_In( 'GET', ~sessPost, $IdP.2,
                                 <'login', $Username.2, ~pw.1>
                   ) ▶₄ #vr.68 )
              case TLSClientToServer
              by contradiction /* cyclic */
            qed
          next
            case TLSClientToAdversaryServer_case_2
            by contradiction /* from formulas */
          qed
        qed
      next
        case TLSServerToClient_case_2
        by contradiction /* from formulas */
      qed
    next
      case OIDCAppCodeRedirect_case_7
      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                           <'token', 
                            <$IdP, $App, $Username, nonce, h(fingerprint(<pk(~sk), pkVerifier>), ~n)
                            >, 
                            sign(<$IdP, $App, $Username, nonce, 
                                  h(fingerprint(<pk(~sk), pkVerifier>), ~n)>,
                                 x)
                           >
             ) ▶₆ #t1 )
        case TLSServerToClient_case_1
        solve( TLSServer_In( 'POST', ~sessPost, $IdP,
                             <'token_req', codeIdP, code_verifier, $RedirectURL>
               ) ▶₂ #t2 )
          case TLSClientToServer_case_1
          by contradiction /* from formulas */
        next
          case TLSClientToServer_case_2
          solve( !KU( ~sessPost ) @ #vk.4 )
            case TLSClientToAdversaryServer_case_1
            solve( TLSServer_In( 'GET', ~sessPost, $IdP.2,
                                 <'login', $Username.2, ~pw.1>
                   ) ▶₄ #vr.69 )
              case TLSClientToServer
              by contradiction /* cyclic */
            qed
          next
            case TLSClientToAdversaryServer_case_2
            by contradiction /* from formulas */
          qed
        qed
      next
        case TLSServerToClient_case_2
        by contradiction /* from formulas */
      qed
    next
      case OIDCAppCodeRedirect_case_8
      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                           <'token', 
                            <$IdP, $App, $Username, nonce, h(fingerprint(<pk(~sk), pkVerifier>), ~n)
                            >, 
                            sign(<$IdP, $App, $Username, nonce, 
                                  h(fingerprint(<pk(~sk), pkVerifier>), ~n)>,
                                 x)
                           >
             ) ▶₆ #t1 )
        case TLSServerToClient_case_1
        solve( TLSServer_In( 'POST', ~sessPost, $IdP,
                             <'token_req', codeIdP, code_verifier, $RedirectURL>
               ) ▶₂ #t2 )
          case TLSClientToServer_case_1
          by contradiction /* from formulas */
        next
          case TLSClientToServer_case_2
          solve( !KU( ~sessPost ) @ #vk.10 )
            case TLSClientToAdversaryServer_case_1
            solve( TLSServer_In( 'GET', ~sessPost, $IdP.2,
                                 <'login', $Username.2, ~pw.1>
                   ) ▶₄ #vr.68 )
              case TLSClientToServer
              by contradiction /* cyclic */
            qed
          next
            case TLSClientToAdversaryServer_case_2
            by contradiction /* from formulas */
          qed
        qed
      next
        case TLSServerToClient_case_2
        by contradiction /* from formulas */
      qed
    qed
  next
    case case_3
    by contradiction /* from formulas */
  next
    case case_4
    by contradiction /* from formulas */
  qed
qed

lemma CodeIsSingleUse [reuse]:
  all-traces
  "∀ idp code #a #b.
    ((UsedCode( idp, code ) @ #a) ∧ (UsedCode( idp, code ) @ #b)) ⇒
    (((#a = #b) ∨ (∃ #x. CompromisedDomain( idp ) @ #x)) ∨
     (∃ app url #x #y.
       (IsRedirectURL( idp, app, url ) @ #x) ∧
       (CompromisedDomain( url ) @ #y)))"
/*
guarded formula characterizing all counter-examples:
"∃ idp code #a #b.
  (UsedCode( idp, code ) @ #a) ∧ (UsedCode( idp, code ) @ #b)
 ∧
  (¬(#a = #b)) ∧
  (∀ #x. (CompromisedDomain( idp ) @ #x) ⇒ ⊥) ∧
  (∀ app url #x #y.
    (IsRedirectURL( idp, app, url ) @ #x) ∧ (CompromisedDomain( url ) @ #y)
   ⇒
    ⊥)"
*/
simplify
solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                     <'token', 
                      <$IdP, $App, $Username, nonce, 
                       h(fingerprint(<pk(skProver), pkVerifier>), salt)>, 
                      sign(<$IdP, $App, $Username, nonce, 
                            h(fingerprint(<pk(skProver), pkVerifier>), salt)>,
                           x)
                     >
       ) ▶₆ #a )
  case TLSServerToClient_case_1
  solve( (code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
    case case_1
    solve( TLSClient_In( 'POST', ~sessPost.1, $IdP,
                         <'token', 
                          <$IdP, $App.1, $Username.1, nonce.1, 
                           h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt.1)>, 
                          sign(<$IdP, $App.1, $Username.1, nonce.1, 
                                h(fingerprint(<pk(skProver.1), pkVerifier.1>), salt.1)>,
                               x)
                         >
           ) ▶₆ #b )
      case TLSServerToClient_case_1
      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
        case case_1
        solve( TLSServer_In( 'POST', ~sessPost, $IdP,
                             <'token_req', ~code, code_verifier, $RedirectURL>
               ) ▶₂ #vr.2 )
          case TLSClientToServer_case_1
          solve( TLSServer_In( 'GET', ~sess.1, $RedirectURL, <'code', ~code, ~n.1>
                 ) ▶₆ #vr.23 )
            case TLSClientToServer_case_1
            solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                       h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                   ) ▶₅ #a )
              case OIDCAppCodeRedirect
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            qed
          next
            case TLSClientToServer_case_2
            solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                       h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                   ) ▶₅ #a )
              case OIDCAppCodeRedirect
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            qed
          next
            case TLSClientToServer_case_3
            solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                       h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                   ) ▶₅ #a )
              case OIDCAppCodeRedirect
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case TLSClientToServer_case_2
          solve( TLSServer_In( 'GET', ~sess.1, $RedirectURL, <'code', ~code, ~n.1>
                 ) ▶₆ #vr.23 )
            case TLSClientToServer_case_1
            solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                       h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                   ) ▶₅ #a )
              case OIDCAppCodeRedirect
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            qed
          next
            case TLSClientToServer_case_2
            solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                       h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                   ) ▶₅ #a )
              case OIDCAppCodeRedirect
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            qed
          next
            case TLSClientToServer_case_3
            solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                       h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                   ) ▶₅ #a )
              case OIDCAppCodeRedirect
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case TLSClientToServer_case_3
          solve( TLSServer_In( 'GET', ~sess.1, $RedirectURL, <'code', ~code, ~n.1>
                 ) ▶₆ #vr.23 )
            case TLSClientToServer_case_1
            solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                       h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                   ) ▶₅ #a )
              case OIDCAppCodeRedirect
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            qed
          next
            case TLSClientToServer_case_2
            solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                       h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                   ) ▶₅ #a )
              case OIDCAppCodeRedirect
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            qed
          next
            case TLSClientToServer_case_3
            solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                       h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                   ) ▶₅ #a )
              case OIDCAppCodeRedirect
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case TLSClientToServer_case_4
          solve( TLSServer_In( 'GET', ~sess.1, $RedirectURL, <'code', ~code, ~n.1>
                 ) ▶₆ #vr.23 )
            case TLSClientToServer_case_1
            solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                       h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                   ) ▶₅ #a )
              case OIDCAppCodeRedirect
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            qed
          next
            case TLSClientToServer_case_2
            solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                       h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                   ) ▶₅ #a )
              case OIDCAppCodeRedirect
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            qed
          next
            case TLSClientToServer_case_3
            solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                       h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                   ) ▶₅ #a )
              case OIDCAppCodeRedirect
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case TLSClientToServer_case_5
          solve( TLSServer_In( 'GET', ~sess.1, $RedirectURL, <'code', ~code, ~n.1>
                 ) ▶₆ #vr.23 )
            case TLSClientToServer_case_1
            solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                       h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                   ) ▶₅ #a )
              case OIDCAppCodeRedirect
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            qed
          next
            case TLSClientToServer_case_2
            solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                       h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                   ) ▶₅ #a )
              case OIDCAppCodeRedirect
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case TLSClientToServer_case_6
          solve( TLSServer_In( 'GET', ~sess.1, $RedirectURL, <'code', ~code, ~n.1>
                 ) ▶₆ #vr.23 )
            case TLSClientToServer_case_1
            solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                       h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                   ) ▶₅ #a )
              case OIDCAppCodeRedirect
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            qed
          next
            case TLSClientToServer_case_2
            solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                       h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                   ) ▶₅ #a )
              case OIDCAppCodeRedirect
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case TLSClientToServer_case_7
          solve( TLSServer_In( 'GET', ~sess.1, $RedirectURL, <'code', ~code, ~n.1>
                 ) ▶₆ #vr.23 )
            case TLSClientToServer_case_1
            solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                       h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                   ) ▶₅ #a )
              case OIDCAppCodeRedirect
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            qed
          next
            case TLSClientToServer_case_2
            solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                       h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                   ) ▶₅ #a )
              case OIDCAppCodeRedirect
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case TLSClientToServer_case_8
          solve( TLSServer_In( 'GET', ~sess.1, $RedirectURL, <'code', ~code, ~n.1>
                 ) ▶₆ #vr.23 )
            case TLSClientToServer_case_1
            solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                       h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                   ) ▶₅ #a )
              case OIDCAppCodeRedirect
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            qed
          next
            case TLSClientToServer_case_2
            solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                       h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                   ) ▶₅ #a )
              case OIDCAppCodeRedirect
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case TLSClientToServer_case_9
          solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone, ~sessPost,
                                     h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                 ) ▶₅ #a )
            case OIDCAppCodeRedirect_case_1
            solve( TLSServer_In( 'GET', ~sess.1, $RedirectURL.1,
                                 <'code', ~code, ~n.1>
                   ) ▶₆ #vr.24 )
              case TLSClientToServer_case_1
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            next
              case TLSClientToServer_case_2
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            next
              case TLSClientToServer_case_3
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            qed
          next
            case OIDCAppCodeRedirect_case_2
            solve( TLSServer_In( 'GET', ~sess.1, $RedirectURL.1,
                                 <'code', ~code, ~n.1>
                   ) ▶₆ #vr.24 )
              case TLSClientToServer_case_1
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            next
              case TLSClientToServer_case_2
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            next
              case TLSClientToServer_case_3
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            qed
          next
            case OIDCAppCodeRedirect_case_3
            solve( TLSServer_In( 'GET', ~sess.1, $RedirectURL.1,
                                 <'code', ~code, ~n.1>
                   ) ▶₆ #vr.24 )
              case TLSClientToServer_case_1
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            next
              case TLSClientToServer_case_2
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            next
              case TLSClientToServer_case_3
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            qed
          next
            case OIDCAppCodeRedirect_case_4
            solve( TLSServer_In( 'GET', ~sess.1, $RedirectURL.1,
                                 <'code', ~code, ~n.1>
                   ) ▶₆ #vr.24 )
              case TLSClientToServer_case_1
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            next
              case TLSClientToServer_case_2
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            next
              case TLSClientToServer_case_3
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            qed
          next
            case OIDCAppCodeRedirect_case_5
            solve( TLSServer_In( 'GET', ~sess.1, $RedirectURL.1,
                                 <'code', ~code, ~n.1>
                   ) ▶₆ #vr.24 )
              case TLSClientToServer_case_1
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            next
              case TLSClientToServer_case_2
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            qed
          next
            case OIDCAppCodeRedirect_case_6
            solve( TLSServer_In( 'GET', ~sess.1, $RedirectURL.1,
                                 <'code', ~code, ~n.1>
                   ) ▶₆ #vr.24 )
              case TLSClientToServer_case_1
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            next
              case TLSClientToServer_case_2
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            qed
          next
            case OIDCAppCodeRedirect_case_7
            solve( TLSServer_In( 'GET', ~sess.1, $RedirectURL.1,
                                 <'code', ~code, ~n.1>
                   ) ▶₆ #vr.24 )
              case TLSClientToServer_case_1
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            next
              case TLSClientToServer_case_2
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            qed
          next
            case OIDCAppCodeRedirect_case_8
            solve( TLSServer_In( 'GET', ~sess.1, $RedirectURL.1,
                                 <'code', ~code, ~n.1>
                   ) ▶₆ #vr.24 )
              case TLSClientToServer_case_1
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            next
              case TLSClientToServer_case_2
              solve( St_OIDCApp_CodeReq( $Prover.1, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(~sk), pkVerifier>), ~n), ~n, ~code
                     ) ▶₅ #b )
                case OIDCAppCodeRedirect
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case TLSServerToClient_case_2
      by contradiction /* from formulas */
    qed
  next
    case case_2
    by contradiction /* from formulas */
  qed
next
  case TLSServerToClient_case_2
  by contradiction /* from formulas */
qed

rule (modulo E) OIDCTokenReceive[color=#b4d9ef]:
   [
   !MessagingLtkUser( $Verifier, $VerifierPhone, skVerifier )[no_precomp],
   !UseMessagingKeyFor( $Verifier, $ProverPhone, pk(skProver) )[no_precomp],
   !MessagingApp( $App ), !UseIdPKey( $Verifier, $IdP, pkIdP ),
   In( e2ee(skProver, pk(skVerifier),
            <'fwd_token', <<$IdP, $App, $Username, nonce, hash>, signature>, salt>)
   )
   ]
  --[
  Eq( h(fingerprint(<pk(skProver), pk(skVerifier)>), salt), hash ),
  Eq( verify(signature, <$IdP, $App, $Username, nonce, hash>, pkIdP), true
  ),
  DidNotIssueSelf( $Verifier, nonce ), ReceivingKey( pk(skVerifier) ),
  Correspond( $Verifier, pk(skProver), $IdP, $Username )
  ]->
   [ ]

  /*
  rule (modulo AC) OIDCTokenReceive[color=#b4d9ef]:
     [
     !MessagingLtkUser( $Verifier, $VerifierPhone, skVerifier )[no_precomp],
     !UseMessagingKeyFor( $Verifier, $ProverPhone, pk(skProver) )[no_precomp],
     !MessagingApp( $App ), !UseIdPKey( $Verifier, $IdP, pkIdP ),
     In( e2ee(skProver, pk(skVerifier),
              <'fwd_token', <<$IdP, $App, $Username, nonce, hash>, signature>, salt>)
     )
     ]
    --[
    Eq( h(fingerprint(<pk(skProver), pk(skVerifier)>), salt), hash ),
    Eq( z, true ), DidNotIssueSelf( $Verifier, nonce ),
    ReceivingKey( pk(skVerifier) ),
    Correspond( $Verifier, pk(skProver), $IdP, $Username )
    ]->
     [ ]
    variants (modulo AC)
    1. $App  = $App.17
       $IdP  = $IdP.18
       $Username
             = $Username.20
       hash  = hash.23
       nonce = nonce.24
       pkIdP = pkIdP.25
       signature
             = signature.27
       z     = verify(signature.27,
                      <$IdP.18, $App.17, $Username.20, nonce.24, hash.23>, pkIdP.25)
    
    2. $App  = $App.25
       $IdP  = $IdP.26
       $Username
             = $Username.28
       hash  = hash.31
       nonce = nonce.32
       pkIdP = pk(x.48)
       signature
             = sign(<$IdP.26, $App.25, $Username.28, nonce.32, hash.31>, x.48)
       z     = true
  */

restriction CheckNonceReplay:
  "∀ verifier nonce #t1.
    (DidNotIssueSelf( verifier, nonce ) @ #t1) ⇒
    (¬(∃ #t2. SelfIssued( verifier, nonce ) @ #t2))"
  // safety formula

lemma Executability:
  exists-trace
  "∃ verifier proverKey idp acc verifierKey m1 m2 s1 s2 #t1 #t2 #t3 #t4
     #t5.
    ((((((((Correspond( verifier, proverKey, idp, acc ) @ #t1) ∧
           (ReceiveMessaging( proverKey, verifierKey, m1 ) @ #t2)) ∧
          (ReceiveIdP( idp, acc, m2 ) @ #t3)) ∧
         (SendMessaging( proverKey, verifierKey, m1 ) @ #t4)) ∧
        (Sender( s1 ) @ #t4)) ∧
       (SendIdP( idp, acc, m2 ) @ #t5)) ∧
      (Sender( s2 ) @ #t5)) ∧
     (s1 = s2)) ∧
    (¬(∃ #x. AdversaryActivity( ) @ #x))"
/*
guarded formula characterizing all satisfying traces:
"∃ verifier proverKey idp acc verifierKey m1 m2 s1 s2 #t1 #t2 #t3 #t4
   #t5.
  (Correspond( verifier, proverKey, idp, acc ) @ #t1) ∧
  (ReceiveMessaging( proverKey, verifierKey, m1 ) @ #t2) ∧
  (ReceiveIdP( idp, acc, m2 ) @ #t3) ∧
  (SendMessaging( proverKey, verifierKey, m1 ) @ #t4) ∧
  (Sender( s1 ) @ #t4) ∧
  (SendIdP( idp, acc, m2 ) @ #t5) ∧
  (Sender( s2 ) @ #t5) ∧
  (s1 = s2)
 ∧
  ∀ #x. (AdversaryActivity( ) @ #x) ⇒ ⊥"
*/
by sorry

lemma SOAPAgreement [reuse]:
  all-traces
  "∀ v proverKey idp acc verifierKey #t1.
    ((Correspond( v, proverKey, idp, acc ) @ #t1) ∧
     (ReceivingKey( verifierKey ) @ #t1)) ⇒
    ((((((∃ prover nonce #x1 #x2.
           ((SOAPStart( prover, nonce ) @ #x1) ∧
            (SOAPMessaging( prover, nonce, verifierKey, proverKey ) @ #x1)) ∧
           (SOAPIdP( prover, nonce, idp, acc ) @ #x2)) ∨
         (∃ #x. CompromisedIdP( idp ) @ #x)) ∨
        (∃ #x. CompromisedDomain( idp ) @ #x)) ∨
       (∃ app redirectURL #x #y #z.
         ((IsMessagingApp( app ) @ #x) ∧
          (IsRedirectURL( idp, app, redirectURL ) @ #y)) ∧
         (CompromisedDomain( redirectURL ) @ #z))) ∨
      (∃ p #x. CompromisedAccount( p, idp, acc ) @ #x)) ∨
     (∃ p #x. CompromisedMessaging( p, proverKey ) @ #x))"
/*
guarded formula characterizing all counter-examples:
"∃ v proverKey idp acc verifierKey #t1.
  (Correspond( v, proverKey, idp, acc ) @ #t1) ∧
  (ReceivingKey( verifierKey ) @ #t1)
 ∧
  (∀ prover nonce #x1 #x2.
    (SOAPStart( prover, nonce ) @ #x1) ∧
    (SOAPMessaging( prover, nonce, verifierKey, proverKey ) @ #x1) ∧
    (SOAPIdP( prover, nonce, idp, acc ) @ #x2)
   ⇒
    ⊥) ∧
  (∀ #x. (CompromisedIdP( idp ) @ #x) ⇒ ⊥) ∧
  (∀ #x. (CompromisedDomain( idp ) @ #x) ⇒ ⊥) ∧
  (∀ app redirectURL #x #y #z.
    (IsMessagingApp( app ) @ #x) ∧
    (IsRedirectURL( idp, app, redirectURL ) @ #y) ∧
    (CompromisedDomain( redirectURL ) @ #z)
   ⇒
    ⊥) ∧
  (∀ p #x. (CompromisedAccount( p, idp, acc ) @ #x) ⇒ ⊥) ∧
  (∀ p #x. (CompromisedMessaging( p, proverKey ) @ #x) ⇒ ⊥)"
*/
simplify
solve( !MessagingApp( $App ) ▶₂ #t1 )
  case MessagingApp
  solve( !KU( e2ee(skProver, pk(skVerifier),
                   <'fwd_token', 
                    <
                     <$IdP, $App, $Username, nonce, 
                      h(fingerprint(<pk(skProver), pk(skVerifier)>), salt)>, 
                     sign(<$IdP, $App, $Username, nonce, 
                           h(fingerprint(<pk(skProver), pk(skVerifier)>), salt)>,
                          x)
                    >, 
                    salt>)
         ) @ #vk )
    case MessagingSend_case_01
    solve( (code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
      case case_1
      solve( TLSServer_In( 'GET', ~sess.1, $RedirectURL, <'code', ~code, ~n.1>
             ) ▶₆ #vr.6 )
        case TLSClientToServer_case_1
        solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.4)  ∥
               (∃ url #x #y.
                 (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                 (CompromisedDomain( url ) @ #y))  ∥
               (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
          case case_1
          solve( !MessagingApp( $App.1 ) ▶₁ #x )
            case MessagingApp
            solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                   (∃ app url #x #y.
                     (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                     (CompromisedDomain( url ) @ #y)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                     ) ▶₅ #x )
                case OIDCAppCodeRedirect_case_1
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.3,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.72 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.2>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_2
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.3,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.72 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.2>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_3
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.3,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.72 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.2>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_4
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.3,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.72 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.2>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_5
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.3,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.72 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.2>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_6
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.3,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.72 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.2>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_7
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.3,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.72 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.2>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_8
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.3,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.72 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.2>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        next
          case case_3
          by contradiction /* from formulas */
        qed
      next
        case TLSClientToServer_case_2
        solve( TLSServer_In( 'POST', ~sessPost, $IdP,
                             <'token_req', ~code, code_verifier, $RedirectURL>
               ) ▶₂ #vr.25 )
          case TLSClientToServer_case_1
          solve( (∀ #z. (!KU( ~n.2 ) @ #z) ⇒ ⊥)  ∥
                 (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
            case case_1
            solve( TLSServer_In( 'GET', ~sess.1, $IdP,
                                 <'oidc_req', $App, h(fingerprint(<pk(~sk), pk(skVerifier)>), ~n.1), ~n, 
                                  s256(~n.2), $RedirectURL>
                   ) ▶₂ #vr.41 )
              case TLSClientToServer_case_1
              solve( TLSServer_In( 'GET', ~sess.1, $Domain, <'login', $Username, ~pw>
                     ) ▶₄ #vr.36 )
                case TLSClientToServer_case_1
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_2
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_3
                solve( (∃ #x. (CompromisedDomain( $Domain ) @ #x))  ∥
                       (∃ someone #x.
                         (CompromisedAccount( someone, $Domain, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case TLSClientToServer_case_2
              solve( TLSServer_In( 'GET', ~sess.1, $IdP, <'login', $Username, ~pw>
                     ) ▶₄ #vr.36 )
                case TLSClientToServer_case_1
                solve( (∃ #x. (CompromisedDomain( $Domain ) @ #x))  ∥
                       (∃ someone #x.
                         (CompromisedAccount( someone, $Domain, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case TLSClientToServer_case_2
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_3
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_4
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ someone #x. (CompromisedAccount( someone, $IdP, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case TLSClientToServer_case_2
          solve( (∀ #z. (!KU( ~n.2 ) @ #z) ⇒ ⊥)  ∥
                 (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
            case case_1
            solve( TLSServer_In( 'GET', ~sess.1, $IdP,
                                 <'oidc_req', $App, h(fingerprint(<pk(~sk), pk(skVerifier)>), ~n.1), ~n, 
                                  s256(~n.2), $RedirectURL>
                   ) ▶₂ #vr.41 )
              case TLSClientToServer_case_1
              solve( TLSServer_In( 'GET', ~sess.1, $Domain, <'login', $Username, ~pw>
                     ) ▶₄ #vr.36 )
                case TLSClientToServer_case_1
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_2
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_3
                solve( (∃ #x. (CompromisedDomain( $Domain ) @ #x))  ∥
                       (∃ someone #x.
                         (CompromisedAccount( someone, $Domain, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case TLSClientToServer_case_2
              solve( TLSServer_In( 'GET', ~sess.1, $IdP, <'login', $Username, ~pw>
                     ) ▶₄ #vr.36 )
                case TLSClientToServer_case_1
                solve( (∃ #x. (CompromisedDomain( $Domain ) @ #x))  ∥
                       (∃ someone #x.
                         (CompromisedAccount( someone, $Domain, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case TLSClientToServer_case_2
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_3
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_4
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ someone #x. (CompromisedAccount( someone, $IdP, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case TLSClientToServer_case_3
          solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.7)  ∥
                 (∃ url #x #y.
                   (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                   (CompromisedDomain( url ) @ #y))  ∥
                 (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
            case case_1
            solve( !MessagingApp( $App.1 ) ▶₁ #x )
              case MessagingApp
              solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                     (∃ app url #x #y.
                       (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                       (CompromisedDomain( url ) @ #y)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                           h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                       ) ▶₅ #x )
                  case OIDCAppCodeRedirect_case_1
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_2
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_3
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_4
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_5
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_6
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_7
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_8
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          qed
        qed
      next
        case TLSClientToServer_case_3
        solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.7)  ∥
               (∃ url #x #y.
                 (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                 (CompromisedDomain( url ) @ #y))  ∥
               (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
          case case_1
          solve( !MessagingApp( $App.1 ) ▶₁ #x )
            case MessagingApp
            solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                   (∃ app url #x #y.
                     (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                     (CompromisedDomain( url ) @ #y)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                     ) ▶₅ #x )
                case OIDCAppCodeRedirect_case_1
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.4,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.72 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.3>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_2
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.4,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.72 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.3>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_3
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.4,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.72 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.3>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_4
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.4,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.72 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.3>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_5
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.4,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.72 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.3>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_6
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.4,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.72 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.3>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_7
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.4,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.72 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.3>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_8
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.4,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.72 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.3>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        next
          case case_3
          by contradiction /* from formulas */
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    qed
  next
    case MessagingSend_case_02
    solve( (code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
      case case_1
      solve( TLSServer_In( 'GET', ~sess.1, $RedirectURL, <'code', ~code, ~n.1>
             ) ▶₆ #vr.6 )
        case TLSClientToServer_case_1
        solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.11)  ∥
               (∃ url #x #y.
                 (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                 (CompromisedDomain( url ) @ #y))  ∥
               (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
          case case_1
          solve( !MessagingApp( $App.1 ) ▶₁ #x )
            case MessagingApp
            solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                   (∃ app url #x #y.
                     (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                     (CompromisedDomain( url ) @ #y)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                     ) ▶₅ #x )
                case OIDCAppCodeRedirect_case_1
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.71 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.2>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_2
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.71 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.2>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_3
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.71 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.2>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_4
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.71 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.2>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_5
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.71 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.2>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_6
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.71 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.2>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_7
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.71 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.2>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_8
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.71 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.2>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        next
          case case_3
          by contradiction /* from formulas */
        qed
      next
        case TLSClientToServer_case_2
        solve( TLSServer_In( 'POST', ~sessPost, $IdP,
                             <'token_req', ~code, code_verifier, $RedirectURL>
               ) ▶₂ #vr.25 )
          case TLSClientToServer_case_1
          solve( (∀ #z. (!KU( ~n.2 ) @ #z) ⇒ ⊥)  ∥
                 (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
            case case_1
            solve( TLSServer_In( 'GET', ~sess.1, $IdP,
                                 <'oidc_req', $App, h(fingerprint(<pk(~sk), pk(skVerifier)>), ~n.1), ~n, 
                                  s256(~n.2), $RedirectURL>
                   ) ▶₂ #vr.41 )
              case TLSClientToServer_case_1
              solve( TLSServer_In( 'GET', ~sess.1, $Domain, <'login', $Username, ~pw>
                     ) ▶₄ #vr.36 )
                case TLSClientToServer_case_1
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_2
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_3
                solve( (∃ #x. (CompromisedDomain( $Domain ) @ #x))  ∥
                       (∃ someone #x.
                         (CompromisedAccount( someone, $Domain, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case TLSClientToServer_case_2
              solve( TLSServer_In( 'GET', ~sess.1, $IdP, <'login', $Username, ~pw>
                     ) ▶₄ #vr.36 )
                case TLSClientToServer_case_1
                solve( (∃ #x. (CompromisedDomain( $Domain ) @ #x))  ∥
                       (∃ someone #x.
                         (CompromisedAccount( someone, $Domain, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case TLSClientToServer_case_2
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_3
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_4
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ someone #x. (CompromisedAccount( someone, $IdP, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case TLSClientToServer_case_2
          solve( (∀ #z. (!KU( ~n.2 ) @ #z) ⇒ ⊥)  ∥
                 (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
            case case_1
            solve( TLSServer_In( 'GET', ~sess.1, $IdP,
                                 <'oidc_req', $App, h(fingerprint(<pk(~sk), pk(skVerifier)>), ~n.1), ~n, 
                                  s256(~n.2), $RedirectURL>
                   ) ▶₂ #vr.41 )
              case TLSClientToServer_case_1
              solve( TLSServer_In( 'GET', ~sess.1, $Domain, <'login', $Username, ~pw>
                     ) ▶₄ #vr.36 )
                case TLSClientToServer_case_1
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_2
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_3
                solve( (∃ #x. (CompromisedDomain( $Domain ) @ #x))  ∥
                       (∃ someone #x.
                         (CompromisedAccount( someone, $Domain, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case TLSClientToServer_case_2
              solve( TLSServer_In( 'GET', ~sess.1, $IdP, <'login', $Username, ~pw>
                     ) ▶₄ #vr.36 )
                case TLSClientToServer_case_1
                solve( (∃ #x. (CompromisedDomain( $Domain ) @ #x))  ∥
                       (∃ someone #x.
                         (CompromisedAccount( someone, $Domain, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case TLSClientToServer_case_2
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_3
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_4
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ someone #x. (CompromisedAccount( someone, $IdP, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case TLSClientToServer_case_3
          solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.14)  ∥
                 (∃ url #x #y.
                   (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                   (CompromisedDomain( url ) @ #y))  ∥
                 (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
            case case_1
            solve( !MessagingApp( $App.1 ) ▶₁ #x )
              case MessagingApp
              solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                     (∃ app url #x #y.
                       (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                       (CompromisedDomain( url ) @ #y)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                           h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                       ) ▶₅ #x )
                  case OIDCAppCodeRedirect_case_1
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.74 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_2
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.74 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_3
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.74 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_4
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.74 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_5
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.74 )
                    case TLSClientToServer
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_6
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.74 )
                    case TLSClientToServer
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_7
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.74 )
                    case TLSClientToServer
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_8
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.74 )
                    case TLSClientToServer
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          qed
        qed
      next
        case TLSClientToServer_case_3
        solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.13)  ∥
               (∃ url #x #y.
                 (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                 (CompromisedDomain( url ) @ #y))  ∥
               (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
          case case_1
          solve( !MessagingApp( $App.1 ) ▶₁ #x )
            case MessagingApp
            solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                   (∃ app url #x #y.
                     (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                     (CompromisedDomain( url ) @ #y)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                     ) ▶₅ #x )
                case OIDCAppCodeRedirect_case_1
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.71 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.3>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_2
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.71 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.3>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_3
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.71 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.3>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_4
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.71 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.3>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_5
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.71 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.3>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_6
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.71 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.3>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_7
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.71 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.3>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_8
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.71 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.3>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        next
          case case_3
          by contradiction /* from formulas */
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    qed
  next
    case MessagingSend_case_03
    solve( (code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
      case case_1
      solve( TLSServer_In( 'GET', ~sess.1, $RedirectURL, <'code', ~code, ~n.1>
             ) ▶₆ #vr.6 )
        case TLSClientToServer_case_1
        solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.7)  ∥
               (∃ url #x #y.
                 (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                 (CompromisedDomain( url ) @ #y))  ∥
               (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
          case case_1
          solve( !MessagingApp( $App.1 ) ▶₁ #x )
            case MessagingApp
            solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                   (∃ app url #x #y.
                     (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                     (CompromisedDomain( url ) @ #y)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                     ) ▶₅ #x )
                case OIDCAppCodeRedirect_case_1
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.3,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.72 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.2>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_2
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.3,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.72 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.2>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_3
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.3,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.72 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.2>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_4
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.3,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.72 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.2>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_5
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.3,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.72 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.2>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_6
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.3,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.72 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.2>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_7
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.3,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.72 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.2>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_8
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.3,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.72 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.2>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        next
          case case_3
          by contradiction /* from formulas */
        qed
      next
        case TLSClientToServer_case_2
        solve( TLSServer_In( 'POST', ~sessPost, $IdP,
                             <'token_req', ~code, code_verifier, $RedirectURL>
               ) ▶₂ #vr.25 )
          case TLSClientToServer_case_1
          solve( (∀ #z. (!KU( ~n.2 ) @ #z) ⇒ ⊥)  ∥
                 (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
            case case_1
            solve( TLSServer_In( 'GET', ~sess.1, $IdP,
                                 <'oidc_req', $App, h(fingerprint(<pk(~sk), pk(skVerifier)>), ~n.1), ~n, 
                                  s256(~n.2), $RedirectURL>
                   ) ▶₂ #vr.41 )
              case TLSClientToServer_case_1
              solve( TLSServer_In( 'GET', ~sess.1, $Domain, <'login', $Username, ~pw>
                     ) ▶₄ #vr.36 )
                case TLSClientToServer_case_1
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_2
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_3
                solve( (∃ #x. (CompromisedDomain( $Domain ) @ #x))  ∥
                       (∃ someone #x.
                         (CompromisedAccount( someone, $Domain, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case TLSClientToServer_case_2
              solve( TLSServer_In( 'GET', ~sess.1, $IdP, <'login', $Username, ~pw>
                     ) ▶₄ #vr.36 )
                case TLSClientToServer_case_1
                solve( (∃ #x. (CompromisedDomain( $Domain ) @ #x))  ∥
                       (∃ someone #x.
                         (CompromisedAccount( someone, $Domain, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case TLSClientToServer_case_2
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_3
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_4
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ someone #x. (CompromisedAccount( someone, $IdP, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case TLSClientToServer_case_2
          solve( (∀ #z. (!KU( ~n.2 ) @ #z) ⇒ ⊥)  ∥
                 (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
            case case_1
            solve( TLSServer_In( 'GET', ~sess.1, $IdP,
                                 <'oidc_req', $App, h(fingerprint(<pk(~sk), pk(skVerifier)>), ~n.1), ~n, 
                                  s256(~n.2), $RedirectURL>
                   ) ▶₂ #vr.41 )
              case TLSClientToServer_case_1
              solve( TLSServer_In( 'GET', ~sess.1, $Domain, <'login', $Username, ~pw>
                     ) ▶₄ #vr.36 )
                case TLSClientToServer_case_1
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_2
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_3
                solve( (∃ #x. (CompromisedDomain( $Domain ) @ #x))  ∥
                       (∃ someone #x.
                         (CompromisedAccount( someone, $Domain, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case TLSClientToServer_case_2
              solve( TLSServer_In( 'GET', ~sess.1, $IdP, <'login', $Username, ~pw>
                     ) ▶₄ #vr.36 )
                case TLSClientToServer_case_1
                solve( (∃ #x. (CompromisedDomain( $Domain ) @ #x))  ∥
                       (∃ someone #x.
                         (CompromisedAccount( someone, $Domain, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case TLSClientToServer_case_2
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_3
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_4
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ someone #x. (CompromisedAccount( someone, $IdP, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case TLSClientToServer_case_3
          solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.10)  ∥
                 (∃ url #x #y.
                   (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                   (CompromisedDomain( url ) @ #y))  ∥
                 (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
            case case_1
            solve( !MessagingApp( $App.1 ) ▶₁ #x )
              case MessagingApp
              solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                     (∃ app url #x #y.
                       (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                       (CompromisedDomain( url ) @ #y)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                           h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                       ) ▶₅ #x )
                  case OIDCAppCodeRedirect_case_1
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_2
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_3
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_4
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_5
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_6
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_7
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_8
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          qed
        qed
      next
        case TLSClientToServer_case_3
        solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.9)  ∥
               (∃ url #x #y.
                 (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                 (CompromisedDomain( url ) @ #y))  ∥
               (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
          case case_1
          solve( !MessagingApp( $App.1 ) ▶₁ #x )
            case MessagingApp
            solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                   (∃ app url #x #y.
                     (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                     (CompromisedDomain( url ) @ #y)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                     ) ▶₅ #x )
                case OIDCAppCodeRedirect_case_1
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.4,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.72 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.3>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_2
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.4,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.72 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.3>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_3
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.4,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.72 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.3>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_4
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.4,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.72 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.3>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_5
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.4,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.72 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.3>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_6
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.4,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.72 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.3>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_7
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.4,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.72 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.3>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_8
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.4,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.72 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.3>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        next
          case case_3
          by contradiction /* from formulas */
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    qed
  next
    case MessagingSend_case_04
    solve( (code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
      case case_1
      solve( TLSServer_In( 'GET', ~sess.1, $RedirectURL, <'code', ~code, ~n.1>
             ) ▶₆ #vr.6 )
        case TLSClientToServer_case_1
        solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.13)  ∥
               (∃ url #x #y.
                 (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                 (CompromisedDomain( url ) @ #y))  ∥
               (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
          case case_1
          solve( !MessagingApp( $App.1 ) ▶₁ #x )
            case MessagingApp
            solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                   (∃ app url #x #y.
                     (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                     (CompromisedDomain( url ) @ #y)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                     ) ▶₅ #x )
                case OIDCAppCodeRedirect_case_1
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.71 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.2>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_2
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.71 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.2>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_3
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.71 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.2>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_4
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.71 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.2>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_5
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.71 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.2>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_6
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.71 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.2>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_7
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.71 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.2>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_8
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.71 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.2>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        next
          case case_3
          by contradiction /* from formulas */
        qed
      next
        case TLSClientToServer_case_2
        solve( TLSServer_In( 'POST', ~sessPost, $IdP,
                             <'token_req', ~code, code_verifier, $RedirectURL>
               ) ▶₂ #vr.25 )
          case TLSClientToServer_case_1
          solve( (∀ #z. (!KU( ~n.2 ) @ #z) ⇒ ⊥)  ∥
                 (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
            case case_1
            solve( TLSServer_In( 'GET', ~sess.1, $IdP,
                                 <'oidc_req', $App, h(fingerprint(<pk(~sk), pk(skVerifier)>), ~n.1), ~n, 
                                  s256(~n.2), $RedirectURL>
                   ) ▶₂ #vr.41 )
              case TLSClientToServer_case_1
              solve( TLSServer_In( 'GET', ~sess.1, $Domain, <'login', $Username, ~pw>
                     ) ▶₄ #vr.36 )
                case TLSClientToServer_case_1
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_2
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_3
                solve( (∃ #x. (CompromisedDomain( $Domain ) @ #x))  ∥
                       (∃ someone #x.
                         (CompromisedAccount( someone, $Domain, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case TLSClientToServer_case_2
              solve( TLSServer_In( 'GET', ~sess.1, $IdP, <'login', $Username, ~pw>
                     ) ▶₄ #vr.36 )
                case TLSClientToServer_case_1
                solve( (∃ #x. (CompromisedDomain( $Domain ) @ #x))  ∥
                       (∃ someone #x.
                         (CompromisedAccount( someone, $Domain, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case TLSClientToServer_case_2
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_3
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_4
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ someone #x. (CompromisedAccount( someone, $IdP, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case TLSClientToServer_case_2
          solve( (∀ #z. (!KU( ~n.2 ) @ #z) ⇒ ⊥)  ∥
                 (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
            case case_1
            solve( TLSServer_In( 'GET', ~sess.1, $IdP,
                                 <'oidc_req', $App, h(fingerprint(<pk(~sk), pk(skVerifier)>), ~n.1), ~n, 
                                  s256(~n.2), $RedirectURL>
                   ) ▶₂ #vr.41 )
              case TLSClientToServer_case_1
              solve( TLSServer_In( 'GET', ~sess.1, $Domain, <'login', $Username, ~pw>
                     ) ▶₄ #vr.36 )
                case TLSClientToServer_case_1
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_2
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_3
                solve( (∃ #x. (CompromisedDomain( $Domain ) @ #x))  ∥
                       (∃ someone #x.
                         (CompromisedAccount( someone, $Domain, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case TLSClientToServer_case_2
              solve( TLSServer_In( 'GET', ~sess.1, $IdP, <'login', $Username, ~pw>
                     ) ▶₄ #vr.36 )
                case TLSClientToServer_case_1
                solve( (∃ #x. (CompromisedDomain( $Domain ) @ #x))  ∥
                       (∃ someone #x.
                         (CompromisedAccount( someone, $Domain, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case TLSClientToServer_case_2
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_3
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_4
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ someone #x. (CompromisedAccount( someone, $IdP, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case TLSClientToServer_case_3
          solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.16)  ∥
                 (∃ url #x #y.
                   (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                   (CompromisedDomain( url ) @ #y))  ∥
                 (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
            case case_1
            solve( !MessagingApp( $App.1 ) ▶₁ #x )
              case MessagingApp
              solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                     (∃ app url #x #y.
                       (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                       (CompromisedDomain( url ) @ #y)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                           h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                       ) ▶₅ #x )
                  case OIDCAppCodeRedirect_case_1
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.74 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_2
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.74 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_3
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.74 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_4
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.74 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_5
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.74 )
                    case TLSClientToServer
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_6
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.74 )
                    case TLSClientToServer
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_7
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.74 )
                    case TLSClientToServer
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_8
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.74 )
                    case TLSClientToServer
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          qed
        qed
      next
        case TLSClientToServer_case_3
        solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.15)  ∥
               (∃ url #x #y.
                 (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                 (CompromisedDomain( url ) @ #y))  ∥
               (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
          case case_1
          solve( !MessagingApp( $App.1 ) ▶₁ #x )
            case MessagingApp
            solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                   (∃ app url #x #y.
                     (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                     (CompromisedDomain( url ) @ #y)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                     ) ▶₅ #x )
                case OIDCAppCodeRedirect_case_1
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.71 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.3>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_2
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.71 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.3>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_3
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.71 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.3>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_4
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.71 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.3>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_5
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.71 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.3>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_6
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.71 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.3>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_7
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.71 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.3>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_8
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                     <'code', ~code, ~n.4>
                       ) ▶₆ #vr.71 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.3>
                         ) ▶₂ #vr.25 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        next
          case case_3
          by contradiction /* from formulas */
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    qed
  next
    case MessagingSend_case_05
    by contradiction /* from formulas */
  next
    case MessagingSend_case_06
    by contradiction /* from formulas */
  next
    case MessagingSend_case_07
    by contradiction /* from formulas */
  next
    case MessagingSend_case_08
    by contradiction /* from formulas */
  next
    case MessagingSend_case_09
    by contradiction /* from formulas */
  next
    case MessagingSend_case_10
    by contradiction /* from formulas */
  next
    case MessagingSend_case_11
    by contradiction /* from formulas */
  next
    case MessagingSend_case_12
    by contradiction /* from formulas */
  next
    case MessagingSend_case_13
    by contradiction /* from formulas */
  next
    case MessagingSend_case_14
    by contradiction /* from formulas */
  next
    case MessagingSend_case_15
    by contradiction /* from formulas */
  next
    case MessagingSend_case_16
    by contradiction /* from formulas */
  next
    case MessagingSend_case_17
    solve( (code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
      case case_1
      solve( TLSServer_In( 'GET', ~sess.1, $RedirectURL, <'code', ~code, ~n.1>
             ) ▶₆ #vr.6 )
        case TLSClientToServer_case_1
        solve( TLSServer_In( 'POST', ~sessPost, $IdP,
                             <'token_req', ~code, code_verifier, $RedirectURL>
               ) ▶₂ #vr.26 )
          case TLSClientToServer_case_1
          solve( (∀ #z. (!KU( ~n.2 ) @ #z) ⇒ ⊥)  ∥
                 (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
            case case_1
            solve( TLSServer_In( 'GET', ~sess.1, $IdP,
                                 <'oidc_req', $App, h(fingerprint(<pk(~sk), pk(skVerifier)>), ~n.1), ~n, 
                                  s256(~n.2), $RedirectURL>
                   ) ▶₂ #vr.47 )
              case TLSClientToServer_case_1
              solve( TLSServer_In( 'GET', ~sess.1, $IdP, <'login', $Username, ~pw>
                     ) ▶₄ #vr.34 )
                case TLSClientToServer_case_1
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_2
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_3
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ someone #x. (CompromisedAccount( someone, $IdP, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case TLSClientToServer_case_2
              solve( TLSServer_In( 'GET', ~sess.1, $IdP, <'login', $Username, ~pw>
                     ) ▶₄ #vr.41 )
                case TLSClientToServer_case_1
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_2
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_3
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_4
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_5
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_6
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_7
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_8
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_9
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ someone #x. (CompromisedAccount( someone, $IdP, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case TLSClientToServer_case_2
          solve( (∀ #z. (!KU( ~n.2 ) @ #z) ⇒ ⊥)  ∥
                 (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
            case case_1
            solve( TLSServer_In( 'GET', ~sess.1, $IdP,
                                 <'oidc_req', $App, h(fingerprint(<pk(~sk), pk(skVerifier)>), ~n.1), ~n, 
                                  s256(~n.2), $RedirectURL>
                   ) ▶₂ #vr.47 )
              case TLSClientToServer_case_1
              solve( TLSServer_In( 'GET', ~sess.1, $IdP, <'login', $Username, ~pw>
                     ) ▶₄ #vr.34 )
                case TLSClientToServer_case_1
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_2
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_3
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ someone #x. (CompromisedAccount( someone, $IdP, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case TLSClientToServer_case_2
              solve( TLSServer_In( 'GET', ~sess.1, $IdP, <'login', $Username, ~pw>
                     ) ▶₄ #vr.41 )
                case TLSClientToServer_case_1
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_2
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_3
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_4
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_5
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_6
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_7
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_8
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_9
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ someone #x. (CompromisedAccount( someone, $IdP, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case TLSClientToServer_case_3
          solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.6)  ∥
                 (∃ url #x #y.
                   (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                   (CompromisedDomain( url ) @ #y))  ∥
                 (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
            case case_1
            solve( !MessagingApp( $App.1 ) ▶₁ #x )
              case MessagingApp
              solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                     (∃ app url #x #y.
                       (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                       (CompromisedDomain( url ) @ #y)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                           h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                       ) ▶₅ #x )
                  case OIDCAppCodeRedirect_case_1
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.81 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_2
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.81 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_3
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.81 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_4
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.81 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_5
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.81 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_6
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.81 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_7
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.81 )
                    case TLSClientToServer
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_8
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.81 )
                    case TLSClientToServer
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          qed
        qed
      next
        case TLSClientToServer_case_2
        solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.6)  ∥
               (∃ url #x #y.
                 (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                 (CompromisedDomain( url ) @ #y))  ∥
               (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
          case case_1
          solve( !MessagingApp( $App.1 ) ▶₁ #x )
            case MessagingApp
            solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                   (∃ app url #x #y.
                     (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                     (CompromisedDomain( url ) @ #y)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                     ) ▶₅ #x )
                case OIDCAppCodeRedirect_case_1
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.5,
                                     <'code', ~code, ~n.7>
                       ) ▶₆ #vr.78 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.4>
                         ) ▶₂ #vr.26 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_2
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.5,
                                     <'code', ~code, ~n.7>
                       ) ▶₆ #vr.78 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.4>
                         ) ▶₂ #vr.26 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_3
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.5,
                                     <'code', ~code, ~n.7>
                       ) ▶₆ #vr.78 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.4>
                         ) ▶₂ #vr.26 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_4
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.5,
                                     <'code', ~code, ~n.7>
                       ) ▶₆ #vr.78 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.4>
                         ) ▶₂ #vr.26 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_5
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.5,
                                     <'code', ~code, ~n.7>
                       ) ▶₆ #vr.78 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.4>
                         ) ▶₂ #vr.26 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_6
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.5,
                                     <'code', ~code, ~n.7>
                       ) ▶₆ #vr.78 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.4>
                         ) ▶₂ #vr.26 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_7
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.5,
                                     <'code', ~code, ~n.7>
                       ) ▶₆ #vr.78 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.4>
                         ) ▶₂ #vr.26 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_8
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.5,
                                     <'code', ~code, ~n.7>
                       ) ▶₆ #vr.78 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.4>
                         ) ▶₂ #vr.26 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        next
          case case_3
          by contradiction /* from formulas */
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    qed
  next
    case MessagingSend_case_18
    solve( (code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
      case case_1
      solve( TLSServer_In( 'GET', ~sess.1, $RedirectURL, <'code', ~code, ~n.1>
             ) ▶₆ #vr.6 )
        case TLSClientToServer_case_1
        solve( TLSServer_In( 'POST', ~sessPost, $IdP,
                             <'token_req', ~code, code_verifier, $RedirectURL>
               ) ▶₂ #vr.26 )
          case TLSClientToServer_case_1
          solve( (∀ #z. (!KU( ~n.2 ) @ #z) ⇒ ⊥)  ∥
                 (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
            case case_1
            solve( TLSServer_In( 'GET', ~sess.1, $IdP,
                                 <'oidc_req', $App, h(fingerprint(<pk(~sk), pk(skVerifier)>), ~n.1), ~n, 
                                  s256(~n.2), $RedirectURL>
                   ) ▶₂ #vr.47 )
              case TLSClientToServer_case_1
              solve( TLSServer_In( 'GET', ~sess.1, $IdP, <'login', $Username, ~pw>
                     ) ▶₄ #vr.34 )
                case TLSClientToServer_case_1
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_2
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_3
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ someone #x. (CompromisedAccount( someone, $IdP, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case TLSClientToServer_case_2
              solve( TLSServer_In( 'GET', ~sess.1, $IdP, <'login', $Username, ~pw>
                     ) ▶₄ #vr.41 )
                case TLSClientToServer_case_1
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_2
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_3
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_4
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_5
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_6
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_7
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_8
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_9
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ someone #x. (CompromisedAccount( someone, $IdP, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case TLSClientToServer_case_2
          solve( (∀ #z. (!KU( ~n.2 ) @ #z) ⇒ ⊥)  ∥
                 (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
            case case_1
            solve( TLSServer_In( 'GET', ~sess.1, $IdP,
                                 <'oidc_req', $App, h(fingerprint(<pk(~sk), pk(skVerifier)>), ~n.1), ~n, 
                                  s256(~n.2), $RedirectURL>
                   ) ▶₂ #vr.47 )
              case TLSClientToServer_case_1
              solve( TLSServer_In( 'GET', ~sess.1, $IdP, <'login', $Username, ~pw>
                     ) ▶₄ #vr.34 )
                case TLSClientToServer_case_1
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_2
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_3
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ someone #x. (CompromisedAccount( someone, $IdP, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case TLSClientToServer_case_2
              solve( TLSServer_In( 'GET', ~sess.1, $IdP, <'login', $Username, ~pw>
                     ) ▶₄ #vr.41 )
                case TLSClientToServer_case_1
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_2
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_3
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_4
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_5
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_6
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_7
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_8
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_9
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ someone #x. (CompromisedAccount( someone, $IdP, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case TLSClientToServer_case_3
          solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.13)  ∥
                 (∃ url #x #y.
                   (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                   (CompromisedDomain( url ) @ #y))  ∥
                 (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
            case case_1
            solve( !MessagingApp( $App.1 ) ▶₁ #x )
              case MessagingApp
              solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                     (∃ app url #x #y.
                       (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                       (CompromisedDomain( url ) @ #y)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                           h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                       ) ▶₅ #x )
                  case OIDCAppCodeRedirect_case_1
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.4,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.80 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_2
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.4,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.80 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_3
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.4,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.80 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_4
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.4,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.80 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_5
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.4,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.80 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_6
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.4,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.80 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_7
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.4,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.80 )
                    case TLSClientToServer
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_8
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.4,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.80 )
                    case TLSClientToServer
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          qed
        qed
      next
        case TLSClientToServer_case_2
        solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.12)  ∥
               (∃ url #x #y.
                 (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                 (CompromisedDomain( url ) @ #y))  ∥
               (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
          case case_1
          solve( !MessagingApp( $App.1 ) ▶₁ #x )
            case MessagingApp
            solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                   (∃ app url #x #y.
                     (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                     (CompromisedDomain( url ) @ #y)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                     ) ▶₅ #x )
                case OIDCAppCodeRedirect_case_1
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.5,
                                     <'code', ~code, ~n.7>
                       ) ▶₆ #vr.77 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.4>
                         ) ▶₂ #vr.26 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_2
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.5,
                                     <'code', ~code, ~n.7>
                       ) ▶₆ #vr.77 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.4>
                         ) ▶₂ #vr.26 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_3
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.5,
                                     <'code', ~code, ~n.7>
                       ) ▶₆ #vr.77 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.4>
                         ) ▶₂ #vr.26 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_4
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.5,
                                     <'code', ~code, ~n.7>
                       ) ▶₆ #vr.77 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.4>
                         ) ▶₂ #vr.26 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_5
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.5,
                                     <'code', ~code, ~n.7>
                       ) ▶₆ #vr.77 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.4>
                         ) ▶₂ #vr.26 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_6
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.5,
                                     <'code', ~code, ~n.7>
                       ) ▶₆ #vr.77 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.4>
                         ) ▶₂ #vr.26 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_7
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.5,
                                     <'code', ~code, ~n.7>
                       ) ▶₆ #vr.77 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.4>
                         ) ▶₂ #vr.26 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_8
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.5,
                                     <'code', ~code, ~n.7>
                       ) ▶₆ #vr.77 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.4>
                         ) ▶₂ #vr.26 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        next
          case case_3
          by contradiction /* from formulas */
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    qed
  next
    case MessagingSend_case_19
    solve( (code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
      case case_1
      solve( TLSServer_In( 'GET', ~sess.1, $RedirectURL, <'code', ~code, ~n.1>
             ) ▶₆ #vr.6 )
        case TLSClientToServer_case_1
        solve( TLSServer_In( 'POST', ~sessPost, $IdP,
                             <'token_req', ~code, code_verifier, $RedirectURL>
               ) ▶₂ #vr.26 )
          case TLSClientToServer_case_1
          solve( (∀ #z. (!KU( ~n.2 ) @ #z) ⇒ ⊥)  ∥
                 (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
            case case_1
            solve( TLSServer_In( 'GET', ~sess.1, $IdP,
                                 <'oidc_req', $App, h(fingerprint(<pk(~sk), pk(skVerifier)>), ~n.1), ~n, 
                                  s256(~n.2), $RedirectURL>
                   ) ▶₂ #vr.47 )
              case TLSClientToServer_case_1
              solve( TLSServer_In( 'GET', ~sess.1, $IdP, <'login', $Username, ~pw>
                     ) ▶₄ #vr.34 )
                case TLSClientToServer_case_1
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_2
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_3
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ someone #x. (CompromisedAccount( someone, $IdP, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case TLSClientToServer_case_2
              solve( TLSServer_In( 'GET', ~sess.1, $IdP, <'login', $Username, ~pw>
                     ) ▶₄ #vr.41 )
                case TLSClientToServer_case_1
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_2
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_3
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_4
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_5
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_6
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_7
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_8
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_9
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ someone #x. (CompromisedAccount( someone, $IdP, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case TLSClientToServer_case_2
          solve( (∀ #z. (!KU( ~n.2 ) @ #z) ⇒ ⊥)  ∥
                 (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
            case case_1
            solve( TLSServer_In( 'GET', ~sess.1, $IdP,
                                 <'oidc_req', $App, h(fingerprint(<pk(~sk), pk(skVerifier)>), ~n.1), ~n, 
                                  s256(~n.2), $RedirectURL>
                   ) ▶₂ #vr.47 )
              case TLSClientToServer_case_1
              solve( TLSServer_In( 'GET', ~sess.1, $IdP, <'login', $Username, ~pw>
                     ) ▶₄ #vr.34 )
                case TLSClientToServer_case_1
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_2
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_3
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ someone #x. (CompromisedAccount( someone, $IdP, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case TLSClientToServer_case_2
              solve( TLSServer_In( 'GET', ~sess.1, $IdP, <'login', $Username, ~pw>
                     ) ▶₄ #vr.41 )
                case TLSClientToServer_case_1
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_2
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_3
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_4
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_5
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_6
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_7
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_8
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_9
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ someone #x. (CompromisedAccount( someone, $IdP, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case TLSClientToServer_case_3
          solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.9)  ∥
                 (∃ url #x #y.
                   (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                   (CompromisedDomain( url ) @ #y))  ∥
                 (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
            case case_1
            solve( !MessagingApp( $App.1 ) ▶₁ #x )
              case MessagingApp
              solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                     (∃ app url #x #y.
                       (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                       (CompromisedDomain( url ) @ #y)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                           h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                       ) ▶₅ #x )
                  case OIDCAppCodeRedirect_case_1
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.81 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_2
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.81 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_3
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.81 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_4
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.81 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_5
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.81 )
                    case TLSClientToServer
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_6
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.81 )
                    case TLSClientToServer
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_7
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.81 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_8
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.81 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          qed
        qed
      next
        case TLSClientToServer_case_2
        solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.8)  ∥
               (∃ url #x #y.
                 (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                 (CompromisedDomain( url ) @ #y))  ∥
               (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
          case case_1
          solve( !MessagingApp( $App.1 ) ▶₁ #x )
            case MessagingApp
            solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                   (∃ app url #x #y.
                     (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                     (CompromisedDomain( url ) @ #y)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                     ) ▶₅ #x )
                case OIDCAppCodeRedirect_case_1
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.5,
                                     <'code', ~code, ~n.7>
                       ) ▶₆ #vr.78 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.4>
                         ) ▶₂ #vr.26 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_2
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.5,
                                     <'code', ~code, ~n.7>
                       ) ▶₆ #vr.78 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.4>
                         ) ▶₂ #vr.26 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_3
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.5,
                                     <'code', ~code, ~n.7>
                       ) ▶₆ #vr.78 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.4>
                         ) ▶₂ #vr.26 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_4
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.5,
                                     <'code', ~code, ~n.7>
                       ) ▶₆ #vr.78 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.4>
                         ) ▶₂ #vr.26 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_5
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.5,
                                     <'code', ~code, ~n.7>
                       ) ▶₆ #vr.78 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.4>
                         ) ▶₂ #vr.26 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_6
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.5,
                                     <'code', ~code, ~n.7>
                       ) ▶₆ #vr.78 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.4>
                         ) ▶₂ #vr.26 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_7
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.5,
                                     <'code', ~code, ~n.7>
                       ) ▶₆ #vr.78 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.4>
                         ) ▶₂ #vr.26 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_8
                solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.5,
                                     <'code', ~code, ~n.7>
                       ) ▶₆ #vr.78 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.4>
                         ) ▶₂ #vr.26 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        next
          case case_3
          by contradiction /* from formulas */
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    qed
  next
    case MessagingSend_case_20
    solve( (code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
      case case_1
      solve( TLSServer_In( 'GET', ~sess.1, $RedirectURL, <'code', ~code, ~n.1>
             ) ▶₆ #vr.6 )
        case TLSClientToServer_case_1
        solve( TLSServer_In( 'POST', ~sessPost, $IdP,
                             <'token_req', ~code, code_verifier, $RedirectURL>
               ) ▶₂ #vr.26 )
          case TLSClientToServer_case_1
          solve( (∀ #z. (!KU( ~n.2 ) @ #z) ⇒ ⊥)  ∥
                 (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
            case case_1
            solve( TLSServer_In( 'GET', ~sess.1, $IdP,
                                 <'oidc_req', $App, h(fingerprint(<pk(~sk), pk(skVerifier)>), ~n.1), ~n, 
                                  s256(~n.2), $RedirectURL>
                   ) ▶₂ #vr.47 )
              case TLSClientToServer_case_1
              solve( TLSServer_In( 'GET', ~sess.1, $IdP, <'login', $Username, ~pw>
                     ) ▶₄ #vr.34 )
                case TLSClientToServer_case_1
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_2
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_3
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ someone #x. (CompromisedAccount( someone, $IdP, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case TLSClientToServer_case_2
              solve( TLSServer_In( 'GET', ~sess.1, $IdP, <'login', $Username, ~pw>
                     ) ▶₄ #vr.41 )
                case TLSClientToServer_case_1
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_2
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_3
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_4
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_5
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_6
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_7
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_8
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_9
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ someone #x. (CompromisedAccount( someone, $IdP, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case TLSClientToServer_case_2
          solve( (∀ #z. (!KU( ~n.2 ) @ #z) ⇒ ⊥)  ∥
                 (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
            case case_1
            solve( TLSServer_In( 'GET', ~sess.1, $IdP,
                                 <'oidc_req', $App, h(fingerprint(<pk(~sk), pk(skVerifier)>), ~n.1), ~n, 
                                  s256(~n.2), $RedirectURL>
                   ) ▶₂ #vr.47 )
              case TLSClientToServer_case_1
              solve( TLSServer_In( 'GET', ~sess.1, $IdP, <'login', $Username, ~pw>
                     ) ▶₄ #vr.34 )
                case TLSClientToServer_case_1
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_2
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_3
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ someone #x. (CompromisedAccount( someone, $IdP, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case TLSClientToServer_case_2
              solve( TLSServer_In( 'GET', ~sess.1, $IdP, <'login', $Username, ~pw>
                     ) ▶₄ #vr.41 )
                case TLSClientToServer_case_1
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_2
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_3
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_4
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_5
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_6
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_7
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_8
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_9
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ someone #x. (CompromisedAccount( someone, $IdP, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case TLSClientToServer_case_3
          solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.15)  ∥
                 (∃ url #x #y.
                   (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                   (CompromisedDomain( url ) @ #y))  ∥
                 (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
            case case_1
            solve( !MessagingApp( $App.1 ) ▶₁ #x )
              case MessagingApp
              solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                     (∃ app url #x #y.
                       (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                       (CompromisedDomain( url ) @ #y)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                           h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                       ) ▶₅ #x )
                  case OIDCAppCodeRedirect_case_1
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.4,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.80 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_2
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.4,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.80 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_3
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.4,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.80 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_4
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.4,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.80 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_5
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.4,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.80 )
                    case TLSClientToServer
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_6
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.4,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.80 )
                    case TLSClientToServer
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_7
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.4,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.80 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_8
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.4,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.80 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          qed
        qed
      next
        case TLSClientToServer_case_2
        solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.14)  ∥
               (∃ url #x #y.
                 (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                 (CompromisedDomain( url ) @ #y))  ∥
               (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
          case case_1
          solve( !MessagingApp( $App.1 ) ▶₁ #x )
            case MessagingApp
            solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                   (∃ app url #x #y.
                     (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                     (CompromisedDomain( url ) @ #y)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                         h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
                     ) ▶₅ #x )
                case OIDCAppCodeRedirect_case_1
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.5,
                                     <'code', ~code, ~n.7>
                       ) ▶₆ #vr.77 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.4>
                         ) ▶₂ #vr.26 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_2
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.5,
                                     <'code', ~code, ~n.7>
                       ) ▶₆ #vr.77 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.4>
                         ) ▶₂ #vr.26 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_3
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.5,
                                     <'code', ~code, ~n.7>
                       ) ▶₆ #vr.77 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.4>
                         ) ▶₂ #vr.26 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_4
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.5,
                                     <'code', ~code, ~n.7>
                       ) ▶₆ #vr.77 )
                  case TLSClientToServer_case_1
                  by contradiction /* cyclic */
                next
                  case TLSClientToServer_case_2
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.4>
                         ) ▶₂ #vr.26 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_3
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_5
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.5,
                                     <'code', ~code, ~n.7>
                       ) ▶₆ #vr.77 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.4>
                         ) ▶₂ #vr.26 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_6
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.5,
                                     <'code', ~code, ~n.7>
                       ) ▶₆ #vr.77 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.4>
                         ) ▶₂ #vr.26 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_7
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.5,
                                     <'code', ~code, ~n.7>
                       ) ▶₆ #vr.77 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.4>
                         ) ▶₂ #vr.26 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              next
                case OIDCAppCodeRedirect_case_8
                solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.5,
                                     <'code', ~code, ~n.7>
                       ) ▶₆ #vr.77 )
                  case TLSClientToServer_case_1
                  solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                       <'token_req', ~code, code_verifier, $RedirectURL.4>
                         ) ▶₂ #vr.26 )
                    case TLSClientToServer_case_1
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    solve( (∀ #z. (!KU( ~n.4 ) @ #z) ⇒ ⊥)  ∥
                           (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
                      case case_1
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case TLSClientToServer_case_2
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        next
          case case_3
          by contradiction /* from formulas */
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    qed
  next
    case MessagingSend_case_21
    by contradiction /* from formulas */
  next
    case MessagingSend_case_22
    by contradiction /* from formulas */
  next
    case MessagingSend_case_23
    by contradiction /* from formulas */
  next
    case MessagingSend_case_24
    by contradiction /* from formulas */
  next
    case MessagingSend_case_25
    by contradiction /* from formulas */
  next
    case MessagingSend_case_26
    by contradiction /* from formulas */
  next
    case MessagingSend_case_27
    by contradiction /* from formulas */
  next
    case MessagingSend_case_28
    by contradiction /* from formulas */
  next
    case MessagingSend_case_29
    by contradiction /* from formulas */
  next
    case MessagingSend_case_30
    by contradiction /* from formulas */
  next
    case MessagingSend_case_31
    by contradiction /* from formulas */
  next
    case MessagingSend_case_32
    by contradiction /* from formulas */
  next
    case c_e2ee
    solve( !KU( sign(<$IdP, $App, $Username, nonce, 
                      h(fingerprint(<pk(skProver), pk(skVerifier)>), salt)>,
                     x)
           ) @ #vk.16 )
      case MessagingSend_case_01
      solve( (code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
        case case_1
        solve( TLSServer_In( 'GET', ~sess.2, $RedirectURL, <'code', ~code, ~n.1>
               ) ▶₆ #vr.10 )
          case TLSClientToServer_case_1
          solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.22)  ∥
                 (∃ url #x #y.
                   (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                   (CompromisedDomain( url ) @ #y))  ∥
                 (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
            case case_1
            solve( !MessagingApp( $App.1 ) ▶₁ #x )
              case MessagingApp
              solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                     (∃ app url #x #y.
                       (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                       (CompromisedDomain( url ) @ #y)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                           h(fingerprint(<pk(skProver.1), pkVerifier>), salt), salt, ~code
                       ) ▶₅ #x )
                  case OIDCAppCodeRedirect_case_1
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.76 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.2>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_2
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.76 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.2>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_3
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.76 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.2>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_4
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.76 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.2>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_5
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.76 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.2>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_6
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.76 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.2>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_7
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.76 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.2>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_8
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.76 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.2>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          qed
        next
          case TLSClientToServer_case_2
          solve( TLSServer_In( 'POST', ~sessPost, $IdP,
                               <'token_req', ~code, code_verifier, $RedirectURL>
                 ) ▶₂ #vr.29 )
            case TLSClientToServer_case_1
            solve( !KU( ~sk ) @ #vk.5 )
              case MessagingCompromise
              by contradiction /* from formulas */
            next
              case TLSClientToAdversaryServer
              solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.1, ~pw.1>
                     ) ▶₄ #vr.96 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            qed
          next
            case TLSClientToServer_case_2
            solve( !KU( ~sk ) @ #vk.5 )
              case MessagingCompromise
              by contradiction /* from formulas */
            next
              case TLSClientToAdversaryServer
              solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.1, ~pw.1>
                     ) ▶₄ #vr.96 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            qed
          next
            case TLSClientToServer_case_3
            solve( !KU( ~sk ) @ #vk.5 )
              case MessagingCompromise
              by contradiction /* from formulas */
            next
              case TLSClientToAdversaryServer
              solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.1, ~pw.1>
                     ) ▶₄ #vr.96 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            qed
          next
            case TLSClientToServer_case_4
            solve( !KU( ~sk ) @ #vk.5 )
              case MessagingCompromise
              by contradiction /* from formulas */
            next
              case TLSClientToAdversaryServer
              solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.1, ~pw.1>
                     ) ▶₄ #vr.96 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            qed
          next
            case TLSClientToServer_case_5
            solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.25)  ∥
                   (∃ url #x #y.
                     (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                     (CompromisedDomain( url ) @ #y))  ∥
                   (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
              case case_1
              solve( !MessagingApp( $App.1 ) ▶₁ #x )
                case MessagingApp
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ app url #x #y.
                         (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                         (CompromisedDomain( url ) @ #y)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                             h(fingerprint(<pk(skProver.1), pkVerifier>), salt), salt, ~code
                         ) ▶₅ #x )
                    case OIDCAppCodeRedirect_case_1
                    solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                         <'code', ~code, ~n.4>
                           ) ▶₆ #vr.79 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_3
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_2
                    solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                         <'code', ~code, ~n.4>
                           ) ▶₆ #vr.79 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_3
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_3
                    solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                         <'code', ~code, ~n.4>
                           ) ▶₆ #vr.79 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_3
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_4
                    solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                         <'code', ~code, ~n.4>
                           ) ▶₆ #vr.79 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_3
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_5
                    solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                         <'code', ~code, ~n.4>
                           ) ▶₆ #vr.79 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_6
                    solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                         <'code', ~code, ~n.4>
                           ) ▶₆ #vr.79 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_7
                    solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                         <'code', ~code, ~n.4>
                           ) ▶₆ #vr.79 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_8
                    solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                         <'code', ~code, ~n.4>
                           ) ▶₆ #vr.79 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              by contradiction /* from formulas */
            qed
          qed
        next
          case TLSClientToServer_case_3
          solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.25)  ∥
                 (∃ url #x #y.
                   (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                   (CompromisedDomain( url ) @ #y))  ∥
                 (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
            case case_1
            solve( !MessagingApp( $App.1 ) ▶₁ #x )
              case MessagingApp
              solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                     (∃ app url #x #y.
                       (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                       (CompromisedDomain( url ) @ #y)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                           h(fingerprint(<pk(skProver.1), pkVerifier>), salt), salt, ~code
                       ) ▶₅ #x )
                  case OIDCAppCodeRedirect_case_1
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.4,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.76 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.3>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_2
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.4,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.76 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.3>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_3
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.4,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.76 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.3>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_4
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.4,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.76 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.3>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_5
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.4,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.76 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.3>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_6
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.4,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.76 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.3>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_7
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.4,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.76 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.3>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_8
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.4,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.76 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.3>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          qed
        qed
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case MessagingSend_case_02
      solve( (code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
        case case_1
        solve( TLSServer_In( 'GET', ~sess.2, $RedirectURL, <'code', ~code, ~n.1>
               ) ▶₆ #vr.10 )
          case TLSClientToServer_case_1
          solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.29)  ∥
                 (∃ url #x #y.
                   (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                   (CompromisedDomain( url ) @ #y))  ∥
                 (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
            case case_1
            solve( !MessagingApp( $App.1 ) ▶₁ #x )
              case MessagingApp
              solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                     (∃ app url #x #y.
                       (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                       (CompromisedDomain( url ) @ #y)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                           h(fingerprint(<pk(skProver.1), pkVerifier>), salt), salt, ~code
                       ) ▶₅ #x )
                  case OIDCAppCodeRedirect_case_1
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.2>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_2
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.2>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.130 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.130 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_3
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.2>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_4
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.2>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.130 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.130 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_5
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.2>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_6
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.2>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.136 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.136 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_7
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.2>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_8
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.2>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.136 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.136 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          qed
        next
          case TLSClientToServer_case_2
          solve( TLSServer_In( 'POST', ~sessPost, $IdP,
                               <'token_req', ~code, code_verifier, $RedirectURL>
                 ) ▶₂ #vr.29 )
            case TLSClientToServer_case_1
            solve( !KU( ~sk ) @ #vk.5 )
              case MessagingCompromise
              by contradiction /* from formulas */
            next
              case TLSClientToAdversaryServer
              solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.1, ~pw.1>
                     ) ▶₄ #vr.96 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            qed
          next
            case TLSClientToServer_case_2
            solve( !KU( ~sk ) @ #vk.5 )
              case MessagingCompromise
              by contradiction /* from formulas */
            next
              case TLSClientToAdversaryServer
              solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.1, ~pw.1>
                     ) ▶₄ #vr.95 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            qed
          next
            case TLSClientToServer_case_3
            solve( !KU( ~sk ) @ #vk.5 )
              case MessagingCompromise
              by contradiction /* from formulas */
            next
              case TLSClientToAdversaryServer
              solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.1, ~pw.1>
                     ) ▶₄ #vr.96 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            qed
          next
            case TLSClientToServer_case_4
            solve( !KU( ~sk ) @ #vk.5 )
              case MessagingCompromise
              by contradiction /* from formulas */
            next
              case TLSClientToAdversaryServer
              solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.1, ~pw.1>
                     ) ▶₄ #vr.95 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            qed
          next
            case TLSClientToServer_case_5
            solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.32)  ∥
                   (∃ url #x #y.
                     (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                     (CompromisedDomain( url ) @ #y))  ∥
                   (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
              case case_1
              solve( !MessagingApp( $App.1 ) ▶₁ #x )
                case MessagingApp
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ app url #x #y.
                         (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                         (CompromisedDomain( url ) @ #y)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                             h(fingerprint(<pk(skProver.1), pkVerifier>), salt), salt, ~code
                         ) ▶₅ #x )
                    case OIDCAppCodeRedirect_case_1
                    solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                         <'code', ~code, ~n.4>
                           ) ▶₆ #vr.78 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_3
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_2
                    solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                         <'code', ~code, ~n.4>
                           ) ▶₆ #vr.78 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_3
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_3
                    solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                         <'code', ~code, ~n.4>
                           ) ▶₆ #vr.78 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_3
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_4
                    solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                         <'code', ~code, ~n.4>
                           ) ▶₆ #vr.78 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_3
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_5
                    solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                         <'code', ~code, ~n.4>
                           ) ▶₆ #vr.78 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_6
                    solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                         <'code', ~code, ~n.4>
                           ) ▶₆ #vr.78 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_7
                    solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                         <'code', ~code, ~n.4>
                           ) ▶₆ #vr.78 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_8
                    solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                         <'code', ~code, ~n.4>
                           ) ▶₆ #vr.78 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              by contradiction /* from formulas */
            qed
          qed
        next
          case TLSClientToServer_case_3
          solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.31)  ∥
                 (∃ url #x #y.
                   (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                   (CompromisedDomain( url ) @ #y))  ∥
                 (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
            case case_1
            solve( !MessagingApp( $App.1 ) ▶₁ #x )
              case MessagingApp
              solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                     (∃ app url #x #y.
                       (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                       (CompromisedDomain( url ) @ #y)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                           h(fingerprint(<pk(skProver.1), pkVerifier>), salt), salt, ~code
                       ) ▶₅ #x )
                  case OIDCAppCodeRedirect_case_1
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.3>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_2
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.3>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.130 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.130 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_3
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.3>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_4
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.3>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.130 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.130 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_5
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.3>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_6
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.3>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.136 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.136 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_7
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.3>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_8
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.3>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.136 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.136 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          qed
        qed
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case MessagingSend_case_03
      solve( (code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
        case case_1
        solve( TLSServer_In( 'GET', ~sess.2, $RedirectURL, <'code', ~code, ~n.1>
               ) ▶₆ #vr.10 )
          case TLSClientToServer_case_1
          solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.25)  ∥
                 (∃ url #x #y.
                   (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                   (CompromisedDomain( url ) @ #y))  ∥
                 (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
            case case_1
            solve( !MessagingApp( $App.1 ) ▶₁ #x )
              case MessagingApp
              solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                     (∃ app url #x #y.
                       (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                       (CompromisedDomain( url ) @ #y)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                           h(fingerprint(<pk(skProver.1), pkVerifier>), salt), salt, ~code
                       ) ▶₅ #x )
                  case OIDCAppCodeRedirect_case_1
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.76 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.2>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_2
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.76 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.2>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_3
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.76 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.2>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_4
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.76 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.2>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_5
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.76 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.2>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_6
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.76 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.2>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_7
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.76 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.2>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_8
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.76 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.2>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          qed
        next
          case TLSClientToServer_case_2
          solve( TLSServer_In( 'POST', ~sessPost, $IdP,
                               <'token_req', ~code, code_verifier, $RedirectURL>
                 ) ▶₂ #vr.29 )
            case TLSClientToServer_case_1
            solve( !KU( ~sk ) @ #vk.5 )
              case MessagingCompromise
              by contradiction /* from formulas */
            next
              case TLSClientToAdversaryServer
              solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.1, ~pw.1>
                     ) ▶₄ #vr.96 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            qed
          next
            case TLSClientToServer_case_2
            solve( !KU( ~sk ) @ #vk.5 )
              case MessagingCompromise
              by contradiction /* from formulas */
            next
              case TLSClientToAdversaryServer
              solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.1, ~pw.1>
                     ) ▶₄ #vr.96 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            qed
          next
            case TLSClientToServer_case_3
            solve( !KU( ~sk ) @ #vk.5 )
              case MessagingCompromise
              by contradiction /* from formulas */
            next
              case TLSClientToAdversaryServer
              solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.1, ~pw.1>
                     ) ▶₄ #vr.96 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            qed
          next
            case TLSClientToServer_case_4
            solve( !KU( ~sk ) @ #vk.5 )
              case MessagingCompromise
              by contradiction /* from formulas */
            next
              case TLSClientToAdversaryServer
              solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.1, ~pw.1>
                     ) ▶₄ #vr.96 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            qed
          next
            case TLSClientToServer_case_5
            solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.28)  ∥
                   (∃ url #x #y.
                     (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                     (CompromisedDomain( url ) @ #y))  ∥
                   (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
              case case_1
              solve( !MessagingApp( $App.1 ) ▶₁ #x )
                case MessagingApp
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ app url #x #y.
                         (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                         (CompromisedDomain( url ) @ #y)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                             h(fingerprint(<pk(skProver.1), pkVerifier>), salt), salt, ~code
                         ) ▶₅ #x )
                    case OIDCAppCodeRedirect_case_1
                    solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                         <'code', ~code, ~n.4>
                           ) ▶₆ #vr.79 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_3
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_2
                    solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                         <'code', ~code, ~n.4>
                           ) ▶₆ #vr.79 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_3
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_3
                    solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                         <'code', ~code, ~n.4>
                           ) ▶₆ #vr.79 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_3
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_4
                    solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                         <'code', ~code, ~n.4>
                           ) ▶₆ #vr.79 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_3
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_5
                    solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                         <'code', ~code, ~n.4>
                           ) ▶₆ #vr.79 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_6
                    solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                         <'code', ~code, ~n.4>
                           ) ▶₆ #vr.79 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_7
                    solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                         <'code', ~code, ~n.4>
                           ) ▶₆ #vr.79 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_8
                    solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                         <'code', ~code, ~n.4>
                           ) ▶₆ #vr.79 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              by contradiction /* from formulas */
            qed
          qed
        next
          case TLSClientToServer_case_3
          solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.27)  ∥
                 (∃ url #x #y.
                   (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                   (CompromisedDomain( url ) @ #y))  ∥
                 (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
            case case_1
            solve( !MessagingApp( $App.1 ) ▶₁ #x )
              case MessagingApp
              solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                     (∃ app url #x #y.
                       (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                       (CompromisedDomain( url ) @ #y)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                           h(fingerprint(<pk(skProver.1), pkVerifier>), salt), salt, ~code
                       ) ▶₅ #x )
                  case OIDCAppCodeRedirect_case_1
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.4,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.76 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.3>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_2
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.4,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.76 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.3>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_3
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.4,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.76 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.3>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_4
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.4,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.76 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.3>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_5
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.4,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.76 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.3>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_6
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.4,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.76 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.3>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_7
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.4,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.76 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.3>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_8
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.4,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.76 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.3>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          qed
        qed
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case MessagingSend_case_04
      solve( (code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
        case case_1
        solve( TLSServer_In( 'GET', ~sess.2, $RedirectURL, <'code', ~code, ~n.1>
               ) ▶₆ #vr.10 )
          case TLSClientToServer_case_1
          solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.31)  ∥
                 (∃ url #x #y.
                   (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                   (CompromisedDomain( url ) @ #y))  ∥
                 (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
            case case_1
            solve( !MessagingApp( $App.1 ) ▶₁ #x )
              case MessagingApp
              solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                     (∃ app url #x #y.
                       (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                       (CompromisedDomain( url ) @ #y)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                           h(fingerprint(<pk(skProver.1), pkVerifier>), salt), salt, ~code
                       ) ▶₅ #x )
                  case OIDCAppCodeRedirect_case_1
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.2>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_2
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.2>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.130 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.130 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_3
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.2>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_4
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.2>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.130 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.130 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_5
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.2>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_6
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.2>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.136 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.136 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_7
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.2>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_8
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.2>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.136 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.136 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          qed
        next
          case TLSClientToServer_case_2
          solve( TLSServer_In( 'POST', ~sessPost, $IdP,
                               <'token_req', ~code, code_verifier, $RedirectURL>
                 ) ▶₂ #vr.29 )
            case TLSClientToServer_case_1
            solve( !KU( ~sk ) @ #vk.5 )
              case MessagingCompromise
              by contradiction /* from formulas */
            next
              case TLSClientToAdversaryServer
              solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.1, ~pw.1>
                     ) ▶₄ #vr.96 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            qed
          next
            case TLSClientToServer_case_2
            solve( !KU( ~sk ) @ #vk.5 )
              case MessagingCompromise
              by contradiction /* from formulas */
            next
              case TLSClientToAdversaryServer
              solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.1, ~pw.1>
                     ) ▶₄ #vr.95 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            qed
          next
            case TLSClientToServer_case_3
            solve( !KU( ~sk ) @ #vk.5 )
              case MessagingCompromise
              by contradiction /* from formulas */
            next
              case TLSClientToAdversaryServer
              solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.1, ~pw.1>
                     ) ▶₄ #vr.96 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            qed
          next
            case TLSClientToServer_case_4
            solve( !KU( ~sk ) @ #vk.5 )
              case MessagingCompromise
              by contradiction /* from formulas */
            next
              case TLSClientToAdversaryServer
              solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.1, ~pw.1>
                     ) ▶₄ #vr.95 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            qed
          next
            case TLSClientToServer_case_5
            solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.34)  ∥
                   (∃ url #x #y.
                     (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                     (CompromisedDomain( url ) @ #y))  ∥
                   (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
              case case_1
              solve( !MessagingApp( $App.1 ) ▶₁ #x )
                case MessagingApp
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ app url #x #y.
                         (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                         (CompromisedDomain( url ) @ #y)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                             h(fingerprint(<pk(skProver.1), pkVerifier>), salt), salt, ~code
                         ) ▶₅ #x )
                    case OIDCAppCodeRedirect_case_1
                    solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                         <'code', ~code, ~n.4>
                           ) ▶₆ #vr.78 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_3
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_2
                    solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                         <'code', ~code, ~n.4>
                           ) ▶₆ #vr.78 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_3
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_3
                    solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                         <'code', ~code, ~n.4>
                           ) ▶₆ #vr.78 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_3
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_4
                    solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                         <'code', ~code, ~n.4>
                           ) ▶₆ #vr.78 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_3
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_5
                    solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                         <'code', ~code, ~n.4>
                           ) ▶₆ #vr.78 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_6
                    solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                         <'code', ~code, ~n.4>
                           ) ▶₆ #vr.78 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_7
                    solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                         <'code', ~code, ~n.4>
                           ) ▶₆ #vr.78 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_8
                    solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                         <'code', ~code, ~n.4>
                           ) ▶₆ #vr.78 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              by contradiction /* from formulas */
            qed
          qed
        next
          case TLSClientToServer_case_3
          solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.33)  ∥
                 (∃ url #x #y.
                   (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                   (CompromisedDomain( url ) @ #y))  ∥
                 (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
            case case_1
            solve( !MessagingApp( $App.1 ) ▶₁ #x )
              case MessagingApp
              solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                     (∃ app url #x #y.
                       (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                       (CompromisedDomain( url ) @ #y)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                           h(fingerprint(<pk(skProver.1), pkVerifier>), salt), salt, ~code
                       ) ▶₅ #x )
                  case OIDCAppCodeRedirect_case_1
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.3>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_2
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.3>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.130 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.130 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_3
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.3>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.132 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_4
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.3>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.130 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.131 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.130 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_5
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.3>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_6
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.3>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.136 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.136 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_7
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.3>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_8
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.75 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.3>
                           ) ▶₂ #vr.29 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.136 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.136 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          qed
        qed
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case MessagingSend_case_05
      by contradiction /* from formulas */
    next
      case MessagingSend_case_06
      by contradiction /* from formulas */
    next
      case MessagingSend_case_07
      by contradiction /* from formulas */
    next
      case MessagingSend_case_08
      by contradiction /* from formulas */
    next
      case MessagingSend_case_09
      solve( (code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
        case case_1
        solve( TLSServer_In( 'GET', ~sess.2, $RedirectURL, <'code', ~code, ~n.1>
               ) ▶₆ #vr.10 )
          case TLSClientToServer_case_1
          solve( TLSServer_In( 'POST', ~sessPost, $IdP,
                               <'token_req', ~code, code_verifier, $RedirectURL>
                 ) ▶₂ #vr.30 )
            case TLSClientToServer_case_1
            solve( !KU( ~sk ) @ #vk.5 )
              case MessagingCompromise
              by contradiction /* from formulas */
            next
              case TLSClientToAdversaryServer
              solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.1, ~pw.1>
                     ) ▶₄ #vr.102 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            qed
          next
            case TLSClientToServer_case_2
            solve( !KU( ~sk ) @ #vk.5 )
              case MessagingCompromise
              by contradiction /* from formulas */
            next
              case TLSClientToAdversaryServer
              solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.1, ~pw.1>
                     ) ▶₄ #vr.102 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            qed
          next
            case TLSClientToServer_case_3
            solve( !KU( ~sk ) @ #vk.5 )
              case MessagingCompromise
              by contradiction /* from formulas */
            next
              case TLSClientToAdversaryServer
              solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.1, ~pw.1>
                     ) ▶₄ #vr.102 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            qed
          next
            case TLSClientToServer_case_4
            solve( !KU( ~sk ) @ #vk.5 )
              case MessagingCompromise
              by contradiction /* from formulas */
            next
              case TLSClientToAdversaryServer
              solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.1, ~pw.1>
                     ) ▶₄ #vr.102 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            qed
          next
            case TLSClientToServer_case_5
            solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.24)  ∥
                   (∃ url #x #y.
                     (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                     (CompromisedDomain( url ) @ #y))  ∥
                   (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
              case case_1
              solve( !MessagingApp( $App.1 ) ▶₁ #x )
                case MessagingApp
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ app url #x #y.
                         (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                         (CompromisedDomain( url ) @ #y)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                             h(fingerprint(<pk(skProver.1), pkVerifier>), salt), salt, ~code
                         ) ▶₅ #x )
                    case OIDCAppCodeRedirect_case_1
                    solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                         <'code', ~code, ~n.7>
                           ) ▶₆ #vr.85 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_2
                    solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                         <'code', ~code, ~n.7>
                           ) ▶₆ #vr.85 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_3
                    solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                         <'code', ~code, ~n.7>
                           ) ▶₆ #vr.85 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_4
                    solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                         <'code', ~code, ~n.7>
                           ) ▶₆ #vr.85 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_5
                    solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                         <'code', ~code, ~n.7>
                           ) ▶₆ #vr.85 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_6
                    solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                         <'code', ~code, ~n.7>
                           ) ▶₆ #vr.85 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_7
                    solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                         <'code', ~code, ~n.7>
                           ) ▶₆ #vr.85 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_8
                    solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                         <'code', ~code, ~n.7>
                           ) ▶₆ #vr.85 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              by contradiction /* from formulas */
            qed
          qed
        next
          case TLSClientToServer_case_2
          solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.24)  ∥
                 (∃ url #x #y.
                   (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                   (CompromisedDomain( url ) @ #y))  ∥
                 (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
            case case_1
            solve( !MessagingApp( $App.1 ) ▶₁ #x )
              case MessagingApp
              solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                     (∃ app url #x #y.
                       (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                       (CompromisedDomain( url ) @ #y)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                           h(fingerprint(<pk(skProver.1), pkVerifier>), salt), salt, ~code
                       ) ▶₅ #x )
                  case OIDCAppCodeRedirect_case_1
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.5,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.82 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.4>
                           ) ▶₂ #vr.30 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_2
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.5,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.82 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.4>
                           ) ▶₂ #vr.30 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_3
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.5,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.82 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.4>
                           ) ▶₂ #vr.30 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_4
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.5,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.82 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.4>
                           ) ▶₂ #vr.30 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_5
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.5,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.82 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.4>
                           ) ▶₂ #vr.30 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.144 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.144 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.144 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.144 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_6
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.5,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.82 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.4>
                           ) ▶₂ #vr.30 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.143 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.143 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.143 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.143 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_7
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.5,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.82 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.4>
                           ) ▶₂ #vr.30 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.144 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.144 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.144 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.144 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_8
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.5,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.82 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.4>
                           ) ▶₂ #vr.30 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.143 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.143 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.143 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.143 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          qed
        qed
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case MessagingSend_case_10
      solve( (code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
        case case_1
        solve( TLSServer_In( 'GET', ~sess.2, $RedirectURL, <'code', ~code, ~n.1>
               ) ▶₆ #vr.10 )
          case TLSClientToServer_case_1
          solve( TLSServer_In( 'POST', ~sessPost, $IdP,
                               <'token_req', ~code, code_verifier, $RedirectURL>
                 ) ▶₂ #vr.30 )
            case TLSClientToServer_case_1
            solve( !KU( ~sk ) @ #vk.5 )
              case MessagingCompromise
              by contradiction /* from formulas */
            next
              case TLSClientToAdversaryServer
              solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.1, ~pw.1>
                     ) ▶₄ #vr.102 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            qed
          next
            case TLSClientToServer_case_2
            solve( !KU( ~sk ) @ #vk.5 )
              case MessagingCompromise
              by contradiction /* from formulas */
            next
              case TLSClientToAdversaryServer
              solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.1, ~pw.1>
                     ) ▶₄ #vr.101 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            qed
          next
            case TLSClientToServer_case_3
            solve( !KU( ~sk ) @ #vk.5 )
              case MessagingCompromise
              by contradiction /* from formulas */
            next
              case TLSClientToAdversaryServer
              solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.1, ~pw.1>
                     ) ▶₄ #vr.102 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            qed
          next
            case TLSClientToServer_case_4
            solve( !KU( ~sk ) @ #vk.5 )
              case MessagingCompromise
              by contradiction /* from formulas */
            next
              case TLSClientToAdversaryServer
              solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.1, ~pw.1>
                     ) ▶₄ #vr.101 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            qed
          next
            case TLSClientToServer_case_5
            solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.31)  ∥
                   (∃ url #x #y.
                     (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                     (CompromisedDomain( url ) @ #y))  ∥
                   (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
              case case_1
              solve( !MessagingApp( $App.1 ) ▶₁ #x )
                case MessagingApp
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ app url #x #y.
                         (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                         (CompromisedDomain( url ) @ #y)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                             h(fingerprint(<pk(skProver.1), pkVerifier>), salt), salt, ~code
                         ) ▶₅ #x )
                    case OIDCAppCodeRedirect_case_1
                    solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.4,
                                         <'code', ~code, ~n.7>
                           ) ▶₆ #vr.84 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_2
                    solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.4,
                                         <'code', ~code, ~n.7>
                           ) ▶₆ #vr.84 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_3
                    solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.4,
                                         <'code', ~code, ~n.7>
                           ) ▶₆ #vr.84 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_4
                    solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.4,
                                         <'code', ~code, ~n.7>
                           ) ▶₆ #vr.84 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_5
                    solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.4,
                                         <'code', ~code, ~n.7>
                           ) ▶₆ #vr.84 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_6
                    solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.4,
                                         <'code', ~code, ~n.7>
                           ) ▶₆ #vr.84 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_7
                    solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.4,
                                         <'code', ~code, ~n.7>
                           ) ▶₆ #vr.84 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_8
                    solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.4,
                                         <'code', ~code, ~n.7>
                           ) ▶₆ #vr.84 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              by contradiction /* from formulas */
            qed
          qed
        next
          case TLSClientToServer_case_2
          solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.30)  ∥
                 (∃ url #x #y.
                   (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                   (CompromisedDomain( url ) @ #y))  ∥
                 (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
            case case_1
            solve( !MessagingApp( $App.1 ) ▶₁ #x )
              case MessagingApp
              solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                     (∃ app url #x #y.
                       (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                       (CompromisedDomain( url ) @ #y)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                           h(fingerprint(<pk(skProver.1), pkVerifier>), salt), salt, ~code
                       ) ▶₅ #x )
                  case OIDCAppCodeRedirect_case_1
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.5,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.81 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.4>
                           ) ▶₂ #vr.30 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_2
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.5,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.81 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.4>
                           ) ▶₂ #vr.30 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.136 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.136 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_3
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.5,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.81 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.4>
                           ) ▶₂ #vr.30 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_4
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.5,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.81 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.4>
                           ) ▶₂ #vr.30 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.136 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.136 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_5
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.5,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.81 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.4>
                           ) ▶₂ #vr.30 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.144 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.143 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.144 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.143 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_6
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.5,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.81 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.4>
                           ) ▶₂ #vr.30 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.143 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.142 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.143 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.142 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_7
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.5,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.81 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.4>
                           ) ▶₂ #vr.30 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.144 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.143 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.144 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.143 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_8
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.5,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.81 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.4>
                           ) ▶₂ #vr.30 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.143 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.142 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.143 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.142 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          qed
        qed
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case MessagingSend_case_11
      solve( (code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
        case case_1
        solve( TLSServer_In( 'GET', ~sess.2, $RedirectURL, <'code', ~code, ~n.1>
               ) ▶₆ #vr.10 )
          case TLSClientToServer_case_1
          solve( TLSServer_In( 'POST', ~sessPost, $IdP,
                               <'token_req', ~code, code_verifier, $RedirectURL>
                 ) ▶₂ #vr.30 )
            case TLSClientToServer_case_1
            solve( !KU( ~sk ) @ #vk.5 )
              case MessagingCompromise
              by contradiction /* from formulas */
            next
              case TLSClientToAdversaryServer
              solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.1, ~pw.1>
                     ) ▶₄ #vr.102 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            qed
          next
            case TLSClientToServer_case_2
            solve( !KU( ~sk ) @ #vk.5 )
              case MessagingCompromise
              by contradiction /* from formulas */
            next
              case TLSClientToAdversaryServer
              solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.1, ~pw.1>
                     ) ▶₄ #vr.102 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            qed
          next
            case TLSClientToServer_case_3
            solve( !KU( ~sk ) @ #vk.5 )
              case MessagingCompromise
              by contradiction /* from formulas */
            next
              case TLSClientToAdversaryServer
              solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.1, ~pw.1>
                     ) ▶₄ #vr.102 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            qed
          next
            case TLSClientToServer_case_4
            solve( !KU( ~sk ) @ #vk.5 )
              case MessagingCompromise
              by contradiction /* from formulas */
            next
              case TLSClientToAdversaryServer
              solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.1, ~pw.1>
                     ) ▶₄ #vr.102 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            qed
          next
            case TLSClientToServer_case_5
            solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.27)  ∥
                   (∃ url #x #y.
                     (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                     (CompromisedDomain( url ) @ #y))  ∥
                   (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
              case case_1
              solve( !MessagingApp( $App.1 ) ▶₁ #x )
                case MessagingApp
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ app url #x #y.
                         (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                         (CompromisedDomain( url ) @ #y)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                             h(fingerprint(<pk(skProver.1), pkVerifier>), salt), salt, ~code
                         ) ▶₅ #x )
                    case OIDCAppCodeRedirect_case_1
                    solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                         <'code', ~code, ~n.7>
                           ) ▶₆ #vr.85 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_2
                    solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                         <'code', ~code, ~n.7>
                           ) ▶₆ #vr.85 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_3
                    solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                         <'code', ~code, ~n.7>
                           ) ▶₆ #vr.85 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_4
                    solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                         <'code', ~code, ~n.7>
                           ) ▶₆ #vr.85 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_5
                    solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                         <'code', ~code, ~n.7>
                           ) ▶₆ #vr.85 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_6
                    solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                         <'code', ~code, ~n.7>
                           ) ▶₆ #vr.85 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_7
                    solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                         <'code', ~code, ~n.7>
                           ) ▶₆ #vr.85 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_8
                    solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.4,
                                         <'code', ~code, ~n.7>
                           ) ▶₆ #vr.85 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              by contradiction /* from formulas */
            qed
          qed
        next
          case TLSClientToServer_case_2
          solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.26)  ∥
                 (∃ url #x #y.
                   (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                   (CompromisedDomain( url ) @ #y))  ∥
                 (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
            case case_1
            solve( !MessagingApp( $App.1 ) ▶₁ #x )
              case MessagingApp
              solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                     (∃ app url #x #y.
                       (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                       (CompromisedDomain( url ) @ #y)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                           h(fingerprint(<pk(skProver.1), pkVerifier>), salt), salt, ~code
                       ) ▶₅ #x )
                  case OIDCAppCodeRedirect_case_1
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.5,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.82 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.4>
                           ) ▶₂ #vr.30 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_2
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.5,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.82 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.4>
                           ) ▶₂ #vr.30 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_3
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.5,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.82 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.4>
                           ) ▶₂ #vr.30 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_4
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.5,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.82 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.4>
                           ) ▶₂ #vr.30 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_5
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.5,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.82 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.4>
                           ) ▶₂ #vr.30 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.144 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.144 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.144 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.144 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_6
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.5,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.82 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.4>
                           ) ▶₂ #vr.30 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.143 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.143 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.143 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.143 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_7
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.5,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.82 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.4>
                           ) ▶₂ #vr.30 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.144 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.144 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.144 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.144 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_8
                  solve( TLSServer_In( 'GET', ~sess.7, $RedirectURL.5,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.82 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.4>
                           ) ▶₂ #vr.30 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.143 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.143 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.143 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.143 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          qed
        qed
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case MessagingSend_case_12
      solve( (code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
        case case_1
        solve( TLSServer_In( 'GET', ~sess.2, $RedirectURL, <'code', ~code, ~n.1>
               ) ▶₆ #vr.10 )
          case TLSClientToServer_case_1
          solve( TLSServer_In( 'POST', ~sessPost, $IdP,
                               <'token_req', ~code, code_verifier, $RedirectURL>
                 ) ▶₂ #vr.30 )
            case TLSClientToServer_case_1
            solve( !KU( ~sk ) @ #vk.5 )
              case MessagingCompromise
              by contradiction /* from formulas */
            next
              case TLSClientToAdversaryServer
              solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.1, ~pw.1>
                     ) ▶₄ #vr.102 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            qed
          next
            case TLSClientToServer_case_2
            solve( !KU( ~sk ) @ #vk.5 )
              case MessagingCompromise
              by contradiction /* from formulas */
            next
              case TLSClientToAdversaryServer
              solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.1, ~pw.1>
                     ) ▶₄ #vr.101 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            qed
          next
            case TLSClientToServer_case_3
            solve( !KU( ~sk ) @ #vk.5 )
              case MessagingCompromise
              by contradiction /* from formulas */
            next
              case TLSClientToAdversaryServer
              solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.1, ~pw.1>
                     ) ▶₄ #vr.102 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            qed
          next
            case TLSClientToServer_case_4
            solve( !KU( ~sk ) @ #vk.5 )
              case MessagingCompromise
              by contradiction /* from formulas */
            next
              case TLSClientToAdversaryServer
              solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.1, ~pw.1>
                     ) ▶₄ #vr.101 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            qed
          next
            case TLSClientToServer_case_5
            solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.33)  ∥
                   (∃ url #x #y.
                     (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                     (CompromisedDomain( url ) @ #y))  ∥
                   (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
              case case_1
              solve( !MessagingApp( $App.1 ) ▶₁ #x )
                case MessagingApp
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ app url #x #y.
                         (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                         (CompromisedDomain( url ) @ #y)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                             h(fingerprint(<pk(skProver.1), pkVerifier>), salt), salt, ~code
                         ) ▶₅ #x )
                    case OIDCAppCodeRedirect_case_1
                    solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.4,
                                         <'code', ~code, ~n.7>
                           ) ▶₆ #vr.84 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_2
                    solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.4,
                                         <'code', ~code, ~n.7>
                           ) ▶₆ #vr.84 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_3
                    solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.4,
                                         <'code', ~code, ~n.7>
                           ) ▶₆ #vr.84 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_4
                    solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.4,
                                         <'code', ~code, ~n.7>
                           ) ▶₆ #vr.84 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_5
                    solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.4,
                                         <'code', ~code, ~n.7>
                           ) ▶₆ #vr.84 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_6
                    solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.4,
                                         <'code', ~code, ~n.7>
                           ) ▶₆ #vr.84 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_7
                    solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.4,
                                         <'code', ~code, ~n.7>
                           ) ▶₆ #vr.84 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCAppCodeRedirect_case_8
                    solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.4,
                                         <'code', ~code, ~n.7>
                           ) ▶₆ #vr.84 )
                      case TLSClientToServer_case_1
                      by contradiction /* cyclic */
                    next
                      case TLSClientToServer_case_2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              by contradiction /* from formulas */
            qed
          qed
        next
          case TLSClientToServer_case_2
          solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.32)  ∥
                 (∃ url #x #y.
                   (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                   (CompromisedDomain( url ) @ #y))  ∥
                 (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
            case case_1
            solve( !MessagingApp( $App.1 ) ▶₁ #x )
              case MessagingApp
              solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                     (∃ app url #x #y.
                       (IsRedirectURL( $IdP, app, url ) @ #x) ∧
                       (CompromisedDomain( url ) @ #y)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                           h(fingerprint(<pk(skProver.1), pkVerifier>), salt), salt, ~code
                       ) ▶₅ #x )
                  case OIDCAppCodeRedirect_case_1
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.5,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.81 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.4>
                           ) ▶₂ #vr.30 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_2
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.5,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.81 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.4>
                           ) ▶₂ #vr.30 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.136 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.136 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_3
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.5,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.81 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.4>
                           ) ▶₂ #vr.30 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.138 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_4
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.5,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.81 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.4>
                           ) ▶₂ #vr.30 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.136 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.137 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.2, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.136 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_5
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.5,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.81 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.4>
                           ) ▶₂ #vr.30 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.144 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.143 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.144 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.143 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_6
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.5,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.81 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.4>
                           ) ▶₂ #vr.30 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.143 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.142 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.143 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.142 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_7
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.5,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.81 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.4>
                           ) ▶₂ #vr.30 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.144 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.143 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.144 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.143 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_8
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.5,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.81 )
                    case TLSClientToServer_case_1
                    solve( TLSServer_In( 'POST', ~sessPost.1, $IdP,
                                         <'token_req', ~code, code_verifier, $RedirectURL.4>
                           ) ▶₂ #vr.30 )
                      case TLSClientToServer_case_1
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.143 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_2
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.142 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_3
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.143 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_4
                      solve( !KU( ~sk ) @ #vk.8 )
                        case MessagingCompromise
                        by contradiction /* from formulas */
                      next
                        case TLSClientToAdversaryServer
                        solve( TLSServer_In( 'GET', ~sk, $IdP.3, <'login', $Username.2, ~pw.1>
                               ) ▶₄ #vr.142 )
                          case TLSClientToServer
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case TLSClientToServer_case_5
                      solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                           <'token', 
                                            <$IdP, $App, $Username.1, nonce, 
                                             h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>, 
                                            sign(<$IdP, $App, $Username.1, nonce, 
                                                  h(fingerprint(<pk(~sk.1), pkVerifier>), ~n.2)>,
                                                 x.1)
                                           >
                             ) ▶₆ #x )
                        case TLSServerToClient_case_1
                        solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case TLSServerToClient_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          qed
        qed
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case MessagingSend_case_13
      by contradiction /* from formulas */
    next
      case MessagingSend_case_14
      by contradiction /* from formulas */
    next
      case MessagingSend_case_15
      by contradiction /* from formulas */
    next
      case MessagingSend_case_16
      by contradiction /* from formulas */
    next
      case TLSServerToAdversaryClient
      solve( TLSServer_In( 'POST', ~adversarySess, $IdP,
                           <'token_req', ~code, code_verifier, $RedirectURL>
             ) ▶₂ #vr.4 )
        case TLSClientToServer_case_1
        solve( (∀ #z. (!KU( ~n ) @ #z) ⇒ ⊥)  ∥
               (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
          case case_1
          solve( TLSServer_In( 'GET', ~sess.2, $RedirectURL, <'code', ~code, ~n.2>
                 ) ▶₆ #vr.26 )
            case TLSClientToServer_case_1
            solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.22)  ∥
                   (∃ url #x #y.
                     (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                     (CompromisedDomain( url ) @ #y))  ∥
                   (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
              case case_1
              solve( !MessagingApp( $App.1 ) ▶₁ #x )
                case MessagingApp
                solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                           h(fingerprint(<pk(skProver.1), pkVerifier>), salt.1), salt.1, ~code
                       ) ▶₅ #x )
                  case OIDCAppCodeRedirect_case_1
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.1,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.65 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_2
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.1,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.65 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_3
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.1,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.65 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_4
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.1,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.65 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_5
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.1,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.65 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_6
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.1,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.65 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_7
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.1,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.65 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_8
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.1,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.65 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              by contradiction /* from formulas */
            qed
          next
            case TLSClientToServer_case_2
            solve( TLSServer_In( 'GET', ~sess, $IdP,
                                 <'oidc_req', $App, h(fingerprint(<pk(skProver), pk(skVerifier)>), salt), 
                                  ~n, s256(~n.1), $RedirectURL>
                   ) ▶₂ #vr.13 )
              case TLSClientToServer_case_1
              solve( TLSServer_In( 'GET', ~sess, $Domain, <'login', $Username, ~pw>
                     ) ▶₄ #vr.9 )
                case TLSClientToServer_case_1
                solve( TLSServer_In( 'GET', ~sess, $Domain,
                                     <'oidc_req', $Client, hash, nonce, code_challenge, $RedirectURL.2>
                       ) ▶₂ #vr.76 )
                  case TLSClientToServer_case_1
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.89 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case TLSClientToServer_case_2
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.91 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case TLSClientToServer_case_2
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_3
                solve( (∃ #x. (CompromisedDomain( $Domain ) @ #x))  ∥
                       (∃ someone #x.
                         (CompromisedAccount( someone, $Domain, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case TLSClientToServer_case_2
              solve( TLSServer_In( 'GET', ~sess, $IdP, <'login', $Username, ~pw>
                     ) ▶₄ #vr.9 )
                case TLSClientToServer_case_1
                solve( (∃ #x. (CompromisedDomain( $Domain ) @ #x))  ∥
                       (∃ someone #x.
                         (CompromisedAccount( someone, $Domain, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case TLSClientToServer_case_2
                solve( TLSServer_In( 'GET', ~sess, $IdP,
                                     <'oidc_req', $Client, hash, nonce, code_challenge, $RedirectURL.2>
                       ) ▶₂ #vr.76 )
                  case TLSClientToServer_case_1
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.91 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case TLSClientToServer_case_2
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP.1,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.91 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case TLSClientToServer_case_3
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_4
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ someone #x. (CompromisedAccount( someone, $IdP, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case TLSClientToServer_case_3
            solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.25)  ∥
                   (∃ url #x #y.
                     (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                     (CompromisedDomain( url ) @ #y))  ∥
                   (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
              case case_1
              solve( !MessagingApp( $App.1 ) ▶₁ #x )
                case MessagingApp
                solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                           h(fingerprint(<pk(skProver.1), pkVerifier>), salt.1), salt.1, ~code
                       ) ▶₅ #x )
                  case OIDCAppCodeRedirect_case_1
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.2,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.65 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_2
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.2,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.65 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_3
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.2,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.65 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_4
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.2,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.65 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_5
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.2,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.65 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_6
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.2,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.65 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_7
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.2,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.65 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_8
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.2,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.65 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              by contradiction /* from formulas */
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        qed
      next
        case TLSClientToServer_case_2
        solve( (∀ #z. (!KU( ~n ) @ #z) ⇒ ⊥)  ∥
               (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
          case case_1
          solve( TLSServer_In( 'GET', ~sess.2, $RedirectURL, <'code', ~code, ~n.2>
                 ) ▶₆ #vr.26 )
            case TLSClientToServer_case_1
            solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.29)  ∥
                   (∃ url #x #y.
                     (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                     (CompromisedDomain( url ) @ #y))  ∥
                   (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
              case case_1
              solve( !MessagingApp( $App.1 ) ▶₁ #x )
                case MessagingApp
                solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                           h(fingerprint(<pk(skProver.1), pkVerifier>), salt.1), salt.1, ~code
                       ) ▶₅ #x )
                  case OIDCAppCodeRedirect_case_1
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.1,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.64 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_2
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.1,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.64 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_3
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.1,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.64 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_4
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.1,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.64 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_5
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.1,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.64 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_6
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.1,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.64 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_7
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.1,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.64 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_8
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.1,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.64 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              by contradiction /* from formulas */
            qed
          next
            case TLSClientToServer_case_2
            solve( TLSServer_In( 'GET', ~sess, $IdP,
                                 <'oidc_req', $App, h(fingerprint(<pk(skProver), pk(skVerifier)>), salt), 
                                  ~n, s256(~n.1), $RedirectURL>
                   ) ▶₂ #vr.13 )
              case TLSClientToServer_case_1
              solve( TLSServer_In( 'GET', ~sess, $Domain, <'login', $Username, ~pw>
                     ) ▶₄ #vr.9 )
                case TLSClientToServer_case_1
                solve( TLSServer_In( 'GET', ~sess, $Domain,
                                     <'oidc_req', $Client, hash, nonce, code_challenge, $RedirectURL.2>
                       ) ▶₂ #vr.75 )
                  case TLSClientToServer_case_1
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.88 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case TLSClientToServer_case_2
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.90 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case TLSClientToServer_case_2
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_3
                solve( (∃ #x. (CompromisedDomain( $Domain ) @ #x))  ∥
                       (∃ someone #x.
                         (CompromisedAccount( someone, $Domain, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case TLSClientToServer_case_2
              solve( TLSServer_In( 'GET', ~sess, $IdP, <'login', $Username, ~pw>
                     ) ▶₄ #vr.9 )
                case TLSClientToServer_case_1
                solve( (∃ #x. (CompromisedDomain( $Domain ) @ #x))  ∥
                       (∃ someone #x.
                         (CompromisedAccount( someone, $Domain, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case TLSClientToServer_case_2
                solve( TLSServer_In( 'GET', ~sess, $IdP,
                                     <'oidc_req', $Client, hash, nonce, code_challenge, $RedirectURL.2>
                       ) ▶₂ #vr.75 )
                  case TLSClientToServer_case_1
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.90 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case TLSClientToServer_case_2
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP.1,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.90 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case TLSClientToServer_case_3
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_4
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ someone #x. (CompromisedAccount( someone, $IdP, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case TLSClientToServer_case_3
            solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.31)  ∥
                   (∃ url #x #y.
                     (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                     (CompromisedDomain( url ) @ #y))  ∥
                   (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
              case case_1
              solve( !MessagingApp( $App.1 ) ▶₁ #x )
                case MessagingApp
                solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                           h(fingerprint(<pk(skProver.1), pkVerifier>), salt.1), salt.1, ~code
                       ) ▶₅ #x )
                  case OIDCAppCodeRedirect_case_1
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.2,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.64 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_2
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.2,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.64 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_3
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.2,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.64 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_4
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.2,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.64 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_5
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.2,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.64 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_6
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.2,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.64 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_7
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.2,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.64 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_8
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.2,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.64 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              by contradiction /* from formulas */
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        qed
      next
        case TLSClientToServer_case_3
        solve( (∀ #z. (!KU( ~n ) @ #z) ⇒ ⊥)  ∥
               (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
          case case_1
          solve( TLSServer_In( 'GET', ~sess.2, $RedirectURL, <'code', ~code, ~n.2>
                 ) ▶₆ #vr.26 )
            case TLSClientToServer_case_1
            solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.25)  ∥
                   (∃ url #x #y.
                     (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                     (CompromisedDomain( url ) @ #y))  ∥
                   (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
              case case_1
              solve( !MessagingApp( $App.1 ) ▶₁ #x )
                case MessagingApp
                solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                           h(fingerprint(<pk(skProver.1), pkVerifier>), salt.1), salt.1, ~code
                       ) ▶₅ #x )
                  case OIDCAppCodeRedirect_case_1
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.1,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.65 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_2
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.1,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.65 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_3
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.1,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.65 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_4
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.1,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.65 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_5
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.1,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.65 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_6
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.1,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.65 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_7
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.1,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.65 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_8
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.1,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.65 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              by contradiction /* from formulas */
            qed
          next
            case TLSClientToServer_case_2
            solve( TLSServer_In( 'GET', ~sess, $IdP,
                                 <'oidc_req', $App, h(fingerprint(<pk(skProver), pk(skVerifier)>), salt), 
                                  ~n, s256(~n.1), $RedirectURL>
                   ) ▶₂ #vr.13 )
              case TLSClientToServer_case_1
              solve( TLSServer_In( 'GET', ~sess, $Domain, <'login', $Username, ~pw>
                     ) ▶₄ #vr.9 )
                case TLSClientToServer_case_1
                solve( TLSServer_In( 'GET', ~sess, $Domain,
                                     <'oidc_req', $Client, hash, nonce, code_challenge, $RedirectURL.2>
                       ) ▶₂ #vr.76 )
                  case TLSClientToServer_case_1
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.89 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case TLSClientToServer_case_2
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.91 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case TLSClientToServer_case_2
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_3
                solve( (∃ #x. (CompromisedDomain( $Domain ) @ #x))  ∥
                       (∃ someone #x.
                         (CompromisedAccount( someone, $Domain, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case TLSClientToServer_case_2
              solve( TLSServer_In( 'GET', ~sess, $IdP, <'login', $Username, ~pw>
                     ) ▶₄ #vr.9 )
                case TLSClientToServer_case_1
                solve( (∃ #x. (CompromisedDomain( $Domain ) @ #x))  ∥
                       (∃ someone #x.
                         (CompromisedAccount( someone, $Domain, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case TLSClientToServer_case_2
                solve( TLSServer_In( 'GET', ~sess, $IdP,
                                     <'oidc_req', $Client, hash, nonce, code_challenge, $RedirectURL.2>
                       ) ▶₂ #vr.76 )
                  case TLSClientToServer_case_1
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.91 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case TLSClientToServer_case_2
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP.1,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.91 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case TLSClientToServer_case_3
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_4
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ someone #x. (CompromisedAccount( someone, $IdP, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case TLSClientToServer_case_3
            solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.27)  ∥
                   (∃ url #x #y.
                     (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                     (CompromisedDomain( url ) @ #y))  ∥
                   (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
              case case_1
              solve( !MessagingApp( $App.1 ) ▶₁ #x )
                case MessagingApp
                solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                           h(fingerprint(<pk(skProver.1), pkVerifier>), salt.1), salt.1, ~code
                       ) ▶₅ #x )
                  case OIDCAppCodeRedirect_case_1
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.2,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.65 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_2
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.2,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.65 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_3
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.2,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.65 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_4
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.2,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.65 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_5
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.2,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.65 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_6
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.2,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.65 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_7
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.2,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.65 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_8
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.2,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.65 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              by contradiction /* from formulas */
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        qed
      next
        case TLSClientToServer_case_4
        solve( (∀ #z. (!KU( ~n ) @ #z) ⇒ ⊥)  ∥
               (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
          case case_1
          solve( TLSServer_In( 'GET', ~sess.2, $RedirectURL, <'code', ~code, ~n.2>
                 ) ▶₆ #vr.26 )
            case TLSClientToServer_case_1
            solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.31)  ∥
                   (∃ url #x #y.
                     (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                     (CompromisedDomain( url ) @ #y))  ∥
                   (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
              case case_1
              solve( !MessagingApp( $App.1 ) ▶₁ #x )
                case MessagingApp
                solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                           h(fingerprint(<pk(skProver.1), pkVerifier>), salt.1), salt.1, ~code
                       ) ▶₅ #x )
                  case OIDCAppCodeRedirect_case_1
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.1,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.64 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_2
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.1,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.64 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_3
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.1,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.64 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_4
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.1,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.64 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_5
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.1,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.64 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_6
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.1,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.64 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_7
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.1,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.64 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_8
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.1,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.64 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              by contradiction /* from formulas */
            qed
          next
            case TLSClientToServer_case_2
            solve( TLSServer_In( 'GET', ~sess, $IdP,
                                 <'oidc_req', $App, h(fingerprint(<pk(skProver), pk(skVerifier)>), salt), 
                                  ~n, s256(~n.1), $RedirectURL>
                   ) ▶₂ #vr.13 )
              case TLSClientToServer_case_1
              solve( TLSServer_In( 'GET', ~sess, $Domain, <'login', $Username, ~pw>
                     ) ▶₄ #vr.9 )
                case TLSClientToServer_case_1
                solve( TLSServer_In( 'GET', ~sess, $Domain,
                                     <'oidc_req', $Client, hash, nonce, code_challenge, $RedirectURL.2>
                       ) ▶₂ #vr.75 )
                  case TLSClientToServer_case_1
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.88 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case TLSClientToServer_case_2
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.90 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case TLSClientToServer_case_2
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_3
                solve( (∃ #x. (CompromisedDomain( $Domain ) @ #x))  ∥
                       (∃ someone #x.
                         (CompromisedAccount( someone, $Domain, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case TLSClientToServer_case_2
              solve( TLSServer_In( 'GET', ~sess, $IdP, <'login', $Username, ~pw>
                     ) ▶₄ #vr.9 )
                case TLSClientToServer_case_1
                solve( (∃ #x. (CompromisedDomain( $Domain ) @ #x))  ∥
                       (∃ someone #x.
                         (CompromisedAccount( someone, $Domain, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case TLSClientToServer_case_2
                solve( TLSServer_In( 'GET', ~sess, $IdP,
                                     <'oidc_req', $Client, hash, nonce, code_challenge, $RedirectURL.2>
                       ) ▶₂ #vr.75 )
                  case TLSClientToServer_case_1
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.90 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case TLSClientToServer_case_2
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP.1,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.90 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case TLSClientToServer_case_3
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_4
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ someone #x. (CompromisedAccount( someone, $IdP, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case TLSClientToServer_case_3
            solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.33)  ∥
                   (∃ url #x #y.
                     (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                     (CompromisedDomain( url ) @ #y))  ∥
                   (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
              case case_1
              solve( !MessagingApp( $App.1 ) ▶₁ #x )
                case MessagingApp
                solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                           h(fingerprint(<pk(skProver.1), pkVerifier>), salt.1), salt.1, ~code
                       ) ▶₅ #x )
                  case OIDCAppCodeRedirect_case_1
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.2,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.64 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_2
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.2,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.64 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_3
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.2,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.64 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_4
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.2,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.64 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_5
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.2,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.64 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_6
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.2,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.64 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_7
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.2,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.64 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_8
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.2,
                                       <'code', ~code, ~n.4>
                         ) ▶₆ #vr.64 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              by contradiction /* from formulas */
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        qed
      next
        case TLSClientToServer_case_5
        solve( (∀ #z. (!KU( ~n ) @ #z) ⇒ ⊥)  ∥
               (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
          case case_1
          solve( TLSServer_In( 'GET', ~sess.2, $RedirectURL, <'code', ~code, ~n.2>
                 ) ▶₆ #vr.26 )
            case TLSClientToServer_case_1
            solve( TLSServer_In( 'GET', ~sess, $IdP,
                                 <'oidc_req', $App, h(fingerprint(<pk(skProver), pk(skVerifier)>), salt), 
                                  ~n, s256(~n.1), $RedirectURL>
                   ) ▶₂ #vr.13 )
              case TLSClientToServer_case_1
              solve( !KU( ~sk ) @ #vk.5 )
                case MessagingCompromise
                by contradiction /* from formulas */
              next
                case TLSClientToAdversaryServer
                solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.1, ~pw.1>
                       ) ▶₄ #vr.69 )
                  case TLSClientToServer
                  by contradiction /* cyclic */
                qed
              qed
            next
              case TLSClientToServer_case_2
              solve( TLSServer_In( 'GET', ~sess, $IdP, <'login', $Username, ~pw>
                     ) ▶₄ #vr.9 )
                case TLSClientToServer_case_1
                solve( TLSServer_In( 'GET', ~sess, $IdP,
                                     <'oidc_req', $Client, hash, nonce, code_challenge, $RedirectURL.3>
                       ) ▶₂ #vr.82 )
                  case TLSClientToServer_case_1
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP.1,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.112 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case TLSClientToServer_case_2
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP.2,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.112 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case TLSClientToServer_case_2
                solve( TLSServer_In( 'GET', ~sess, $IdP,
                                     <'oidc_req', $Client, hash, nonce, code_challenge, $RedirectURL.3>
                       ) ▶₂ #vr.82 )
                  case TLSClientToServer_case_1
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP.1,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.111 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case TLSClientToServer_case_2
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP.2,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.111 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case TLSClientToServer_case_3
                solve( TLSServer_In( 'GET', ~sess, $IdP,
                                     <'oidc_req', $Client, hash, nonce, code_challenge, $RedirectURL.3>
                       ) ▶₂ #vr.82 )
                  case TLSClientToServer_case_1
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP.1,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.112 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case TLSClientToServer_case_2
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP.2,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.112 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case TLSClientToServer_case_4
                solve( TLSServer_In( 'GET', ~sess, $IdP,
                                     <'oidc_req', $Client, hash, nonce, code_challenge, $RedirectURL.3>
                       ) ▶₂ #vr.82 )
                  case TLSClientToServer_case_1
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP.1,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.111 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case TLSClientToServer_case_2
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP.2,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.111 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case TLSClientToServer_case_5
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_6
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_7
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_8
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_9
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ someone #x. (CompromisedAccount( someone, $IdP, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case TLSClientToServer_case_2
            solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.24)  ∥
                   (∃ url #x #y.
                     (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                     (CompromisedDomain( url ) @ #y))  ∥
                   (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
              case case_1
              solve( !MessagingApp( $App.1 ) ▶₁ #x )
                case MessagingApp
                solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                           h(fingerprint(<pk(skProver.1), pkVerifier>), salt.1), salt.1, ~code
                       ) ▶₅ #x )
                  case OIDCAppCodeRedirect_case_1
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.71 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_2
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.71 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_3
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.71 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_4
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.71 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_5
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.71 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_6
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.71 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_7
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.71 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_8
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.71 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              by contradiction /* from formulas */
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        qed
      next
        case TLSClientToServer_case_6
        solve( (∀ #z. (!KU( ~n ) @ #z) ⇒ ⊥)  ∥
               (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
          case case_1
          solve( TLSServer_In( 'GET', ~sess.2, $RedirectURL, <'code', ~code, ~n.2>
                 ) ▶₆ #vr.26 )
            case TLSClientToServer_case_1
            solve( TLSServer_In( 'GET', ~sess, $IdP,
                                 <'oidc_req', $App, h(fingerprint(<pk(skProver), pk(skVerifier)>), salt), 
                                  ~n, s256(~n.1), $RedirectURL>
                   ) ▶₂ #vr.13 )
              case TLSClientToServer_case_1
              solve( !KU( ~sk ) @ #vk.5 )
                case MessagingCompromise
                by contradiction /* from formulas */
              next
                case TLSClientToAdversaryServer
                solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.1, ~pw.1>
                       ) ▶₄ #vr.68 )
                  case TLSClientToServer
                  by contradiction /* cyclic */
                qed
              qed
            next
              case TLSClientToServer_case_2
              solve( TLSServer_In( 'GET', ~sess, $IdP, <'login', $Username, ~pw>
                     ) ▶₄ #vr.9 )
                case TLSClientToServer_case_1
                solve( TLSServer_In( 'GET', ~sess, $IdP,
                                     <'oidc_req', $Client, hash, nonce, code_challenge, $RedirectURL.3>
                       ) ▶₂ #vr.81 )
                  case TLSClientToServer_case_1
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP.1,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.111 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case TLSClientToServer_case_2
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP.2,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.111 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case TLSClientToServer_case_2
                solve( TLSServer_In( 'GET', ~sess, $IdP,
                                     <'oidc_req', $Client, hash, nonce, code_challenge, $RedirectURL.3>
                       ) ▶₂ #vr.81 )
                  case TLSClientToServer_case_1
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP.1,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.110 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case TLSClientToServer_case_2
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP.2,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.110 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case TLSClientToServer_case_3
                solve( TLSServer_In( 'GET', ~sess, $IdP,
                                     <'oidc_req', $Client, hash, nonce, code_challenge, $RedirectURL.3>
                       ) ▶₂ #vr.81 )
                  case TLSClientToServer_case_1
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP.1,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.111 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case TLSClientToServer_case_2
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP.2,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.111 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case TLSClientToServer_case_4
                solve( TLSServer_In( 'GET', ~sess, $IdP,
                                     <'oidc_req', $Client, hash, nonce, code_challenge, $RedirectURL.3>
                       ) ▶₂ #vr.81 )
                  case TLSClientToServer_case_1
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP.1,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.110 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case TLSClientToServer_case_2
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP.2,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.110 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case TLSClientToServer_case_5
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_6
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_7
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_8
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_9
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ someone #x. (CompromisedAccount( someone, $IdP, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case TLSClientToServer_case_2
            solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.30)  ∥
                   (∃ url #x #y.
                     (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                     (CompromisedDomain( url ) @ #y))  ∥
                   (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
              case case_1
              solve( !MessagingApp( $App.1 ) ▶₁ #x )
                case MessagingApp
                solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                           h(fingerprint(<pk(skProver.1), pkVerifier>), salt.1), salt.1, ~code
                       ) ▶₅ #x )
                  case OIDCAppCodeRedirect_case_1
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.70 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_2
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.70 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_3
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.70 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_4
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.70 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_5
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.70 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_6
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.70 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_7
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.70 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_8
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.70 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              by contradiction /* from formulas */
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        qed
      next
        case TLSClientToServer_case_7
        solve( (∀ #z. (!KU( ~n ) @ #z) ⇒ ⊥)  ∥
               (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
          case case_1
          solve( TLSServer_In( 'GET', ~sess.2, $RedirectURL, <'code', ~code, ~n.2>
                 ) ▶₆ #vr.26 )
            case TLSClientToServer_case_1
            solve( TLSServer_In( 'GET', ~sess, $IdP,
                                 <'oidc_req', $App, h(fingerprint(<pk(skProver), pk(skVerifier)>), salt), 
                                  ~n, s256(~n.1), $RedirectURL>
                   ) ▶₂ #vr.13 )
              case TLSClientToServer_case_1
              solve( !KU( ~sk ) @ #vk.5 )
                case MessagingCompromise
                by contradiction /* from formulas */
              next
                case TLSClientToAdversaryServer
                solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.1, ~pw.1>
                       ) ▶₄ #vr.69 )
                  case TLSClientToServer
                  by contradiction /* cyclic */
                qed
              qed
            next
              case TLSClientToServer_case_2
              solve( TLSServer_In( 'GET', ~sess, $IdP, <'login', $Username, ~pw>
                     ) ▶₄ #vr.9 )
                case TLSClientToServer_case_1
                solve( TLSServer_In( 'GET', ~sess, $IdP,
                                     <'oidc_req', $Client, hash, nonce, code_challenge, $RedirectURL.3>
                       ) ▶₂ #vr.82 )
                  case TLSClientToServer_case_1
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP.1,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.112 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case TLSClientToServer_case_2
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP.2,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.112 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case TLSClientToServer_case_2
                solve( TLSServer_In( 'GET', ~sess, $IdP,
                                     <'oidc_req', $Client, hash, nonce, code_challenge, $RedirectURL.3>
                       ) ▶₂ #vr.82 )
                  case TLSClientToServer_case_1
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP.1,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.111 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case TLSClientToServer_case_2
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP.2,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.111 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case TLSClientToServer_case_3
                solve( TLSServer_In( 'GET', ~sess, $IdP,
                                     <'oidc_req', $Client, hash, nonce, code_challenge, $RedirectURL.3>
                       ) ▶₂ #vr.82 )
                  case TLSClientToServer_case_1
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP.1,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.112 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case TLSClientToServer_case_2
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP.2,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.112 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case TLSClientToServer_case_4
                solve( TLSServer_In( 'GET', ~sess, $IdP,
                                     <'oidc_req', $Client, hash, nonce, code_challenge, $RedirectURL.3>
                       ) ▶₂ #vr.82 )
                  case TLSClientToServer_case_1
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP.1,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.111 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case TLSClientToServer_case_2
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP.2,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.111 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case TLSClientToServer_case_5
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_6
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_7
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_8
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_9
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ someone #x. (CompromisedAccount( someone, $IdP, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case TLSClientToServer_case_2
            solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.26)  ∥
                   (∃ url #x #y.
                     (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                     (CompromisedDomain( url ) @ #y))  ∥
                   (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
              case case_1
              solve( !MessagingApp( $App.1 ) ▶₁ #x )
                case MessagingApp
                solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                           h(fingerprint(<pk(skProver.1), pkVerifier>), salt.1), salt.1, ~code
                       ) ▶₅ #x )
                  case OIDCAppCodeRedirect_case_1
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.71 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_2
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.71 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_3
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.71 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_4
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.71 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_5
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.71 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_6
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.71 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_7
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.71 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_8
                  solve( TLSServer_In( 'GET', ~sess.6, $RedirectURL.3,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.71 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              by contradiction /* from formulas */
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        qed
      next
        case TLSClientToServer_case_8
        solve( (∀ #z. (!KU( ~n ) @ #z) ⇒ ⊥)  ∥
               (∃ #z. (CompromisedDomain( $IdP ) @ #z)) )
          case case_1
          solve( TLSServer_In( 'GET', ~sess.2, $RedirectURL, <'code', ~code, ~n.2>
                 ) ▶₆ #vr.26 )
            case TLSClientToServer_case_1
            solve( TLSServer_In( 'GET', ~sess, $IdP,
                                 <'oidc_req', $App, h(fingerprint(<pk(skProver), pk(skVerifier)>), salt), 
                                  ~n, s256(~n.1), $RedirectURL>
                   ) ▶₂ #vr.13 )
              case TLSClientToServer_case_1
              solve( !KU( ~sk ) @ #vk.5 )
                case MessagingCompromise
                by contradiction /* from formulas */
              next
                case TLSClientToAdversaryServer
                solve( TLSServer_In( 'GET', ~sk, $IdP.1, <'login', $Username.1, ~pw.1>
                       ) ▶₄ #vr.68 )
                  case TLSClientToServer
                  by contradiction /* cyclic */
                qed
              qed
            next
              case TLSClientToServer_case_2
              solve( TLSServer_In( 'GET', ~sess, $IdP, <'login', $Username, ~pw>
                     ) ▶₄ #vr.9 )
                case TLSClientToServer_case_1
                solve( TLSServer_In( 'GET', ~sess, $IdP,
                                     <'oidc_req', $Client, hash, nonce, code_challenge, $RedirectURL.3>
                       ) ▶₂ #vr.81 )
                  case TLSClientToServer_case_1
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP.1,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.111 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case TLSClientToServer_case_2
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP.2,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.111 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case TLSClientToServer_case_2
                solve( TLSServer_In( 'GET', ~sess, $IdP,
                                     <'oidc_req', $Client, hash, nonce, code_challenge, $RedirectURL.3>
                       ) ▶₂ #vr.81 )
                  case TLSClientToServer_case_1
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP.1,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.110 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case TLSClientToServer_case_2
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP.2,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.110 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case TLSClientToServer_case_3
                solve( TLSServer_In( 'GET', ~sess, $IdP,
                                     <'oidc_req', $Client, hash, nonce, code_challenge, $RedirectURL.3>
                       ) ▶₂ #vr.81 )
                  case TLSClientToServer_case_1
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP.1,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.111 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case TLSClientToServer_case_2
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP.2,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.111 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case TLSClientToServer_case_4
                solve( TLSServer_In( 'GET', ~sess, $IdP,
                                     <'oidc_req', $Client, hash, nonce, code_challenge, $RedirectURL.3>
                       ) ▶₂ #vr.81 )
                  case TLSClientToServer_case_1
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP.1,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.110 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case TLSClientToServer_case_2
                  solve( !KU( ~adversarySess ) @ #vk.22 )
                    case TLSClientToAdversaryServer_case_1
                    solve( TLSServer_In( 'GET', ~adversarySess, $IdP.2,
                                         <'login', $Username.1, ~pw.1>
                           ) ▶₄ #vr.110 )
                      case TLSClientToServer
                      by contradiction /* cyclic */
                    qed
                  next
                    case TLSClientToAdversaryServer_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case TLSClientToServer_case_5
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_6
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_7
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_8
                by contradiction /* from formulas */
              next
                case TLSClientToServer_case_9
                solve( (∃ #x. (CompromisedDomain( $IdP ) @ #x))  ∥
                       (∃ someone #x. (CompromisedAccount( someone, $IdP, $Username ) @ #x)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case TLSClientToServer_case_2
            solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.32)  ∥
                   (∃ url #x #y.
                     (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                     (CompromisedDomain( url ) @ #y))  ∥
                   (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
              case case_1
              solve( !MessagingApp( $App.1 ) ▶₁ #x )
                case MessagingApp
                solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                           h(fingerprint(<pk(skProver.1), pkVerifier>), salt.1), salt.1, ~code
                       ) ▶₅ #x )
                  case OIDCAppCodeRedirect_case_1
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.70 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_2
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.70 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_3
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.70 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_4
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.70 )
                    case TLSClientToServer_case_1
                    by contradiction /* cyclic */
                  next
                    case TLSClientToServer_case_2
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_3
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_5
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.70 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_6
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.70 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_7
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.70 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCAppCodeRedirect_case_8
                  solve( TLSServer_In( 'GET', ~sess.5, $RedirectURL.3,
                                       <'code', ~code, ~n.7>
                         ) ▶₆ #vr.70 )
                    case TLSClientToServer_case_1
                    solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                         <'token', 
                                          <$IdP, $App, $Username.1, nonce, 
                                           h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                          sign(<$IdP, $App, $Username.1, nonce, 
                                                h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                               x.1)
                                         >
                           ) ▶₆ #x )
                      case TLSServerToClient_case_1
                      solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case TLSServerToClient_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case TLSClientToServer_case_2
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              by contradiction /* from formulas */
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        qed
      next
        case TLSClientToServer_case_9
        solve( (∃ #x. (UsedCode( $IdP, ~code ) @ #x) ∧ #x < #vk.23)  ∥
               (∃ url #x #y.
                 (IsRedirectURL( $IdP, $App, url ) @ #x) ∧
                 (CompromisedDomain( url ) @ #y))  ∥
               (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
          case case_1
          solve( !MessagingApp( $App.1 ) ▶₁ #x )
            case MessagingApp
            solve( St_OIDCApp_CodeReq( $Prover, $IdP, $VerifierPhone.1, ~sessPost,
                                       h(fingerprint(<pk(skProver.1), pkVerifier>), salt.1), salt.1, ~code
                   ) ▶₅ #x )
              case OIDCAppCodeRedirect_case_1
              solve( TLSServer_In( 'GET', ~sess.1, $RedirectURL.1,
                                   <'code', ~code, ~n.1>
                     ) ▶₆ #vr.27 )
                case TLSClientToServer_case_1
                by contradiction /* cyclic */
              next
                case TLSClientToServer_case_2
                solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                     <'token', 
                                      <$IdP, $App, $Username.1, nonce, 
                                       h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                      sign(<$IdP, $App, $Username.1, nonce, 
                                            h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                           x.1)
                                     >
                       ) ▶₆ #x )
                  case TLSServerToClient_case_1
                  solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case TLSServerToClient_case_2
                  by contradiction /* from formulas */
                qed
              next
                case TLSClientToServer_case_3
                by contradiction /* cyclic */
              qed
            next
              case OIDCAppCodeRedirect_case_2
              solve( TLSServer_In( 'GET', ~sess.1, $RedirectURL.1,
                                   <'code', ~code, ~n.1>
                     ) ▶₆ #vr.27 )
                case TLSClientToServer_case_1
                by contradiction /* cyclic */
              next
                case TLSClientToServer_case_2
                solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                     <'token', 
                                      <$IdP, $App, $Username.1, nonce, 
                                       h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                      sign(<$IdP, $App, $Username.1, nonce, 
                                            h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                           x.1)
                                     >
                       ) ▶₆ #x )
                  case TLSServerToClient_case_1
                  solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case TLSServerToClient_case_2
                  by contradiction /* from formulas */
                qed
              next
                case TLSClientToServer_case_3
                by contradiction /* cyclic */
              qed
            next
              case OIDCAppCodeRedirect_case_3
              solve( TLSServer_In( 'GET', ~sess.1, $RedirectURL.1,
                                   <'code', ~code, ~n.1>
                     ) ▶₆ #vr.27 )
                case TLSClientToServer_case_1
                by contradiction /* cyclic */
              next
                case TLSClientToServer_case_2
                solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                     <'token', 
                                      <$IdP, $App, $Username.1, nonce, 
                                       h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                      sign(<$IdP, $App, $Username.1, nonce, 
                                            h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                           x.1)
                                     >
                       ) ▶₆ #x )
                  case TLSServerToClient_case_1
                  solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case TLSServerToClient_case_2
                  by contradiction /* from formulas */
                qed
              next
                case TLSClientToServer_case_3
                by contradiction /* cyclic */
              qed
            next
              case OIDCAppCodeRedirect_case_4
              solve( TLSServer_In( 'GET', ~sess.1, $RedirectURL.1,
                                   <'code', ~code, ~n.1>
                     ) ▶₆ #vr.27 )
                case TLSClientToServer_case_1
                by contradiction /* cyclic */
              next
                case TLSClientToServer_case_2
                solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                     <'token', 
                                      <$IdP, $App, $Username.1, nonce, 
                                       h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                      sign(<$IdP, $App, $Username.1, nonce, 
                                            h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                           x.1)
                                     >
                       ) ▶₆ #x )
                  case TLSServerToClient_case_1
                  solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case TLSServerToClient_case_2
                  by contradiction /* from formulas */
                qed
              next
                case TLSClientToServer_case_3
                by contradiction /* cyclic */
              qed
            next
              case OIDCAppCodeRedirect_case_5
              solve( TLSServer_In( 'GET', ~sess.1, $RedirectURL.1,
                                   <'code', ~code, ~n.1>
                     ) ▶₆ #vr.27 )
                case TLSClientToServer_case_1
                solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                     <'token', 
                                      <$IdP, $App, $Username.1, nonce, 
                                       h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                      sign(<$IdP, $App, $Username.1, nonce, 
                                            h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                           x.1)
                                     >
                       ) ▶₆ #x )
                  case TLSServerToClient_case_1
                  solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case TLSServerToClient_case_2
                  by contradiction /* from formulas */
                qed
              next
                case TLSClientToServer_case_2
                by contradiction /* cyclic */
              qed
            next
              case OIDCAppCodeRedirect_case_6
              solve( TLSServer_In( 'GET', ~sess.1, $RedirectURL.1,
                                   <'code', ~code, ~n.1>
                     ) ▶₆ #vr.27 )
                case TLSClientToServer_case_1
                solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                     <'token', 
                                      <$IdP, $App, $Username.1, nonce, 
                                       h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                      sign(<$IdP, $App, $Username.1, nonce, 
                                            h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                           x.1)
                                     >
                       ) ▶₆ #x )
                  case TLSServerToClient_case_1
                  solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case TLSServerToClient_case_2
                  by contradiction /* from formulas */
                qed
              next
                case TLSClientToServer_case_2
                by contradiction /* cyclic */
              qed
            next
              case OIDCAppCodeRedirect_case_7
              solve( TLSServer_In( 'GET', ~sess.1, $RedirectURL.1,
                                   <'code', ~code, ~n.1>
                     ) ▶₆ #vr.27 )
                case TLSClientToServer_case_1
                solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                     <'token', 
                                      <$IdP, $App, $Username.1, nonce, 
                                       h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                      sign(<$IdP, $App, $Username.1, nonce, 
                                            h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                           x.1)
                                     >
                       ) ▶₆ #x )
                  case TLSServerToClient_case_1
                  solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case TLSServerToClient_case_2
                  by contradiction /* from formulas */
                qed
              next
                case TLSClientToServer_case_2
                by contradiction /* cyclic */
              qed
            next
              case OIDCAppCodeRedirect_case_8
              solve( TLSServer_In( 'GET', ~sess.1, $RedirectURL.1,
                                   <'code', ~code, ~n.1>
                     ) ▶₆ #vr.27 )
                case TLSClientToServer_case_1
                solve( TLSClient_In( 'POST', ~sessPost, $IdP,
                                     <'token', 
                                      <$IdP, $App, $Username.1, nonce, 
                                       h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>, 
                                      sign(<$IdP, $App, $Username.1, nonce, 
                                            h(fingerprint(<pk(~sk), pkVerifier>), ~n.1)>,
                                           x.1)
                                     >
                       ) ▶₆ #x )
                  case TLSServerToClient_case_1
                  solve( (~code = ~code.1)  ∥ (∃ #x. (CompromisedDomain( $IdP ) @ #x)) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case TLSServerToClient_case_2
                  by contradiction /* from formulas */
                qed
              next
                case TLSClientToServer_case_2
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        next
          case case_3
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !MessagingLtkUser( $Verifier, $VerifierPhone, skVerifier
             )[no_precomp] ▶₀ #t1 )
        case MessagingFin_case_1
        solve( !UseMessagingKeyFor( $Verifier, $ProverPhone, pk(skProver)
               )[no_precomp] ▶₁ #t1 )
          case ObtainKeyFin_case_1
          solve( !UseIdPKey( $Verifier, $IdP, pk(x) ) ▶₃ #t1 )
            case IdPKeyObtain_case_1
            solve( !KU( ~idpSk ) @ #vk.18 )
              case IdPCompromise
              by contradiction /* from formulas */
            next
              case TLSClientToAdversaryServer
              solve( TLSServer_In( 'GET', ~idpSk, $IdP.1, <'login', $Username.1, ~pw>
                     ) ▶₄ #vr.32 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            qed
          next
            case IdPKeyObtain_case_2
            by contradiction /* from formulas */
          qed
        next
          case ObtainKeyFin_case_2
          solve( !UseIdPKey( $Verifier, $IdP, pk(x) ) ▶₃ #t1 )
            case IdPKeyObtain_case_1
            solve( !KU( ~idpSk ) @ #vk.18 )
              case IdPCompromise
              by contradiction /* from formulas */
            next
              case TLSClientToAdversaryServer
              solve( TLSServer_In( 'GET', ~idpSk, $IdP.1, <'login', $Username.1, ~pw>
                     ) ▶₄ #vr.31 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            qed
          next
            case IdPKeyObtain_case_2
            by contradiction /* from formulas */
          qed
        qed
      next
        case MessagingFin_case_2
        solve( !UseMessagingKeyFor( $Verifier, $ProverPhone, pk(skProver)
               )[no_precomp] ▶₁ #t1 )
          case ObtainKeyFin_case_1
          solve( !UseIdPKey( $Verifier, $IdP, pk(x) ) ▶₃ #t1 )
            case IdPKeyObtain_case_1
            solve( !KU( ~idpSk ) @ #vk.18 )
              case IdPCompromise
              by contradiction /* from formulas */
            next
              case TLSClientToAdversaryServer
              solve( TLSServer_In( 'GET', ~idpSk, $IdP.1, <'login', $Username.1, ~pw>
                     ) ▶₄ #vr.32 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            qed
          next
            case IdPKeyObtain_case_2
            by contradiction /* from formulas */
          qed
        next
          case ObtainKeyFin_case_2
          solve( !UseIdPKey( $Verifier, $IdP, pk(x) ) ▶₃ #t1 )
            case IdPKeyObtain_case_1
            solve( !KU( ~idpSk ) @ #vk.18 )
              case IdPCompromise
              by contradiction /* from formulas */
            next
              case TLSClientToAdversaryServer
              solve( TLSServer_In( 'GET', ~idpSk, $IdP.1, <'login', $Username.1, ~pw>
                     ) ▶₄ #vr.31 )
                case TLSClientToServer
                by contradiction /* cyclic */
              qed
            qed
          next
            case IdPKeyObtain_case_2
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma SocialAuthentication:
  all-traces
  "∀ v sendKey rcvKey m1 idp acc m2 #t #r1 #r2.
    (((Correspond( v, sendKey, idp, acc ) @ #t) ∧
      (ReceiveMessaging( sendKey, rcvKey, m1 ) @ #r1)) ∧
     (ReceiveIdP( idp, acc, m2 ) @ #r2)) ⇒
    ((((((∃ s #x1 #x2.
           (((((SendMessaging( sendKey, rcvKey, m1 ) @ #x1) ∧ (Sender( s ) @ #x1)) ∧
              (#x1 < #r1)) ∧
             (SendIdP( idp, acc, m2 ) @ #x2)) ∧
            (Sender( s ) @ #x2)) ∧
           (#x2 < #r2)) ∨
         (∃ #x. CompromisedIdP( idp ) @ #x)) ∨
        (∃ #x. CompromisedDomain( idp ) @ #x)) ∨
       (∃ app redirectURL #x #y #z.
         ((IsMessagingApp( app ) @ #x) ∧
          (IsRedirectURL( idp, app, redirectURL ) @ #y)) ∧
         (CompromisedDomain( redirectURL ) @ #z))) ∨
      (∃ p #x. CompromisedAccount( p, idp, acc ) @ #x)) ∨
     (∃ p #x. CompromisedMessaging( p, sendKey ) @ #x))"
/*
guarded formula characterizing all counter-examples:
"∃ v sendKey rcvKey m1 idp acc m2 #t #r1 #r2.
  (Correspond( v, sendKey, idp, acc ) @ #t) ∧
  (ReceiveMessaging( sendKey, rcvKey, m1 ) @ #r1) ∧
  (ReceiveIdP( idp, acc, m2 ) @ #r2)
 ∧
  (∀ s #x1 #x2.
    (SendMessaging( sendKey, rcvKey, m1 ) @ #x1) ∧
    (Sender( s ) @ #x1) ∧
    (SendIdP( idp, acc, m2 ) @ #x2) ∧
    (Sender( s ) @ #x2)
   ⇒
    ((¬(#x1 < #r1)) ∨ (¬(#x2 < #r2)))) ∧
  (∀ #x. (CompromisedIdP( idp ) @ #x) ⇒ ⊥) ∧
  (∀ #x. (CompromisedDomain( idp ) @ #x) ⇒ ⊥) ∧
  (∀ app redirectURL #x #y #z.
    (IsMessagingApp( app ) @ #x) ∧
    (IsRedirectURL( idp, app, redirectURL ) @ #y) ∧
    (CompromisedDomain( redirectURL ) @ #z)
   ⇒
    ⊥) ∧
  (∀ p #x. (CompromisedAccount( p, idp, acc ) @ #x) ⇒ ⊥) ∧
  (∀ p #x. (CompromisedMessaging( p, sendKey ) @ #x) ⇒ ⊥)"
*/
by sorry



























/* All wellformedness checks were successful. */

/*
Generated from:
Tamarin version 1.8.0
Maude version 3.1
Git revision: f172d7f00b1485446a1e7a42dc14623c2189cc42, branch: master
Compiled at: 2023-08-31 10:43:56.765388839 UTC
*/

end