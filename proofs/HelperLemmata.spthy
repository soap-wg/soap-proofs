theory SignalOIDC begin

// Function signature and definition of the equational theory E

functions: browserLaunch/3, cert/1, extract/1, fingerprint/1,
           forwardReceive/2, fst/1, h/2, pair/2, pk/1, s256/1, sign/2, signalMsg/3,
           signalRead/2, snd/1, tlsClientMsg/3, tlsClientReceive/2, tlsServerMsg/3,
           tlsServerReceive/2, true/0, verify/3
equations:
    extract(fingerprint(x)) = x,
    forwardReceive(browserLaunch(~sess, cert(~domain), m), ~domain) = ~sess,
    forwardReceive(browserLaunch(~sess, cert(~domain), m), ~domain) = m,
    fst(<x.1, x.2>) = x.1,
    signalRead(signalMsg(~senderSk, pk(~receiverSk), m), ~receiverSk) = m,
    snd(<x.1, x.2>) = x.2,
    tlsClientReceive(tlsServerMsg(~sess, ~domain, m), ~sess) = m,
    tlsServerReceive(tlsClientMsg(~sess, cert(~domain), m), ~domain) = ~sess,
    tlsServerReceive(tlsClientMsg(~sess, cert(~domain), m), ~domain) = m,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true

heuristic: o "./oracle.py"

rule (modulo E) Phone:
   [ ] --[ ClaimNumber( $A, $Number ) ]-> [ !Phone( $A, $Number ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) TLSSetup:
   [ Fr( ~domain ) ]
  --[ OnlyOneDomain( $A ) ]->
   [ !Domain( $A, ~domain ), Out( cert(~domain) ) ]

  /* has exactly the trivial AC variant */

restriction OnlyOneDomain:
  "∀ domain #x #y.
    ((OnlyOneDomain( domain ) @ #x) ∧ (OnlyOneDomain( domain ) @ #y)) ⇒
    (#x = #y)"
  // safety formula

rule (modulo E) DomainCompromise:
   [ !Domain( $A, ~domain ) ]
  --[ CompromisedDomain( $A, ~domain ) ]->
   [ Out( ~domain ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) SignalServer:
   [ !Domain( $Signal, ~domain ) ]
  --[ OnlyOnceSignal( ), IsSignal( $Signal ) ]->
   [ !SignalDomain( ~domain ) ]

  /* has exactly the trivial AC variant */

restriction OnlyOnceSignal:
  "∀ #i #j.
    ((OnlyOnceSignal( ) @ #i) ∧ (OnlyOnceSignal( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

rule (modulo E) SignalApp:
   [ !Domain( $IdP, ~secret ), !Domain( $SignalApp, ~domain ) ]
  --[
  OnlyOnceSignalAppIdP( $IdP ), OnlyOnceSignalApp( $SignalApp ),
  IsSignalAppFor( $IdP, $SignalApp )
  ]->
   [ !SignalAppDomain( $IdP, ~domain ) ]

  /* has exactly the trivial AC variant */

restriction OnlyOnceSignalAppIdP:
  "∀ idp #i #j.
    ((OnlyOnceSignalAppIdP( idp ) @ #i) ∧
     (OnlyOnceSignalAppIdP( idp ) @ #j)) ⇒
    (#i = #j)"
  // safety formula

restriction OnlyOnceSignalApp:
  "∀ c #i #j.
    ((OnlyOnceSignalApp( c ) @ #i) ∧ (OnlyOnceSignalApp( c ) @ #j)) ⇒
    (#i = #j)"
  // safety formula

rule (modulo E) SignalRegister:
   [ Fr( sk ), Fr( ~sess ), !Phone( $A, $Number ), !SignalDomain( ~signal )
   ]
  --[ IsSignalKey( sk ) ]->
   [
   Out( tlsClientMsg(~sess, cert(~signal), <'signal_req', $Number, pk(sk)>)
   ),
   Out( pk(sk) ), St_SignalReg_App( $A, ~sess, sk )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) SignalChallenge:
   [
   !SignalDomain( ~signal ),
   In( tlsClientMsg(~sess, cert(~signal), <'signal_req', $Number, ltk>) ),
   Fr( challenge )
   ]
  --[ OTPChallenge( challenge ) ]->
   [
   Out( <'otp', challenge> ),
   St_SigReg_Server( ~sess, $Number, ltk, challenge )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) SignalRespond:
   [
   In( <'otp', challenge> ), !SignalDomain( ~signal ),
   St_SignalReg_App( $A, ~sess, sk )
   ]
  --[ OTPRespond( challenge ) ]->
   [
   Out( tlsClientMsg(~sess, cert(~signal), <'otp_respond', challenge>) ),
   St_SignalReg_AppWait( $A, ~sess, sk )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) SignalAck:
   [
   !SignalDomain( ~signal ),
   In( tlsClientMsg(~sess, cert(~signal), <'otp_respond', challenge>) ),
   St_SigReg_Server( ~sess, phone, ltk, challenge )
   ]
  --[ SignalKeyServer( phone, ltk ) ]->
   [
   !SignalLtkServer( phone, ltk ),
   Out( tlsServerMsg(~sess, ~signal, 'signal_ack') )
   ]

  /* has exactly the trivial AC variant */

restriction KeysUnique:
  "∀ phone ltk1 ltk2 #a #b.
    ((SignalKeyServer( phone, ltk1 ) @ #a) ∧
     (SignalKeyServer( phone, ltk2 ) @ #b)) ⇒
    ((#a = #b) ∧ (ltk1 = ltk2))"
  // safety formula

rule (modulo E) SignalFin:
   [
   !SignalDomain( ~signal ), St_SignalReg_AppWait( $A, ~sess, sk ),
   In( tlsServerMsg(~sess, ~signal, 'signal_ack') )
   ]
  --[ ClaimSignalKey( $A, sk ) ]->
   [ !SignalLtkApp( $A, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) SignalKeyRequest:
   [ Fr( ~sess ), !SignalLtkServer( phone, ltk ), !SignalDomain( ~signal ) ]
  --[ ShareSignalKey( ltk ) ]->
   [ Out( tlsServerMsg(~sess, ~signal, <'signal_pk_response', phone, ltk>) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) SignalCompromise:
   [ !SignalLtkApp( $A, ~sk ) ]
  --[ CompromisedSignal( $A, ~sk ) ]->
   [ Out( ~sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) IdPSetup:
   [ Fr( sk ) ]
  --[ ClaimIdPKey( $IdP, sk ) ]->
   [ !IdPLtk( $IdP, sk ), Out( pk(sk) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) IdPPkDistribute:
   [ Fr( ~sess ), !IdPLtk( $IdP, sk ), !Domain( $IdP, ~IdPKey ) ]
  -->
   [ Out( tlsServerMsg(~sess, ~IdPKey, <'idp_pk_response', pk(sk)>) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) IdPSignUpInit:
   [ Fr( pw ), Fr( ~sess ), !Domain( $IdP, ~IdPKey ) ]
  --[ UsernameApp( $A, $IdP, $Username, pw ) ]->
   [
   Out( tlsClientMsg(~sess, cert(~IdPKey), <'sign_up', $Username, pw>) ),
   St_IdPRegistration_App( ~sess, $A, $IdP, $Username, pw )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) IdPSignUpServer:
   [
   !Domain( $IdP, ~IdPKey ),
   In( tlsClientMsg(~sess, cert(~IdPKey), <'sign_up', username, pw>) )
   ]
  --[
  UsernameServer( $IdP, username, pw ), AccountsUnique( $IdP, username )
  ]->
   [
   !IdPAccountServer( $IdP, username, pw ),
   Out( tlsServerMsg(~sess, ~IdPKey, 'idp_ack') )
   ]

  /* has exactly the trivial AC variant */

restriction AccountsUnique:
  "∀ idp u #a #b.
    ((AccountsUnique( idp, u ) @ #a) ∧ (AccountsUnique( idp, u ) @ #b)) ⇒
    (#a = #b)"
  // safety formula

rule (modulo E) IdPSignUpFin:
   [
   St_IdPRegistration_App( ~sess, $A, $IdP, $Username, pw ),
   !Domain( $IdP, ~IdPKey ), In( tlsServerMsg(~sess, ~IdPKey, 'idp_ack') )
   ]
  --[ ClaimUsername( $A, $IdP, $Username, pw ) ]->
   [ !IdPAccountApp( $A, $IdP, $Username, pw ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) IdPAccountCompromise:
   [ !IdPAccountApp( $A, $IdP, $Username, ~pw ) ]
  --[ CompromisedAccount( $A, $IdP, $Username ) ]->
   [ Out( ~pw ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) InitSessionStore:
   [ ]
  --[ OnlyOnceInitSessionStore( $User ) ]->
   [ SessionStore( $User, 'null', 'null' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ClearSessionStore:
   [ SessionStore( $User, x, y ) ]
  -->
   [ SessionStore( $User, 'null', 'null' ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

restriction OnlyOnceInitSessionStore:
  "∀ u #x #y.
    ((OnlyOnceInitSessionStore( u ) @ #x) ∧
     (OnlyOnceInitSessionStore( u ) @ #y)) ⇒
    (#x = #y)"
  // safety formula

rule (modulo E) LinkClick:
   [ Fr( ~sess ), In( m ), !Domain( $Party, ~domain ) ]
  --[ GenBrowserSession( $Prover, $Party, ~sess ), AdversaryLinkClick( )
  ]->
   [
   Out( browserLaunch(~sess, cert(~domain), m) ),
   Browser( $Prover, $Party, ~sess )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) OIDCAppLaunchBrowser:
   [
   !Domain( $IdP, ~IdPKey ), !SignalDomain( ~signal ),
   !SignalLtkApp( $Prover, skProver ),
   !IdPAccountApp( $Prover, $IdP, username, pw ),
   In( tlsServerMsg(~sessPk, ~signal,
                    <'signal_pk_response', phone, pkVerifier>)
   ),
   SessionStore( $Prover, drop1, drop2 ), Fr( salt ), Fr( nonce ),
   Fr( code_verifier ), Fr( ~sess )
   ]
  --[
  OIDCRequest( $Prover, $IdP, pkVerifier, salt,
               h(fingerprint(<pk(skProver), pkVerifier>), salt), nonce,
               s256(code_verifier)
  ),
  GenNonce( nonce ), GenBrowserSession( $Prover, $IdP, ~sess ),
  GenerateCodeVerifierFor( code_verifier, $IdP )
  ]->
   [
   Out( browserLaunch(~sess, cert(~IdPKey),
                      <'oidc_req', h(fingerprint(<pk(skProver), pkVerifier>), salt), nonce, 
                       s256(code_verifier)>)
   ),
   Out( <h(fingerprint(<pk(skProver), pkVerifier>), salt), nonce, 
         s256(code_verifier)>
   ),
   SessionStore( $Prover, nonce,
                 <$IdP, h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, 
                  code_verifier>
   ),
   Browser( $Prover, $IdP, ~sess )
   ]

  // loop breaker: [5]
  /* has exactly the trivial AC variant */

rule (modulo E) OIDCIdPInit:
   [
   !Domain( $IdP, ~IdPKey ),
   In( browserLaunch(~sess, cert(~IdPKey),
                     <'oidc_req', hash, nonce, code_challenge>)
   )
   ]
  --[
  AuthenticationRequest( ~sess, $IdP, hash, nonce, code_challenge ),
  IsNonce( nonce )
  ]->
   [
   Out( tlsServerMsg(~sess, ~IdPKey, 'auth_req') ),
   St_OIDCServer_Auth( $IdP, ~sess, hash, nonce, code_challenge )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) OIDCAppLogin:
   [
   Browser( $Prover, $IdP, ~sess ), !Domain( $IdP, ~IdPKey ),
   In( tlsServerMsg(~sess, ~IdPKey, 'auth_req') ),
   !IdPAccountApp( $Prover, $IdP, $Username, pw )
   ]
  --[
  AuthenticationResponse( ~sess, $Prover, $IdP, $Username ),
  UseBrowserSession( $Prover, $IdP, ~sess )
  ]->
   [
   Out( tlsClientMsg(~sess, cert(~IdPKey), <'login', $Username, pw>) ),
   Browser( $Prover, $IdP, ~sess )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

lemma BrowserSessionSources [reuse, use_induction]:
  all-traces
  "∀ user domain sess #x.
    (UseBrowserSession( user, domain, sess ) @ #x) ⇒
    (∃ user.1 domain.1 #y.
      (GenBrowserSession( user.1, domain.1, sess ) @ #y) ∧ (#y < #x))"
/*
guarded formula characterizing all counter-examples:
"∃ user domain sess #x.
  (UseBrowserSession( user, domain, sess ) @ #x)
 ∧
  ∀ user.1 domain.1 #y.
   (GenBrowserSession( user.1, domain.1, sess ) @ #y) ⇒ ¬(#y < #x)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#x))  ∥
         (∃ user domain #y.
           (GenBrowserSession( user, domain, ~sess ) @ #y)
          ∧
           (¬(last(#y))) ∧ (#y < #x)) )
    case case_1
    solve( Browser( $Prover, $IdP, ~sess ) ▶₀ #x )
      case LinkClick
      by contradiction /* from formulas */
    next
      case OIDCAppLaunchBrowser
      by contradiction /* from formulas */
    next
      case OIDCAppLogin
      by contradiction /* from formulas */
    qed
  next
    case case_2
    by contradiction /* from formulas */
  qed
qed

lemma BrowserSessionBinding [reuse, use_induction]:
  all-traces
  "∀ user1 user2 domain1 domain2 sess #x #y.
    ((UseBrowserSession( user1, domain1, sess ) @ #x) ∧
     (GenBrowserSession( user2, domain2, sess ) @ #y)) ⇒
    ((user1 = user2) ∧ (domain1 = domain2))"
/*
guarded formula characterizing all counter-examples:
"∃ user1 user2 domain1 domain2 sess #x #y.
  (UseBrowserSession( user1, domain1, sess ) @ #x) ∧
  (GenBrowserSession( user2, domain2, sess ) @ #y)
 ∧
  ((¬(user1 = user2)) ∨ (¬(domain1 = domain2)))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( GenBrowserSession( user2, domain2, ~sess ) @ #y.2 )
    case LinkClick
    solve( (¬($Prover = $Prover.1))  ∥ (¬($IdP = $Party)) )
      case case_1
      solve( (last(#y))  ∥ (last(#x))  ∥
             (($Prover = $Prover.1) ∧ ($IdP = $Party)) )
        case case_1
        solve( GenBrowserSession( $Prover, $IdP, ~sess ) @ #y.1 )
          case LinkClick
          by contradiction /* from formulas */
        qed
      next
        case case_2
        solve( GenBrowserSession( user, domain.1, ~sess ) @ #y.1 )
          case LinkClick
          solve( Browser( $Prover, $IdP, ~sess ) ▶₀ #x )
            case LinkClick
            by contradiction /* from formulas */
          next
            case OIDCAppLogin
            by contradiction /* from formulas */
          qed
        qed
      next
        case case_3
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( (last(#y))  ∥ (last(#x))  ∥
             (($Prover = $Prover.1) ∧ ($IdP = $Party)) )
        case case_1
        solve( GenBrowserSession( $Prover, $IdP, ~sess ) @ #y.1 )
          case LinkClick
          by contradiction /* from formulas */
        qed
      next
        case case_2
        solve( GenBrowserSession( user, domain.1, ~sess ) @ #y.1 )
          case LinkClick
          solve( Browser( $Prover, $IdP, ~sess ) ▶₀ #x )
            case LinkClick
            by contradiction /* from formulas */
          next
            case OIDCAppLogin
            by contradiction /* from formulas */
          qed
        qed
      next
        case case_3
        by contradiction /* from formulas */
      qed
    qed
  next
    case OIDCAppLaunchBrowser
    solve( (¬($Prover = $Prover.1))  ∥ (¬($IdP = $IdP.1)) )
      case case_1
      solve( (last(#y))  ∥ (last(#x))  ∥
             (($Prover = $Prover.1) ∧ ($IdP = $IdP.1)) )
        case case_1
        solve( GenBrowserSession( $Prover, $IdP, ~sess ) @ #y.1 )
          case OIDCAppLaunchBrowser
          by contradiction /* from formulas */
        qed
      next
        case case_2
        solve( GenBrowserSession( user, domain, ~sess ) @ #y.1 )
          case OIDCAppLaunchBrowser
          solve( Browser( $Prover, $IdP, ~sess ) ▶₀ #x )
            case OIDCAppLaunchBrowser
            by contradiction /* from formulas */
          next
            case OIDCAppLogin
            by contradiction /* from formulas */
          qed
        qed
      next
        case case_3
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( (last(#y))  ∥ (last(#x))  ∥
             (($Prover = $Prover.1) ∧ ($IdP = $IdP.1)) )
        case case_1
        solve( GenBrowserSession( $Prover, $IdP, ~sess ) @ #y.1 )
          case OIDCAppLaunchBrowser
          by contradiction /* from formulas */
        qed
      next
        case case_2
        solve( GenBrowserSession( user, domain, ~sess ) @ #y.1 )
          case OIDCAppLaunchBrowser
          solve( Browser( $Prover, $IdP, ~sess ) ▶₀ #x )
            case OIDCAppLaunchBrowser
            by contradiction /* from formulas */
          next
            case OIDCAppLogin
            by contradiction /* from formulas */
          qed
        qed
      next
        case case_3
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma BrowserSessionUnique [reuse, use_induction]:
  all-traces
  "∀ user1 user2 domain1 domain2 sess #x #y.
    ((GenBrowserSession( user1, domain1, sess ) @ #x) ∧
     (GenBrowserSession( user2, domain2, sess ) @ #y)) ⇒
    (#x = #y)"
/*
guarded formula characterizing all counter-examples:
"∃ user1 user2 domain1 domain2 sess #x #y.
  (GenBrowserSession( user1, domain1, sess ) @ #x) ∧
  (GenBrowserSession( user2, domain2, sess ) @ #y)
 ∧
  ¬(#x = #y)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( GenBrowserSession( user1, domain1, sess ) @ #x )
    case LinkClick
    solve( GenBrowserSession( user2, domain2, ~sess ) @ #y )
      case LinkClick
      by contradiction /* from formulas */
    qed
  next
    case OIDCAppLaunchBrowser
    solve( GenBrowserSession( user2, domain2, ~sess ) @ #y )
      case OIDCAppLaunchBrowser
      by contradiction /* from formulas */
    qed
  qed
qed

lemma UsernamesUnique [reuse]:
  all-traces
  "∀ userA userB idp username pw1 pw2 #a #b.
    ((ClaimUsername( userA, idp, username, pw1 ) @ #a) ∧
     (ClaimUsername( userB, idp, username, pw2 ) @ #b)) ⇒
    (((#a = #b) ∧ (userA = userB)) ∨
     (∃ sk #t. CompromisedDomain( idp, sk ) @ #t))"
/*
guarded formula characterizing all counter-examples:
"∃ userA userB idp username pw1 pw2 #a #b.
  (ClaimUsername( userA, idp, username, pw1 ) @ #a) ∧
  (ClaimUsername( userB, idp, username, pw2 ) @ #b)
 ∧
  (((¬(#a = #b)) ∨ (¬(userA = userB)))) ∧
  (∀ sk #t. (CompromisedDomain( idp, sk ) @ #t) ⇒ ⊥)"
*/
simplify
solve( !Domain( $IdP, ~IdPKey ) ▶₁ #a )
  case TLSSetup
  solve( !Domain( $IdP, ~IdPKey.1 ) ▶₁ #b )
    case TLSSetup
    solve( St_IdPRegistration_App( ~sess, $A, $IdP, $Username, pw1 ) ▶₀ #a )
      case IdPSignUpInit
      solve( St_IdPRegistration_App( ~sess.1, $A.1, $IdP, $Username, pw2
             ) ▶₀ #b )
        case IdPSignUpInit
        solve( (¬(#a = #b))  ∥ (¬($A = $A.1)) )
          case case_1
          solve( !KU( tlsServerMsg(~sess, ~IdPKey, 'idp_ack') ) @ #vk )
            case IdPSignUpServer
            solve( !KU( tlsServerMsg(~sess.1, ~IdPKey, 'idp_ack') ) @ #vk.1 )
              case IdPSignUpServer
              solve( (#a < #b)  ∥ (#b < #a) )
                case case_1
                solve( !KU( tlsClientMsg(~sess, cert(~IdPKey), <'sign_up', username, pw>)
                       ) @ #vk.2 )
                  case IdPSignUpInit
                  solve( !KU( tlsClientMsg(~sess.1, cert(~IdPKey),
                                           <'sign_up', username, pw>)
                         ) @ #vk.3 )
                    case IdPSignUpInit
                    by contradiction /* cyclic */
                  next
                    case c_tlsClientMsg
                    solve( !KU( ~sess.1 ) @ #vk.4 )
                      case IdPSignUpInit
                      solve( !KU( ~IdPKey ) @ #vk.11 )
                        case DomainCompromise
                        by contradiction /* from formulas */
                      next
                        case OIDCAppLogin
                        by solve( GenBrowserSession( $Prover, $IdP.1, ~IdPKey ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( browserLaunch(~IdPKey, cert(~IdPKey.1),
                                                  <'oidc_req', hash, nonce, code_challenge>)
                               ) @ #vk.14 )
                          case c_browserLaunch
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case OIDCAppLogin
                      by solve( GenBrowserSession( $Prover, $IdP.1, ~sess.1 ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( browserLaunch(~sess.1, cert(~IdPKey.1),
                                                <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.13 )
                        case c_browserLaunch
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case c_tlsClientMsg
                  solve( !KU( ~sess ) @ #vk.4 )
                    case IdPSignUpInit
                    solve( !KU( ~IdPKey ) @ #vk.11 )
                      case DomainCompromise
                      by contradiction /* from formulas */
                    next
                      case OIDCAppLogin
                      by solve( GenBrowserSession( $Prover, $IdP.1, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( browserLaunch(~IdPKey, cert(~IdPKey.1),
                                                <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.14 )
                        case c_browserLaunch
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case OIDCAppLogin
                    by solve( GenBrowserSession( $Prover, $IdP.1, ~sess ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( browserLaunch(~sess, cert(~IdPKey.1),
                                              <'oidc_req', hash, nonce, code_challenge>)
                           ) @ #vk.13 )
                      case c_browserLaunch
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              next
                case case_2
                solve( !KU( tlsClientMsg(~sess, cert(~IdPKey), <'sign_up', username, pw>)
                       ) @ #vk.2 )
                  case IdPSignUpInit
                  solve( !KU( tlsClientMsg(~sess.1, cert(~IdPKey),
                                           <'sign_up', username, pw>)
                         ) @ #vk.3 )
                    case IdPSignUpInit
                    by contradiction /* cyclic */
                  next
                    case c_tlsClientMsg
                    solve( !KU( ~sess.1 ) @ #vk.4 )
                      case IdPSignUpInit
                      solve( !KU( ~IdPKey ) @ #vk.11 )
                        case DomainCompromise
                        by contradiction /* from formulas */
                      next
                        case OIDCAppLogin
                        by solve( GenBrowserSession( $Prover, $IdP.1, ~IdPKey ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( browserLaunch(~IdPKey, cert(~IdPKey.1),
                                                  <'oidc_req', hash, nonce, code_challenge>)
                               ) @ #vk.14 )
                          case c_browserLaunch
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case OIDCAppLogin
                      by solve( GenBrowserSession( $Prover, $IdP.1, ~sess.1 ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( browserLaunch(~sess.1, cert(~IdPKey.1),
                                                <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.13 )
                        case c_browserLaunch
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case c_tlsClientMsg
                  solve( !KU( ~sess ) @ #vk.4 )
                    case IdPSignUpInit
                    solve( !KU( ~IdPKey ) @ #vk.11 )
                      case DomainCompromise
                      by contradiction /* from formulas */
                    next
                      case OIDCAppLogin
                      by solve( GenBrowserSession( $Prover, $IdP.1, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( browserLaunch(~IdPKey, cert(~IdPKey.1),
                                                <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.14 )
                        case c_browserLaunch
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case OIDCAppLogin
                    by solve( GenBrowserSession( $Prover, $IdP.1, ~sess ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( browserLaunch(~sess, cert(~IdPKey.1),
                                              <'oidc_req', hash, nonce, code_challenge>)
                           ) @ #vk.13 )
                      case c_browserLaunch
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            next
              case c_tlsServerMsg
              solve( !KU( ~IdPKey ) @ #vk.4 )
                case DomainCompromise
                by contradiction /* from formulas */
              next
                case OIDCAppLogin
                by solve( GenBrowserSession( $Prover, $IdP.1, ~IdPKey ) @ #y )
              next
                case OIDCIdPIssueCode
                solve( !KU( browserLaunch(~IdPKey, cert(~IdPKey.1),
                                          <'oidc_req', hash, nonce, code_challenge>)
                       ) @ #vk.8 )
                  case c_browserLaunch
                  by contradiction /* cyclic */
                qed
              qed
            qed
          next
            case c_tlsServerMsg
            solve( !KU( ~IdPKey ) @ #vk.3 )
              case DomainCompromise
              by contradiction /* from formulas */
            next
              case OIDCAppLogin
              by solve( GenBrowserSession( $Prover, $IdP.1, ~IdPKey ) @ #y )
            next
              case OIDCIdPIssueCode
              solve( !KU( browserLaunch(~IdPKey, cert(~IdPKey.1),
                                        <'oidc_req', hash, nonce, code_challenge>)
                     ) @ #vk.7 )
                case c_browserLaunch
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case case_2
          solve( !KU( tlsServerMsg(~sess, ~IdPKey, 'idp_ack') ) @ #vk )
            case IdPSignUpServer
            solve( !KU( tlsServerMsg(~sess.1, ~IdPKey, 'idp_ack') ) @ #vk.1 )
              case IdPSignUpServer
              solve( !KU( tlsClientMsg(~sess, cert(~IdPKey), <'sign_up', username, pw>)
                     ) @ #vk.2 )
                case IdPSignUpInit
                solve( !KU( tlsClientMsg(~sess.1, cert(~IdPKey),
                                         <'sign_up', username, pw>)
                       ) @ #vk.3 )
                  case IdPSignUpInit
                  by contradiction /* from formulas */
                next
                  case c_tlsClientMsg
                  solve( !KU( ~sess.1 ) @ #vk.4 )
                    case IdPSignUpInit
                    solve( !KU( ~IdPKey ) @ #vk.11 )
                      case DomainCompromise
                      by contradiction /* from formulas */
                    next
                      case OIDCAppLogin
                      by solve( GenBrowserSession( $Prover, $IdP.1, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( browserLaunch(~IdPKey, cert(~IdPKey.1),
                                                <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.14 )
                        case c_browserLaunch
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case OIDCAppLogin
                    by solve( GenBrowserSession( $Prover, $IdP.1, ~sess.1 ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( browserLaunch(~sess.1, cert(~IdPKey.1),
                                              <'oidc_req', hash, nonce, code_challenge>)
                           ) @ #vk.13 )
                      case c_browserLaunch
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              next
                case c_tlsClientMsg
                solve( !KU( ~sess ) @ #vk.4 )
                  case IdPSignUpInit
                  solve( !KU( ~IdPKey ) @ #vk.11 )
                    case DomainCompromise
                    by contradiction /* from formulas */
                  next
                    case OIDCAppLogin
                    by solve( GenBrowserSession( $Prover, $IdP.1, ~IdPKey ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( browserLaunch(~IdPKey, cert(~IdPKey.1),
                                              <'oidc_req', hash, nonce, code_challenge>)
                           ) @ #vk.14 )
                      case c_browserLaunch
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case OIDCAppLogin
                  by solve( GenBrowserSession( $Prover, $IdP.1, ~sess ) @ #y )
                next
                  case OIDCIdPIssueCode
                  solve( !KU( browserLaunch(~sess, cert(~IdPKey.1),
                                            <'oidc_req', hash, nonce, code_challenge>)
                         ) @ #vk.13 )
                    case c_browserLaunch
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            next
              case c_tlsServerMsg
              solve( !KU( ~IdPKey ) @ #vk.4 )
                case DomainCompromise
                by contradiction /* from formulas */
              next
                case OIDCAppLogin
                by solve( GenBrowserSession( $Prover, $IdP.1, ~IdPKey ) @ #y )
              next
                case OIDCIdPIssueCode
                solve( !KU( browserLaunch(~IdPKey, cert(~IdPKey.1),
                                          <'oidc_req', hash, nonce, code_challenge>)
                       ) @ #vk.8 )
                  case c_browserLaunch
                  by contradiction /* cyclic */
                qed
              qed
            qed
          next
            case c_tlsServerMsg
            solve( !KU( ~IdPKey ) @ #vk.3 )
              case DomainCompromise
              by contradiction /* from formulas */
            next
              case OIDCAppLogin
              by solve( GenBrowserSession( $Prover, $IdP.1, ~IdPKey ) @ #y )
            next
              case OIDCIdPIssueCode
              solve( !KU( browserLaunch(~IdPKey, cert(~IdPKey.1),
                                        <'oidc_req', hash, nonce, code_challenge>)
                     ) @ #vk.7 )
                case c_browserLaunch
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma UsernamesServerConfirmed [reuse]:
  all-traces
  "∀ user idp username pw #t.
    (ClaimUsername( user, idp, username, pw ) @ #t) ⇒
    ((∃ #x. UsernameServer( idp, username, pw ) @ #x) ∨
     (∃ sk #x. CompromisedDomain( idp, sk ) @ #x))"
/*
guarded formula characterizing all counter-examples:
"∃ user idp username pw #t.
  (ClaimUsername( user, idp, username, pw ) @ #t)
 ∧
  (∀ #x. (UsernameServer( idp, username, pw ) @ #x) ⇒ ⊥) ∧
  (∀ sk #x. (CompromisedDomain( idp, sk ) @ #x) ⇒ ⊥)"
*/
simplify
solve( !Domain( $IdP, ~IdPKey ) ▶₁ #t )
  case TLSSetup
  solve( St_IdPRegistration_App( ~sess, $A, $IdP, $Username, pw ) ▶₀ #t )
    case IdPSignUpInit
    solve( !KU( tlsServerMsg(~sess, ~IdPKey, 'idp_ack') ) @ #vk )
      case IdPSignUpServer
      solve( !KU( tlsClientMsg(~sess, cert(~IdPKey), <'sign_up', username, pw>)
             ) @ #vk.1 )
        case IdPSignUpInit
        by contradiction /* from formulas */
      next
        case c_tlsClientMsg
        solve( !KU( ~sess ) @ #vk.2 )
          case IdPSignUpInit
          solve( !KU( ~IdPKey ) @ #vk.9 )
            case DomainCompromise
            by contradiction /* from formulas */
          next
            case OIDCAppLogin
            by solve( GenBrowserSession( $Prover, $IdP.1, ~IdPKey ) @ #y )
          next
            case OIDCIdPIssueCode
            solve( !KU( browserLaunch(~IdPKey, cert(~IdPKey.1),
                                      <'oidc_req', hash, nonce, code_challenge>)
                   ) @ #vk.12 )
              case c_browserLaunch
              by contradiction /* cyclic */
            qed
          qed
        next
          case OIDCAppLogin
          by solve( GenBrowserSession( $Prover, $IdP.1, ~sess ) @ #y )
        next
          case OIDCIdPIssueCode
          solve( !KU( browserLaunch(~sess, cert(~IdPKey.1),
                                    <'oidc_req', hash, nonce, code_challenge>)
                 ) @ #vk.11 )
            case c_browserLaunch
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case c_tlsServerMsg
      solve( !KU( ~IdPKey ) @ #vk.2 )
        case DomainCompromise
        by contradiction /* from formulas */
      next
        case OIDCAppLogin
        by solve( GenBrowserSession( $Prover, $IdP.1, ~IdPKey ) @ #y )
      next
        case OIDCIdPIssueCode
        solve( !KU( browserLaunch(~IdPKey, cert(~IdPKey.1),
                                  <'oidc_req', hash, nonce, code_challenge>)
               ) @ #vk.6 )
          case c_browserLaunch
          by contradiction /* cyclic */
        qed
      qed
    qed
  qed
qed

lemma PasswordsConfidential [reuse]:
  all-traces
  "∀ user idp username pw #t.
    (UsernameApp( user, idp, username, pw ) @ #t) ⇒
    (((¬(∃ #x. !KU( pw ) @ #x)) ∨
      (∃ sk #x. CompromisedDomain( idp, sk ) @ #x)) ∨
     (∃ someone #x. CompromisedAccount( someone, idp, username ) @ #x))"
/*
guarded formula characterizing all counter-examples:
"∃ user idp username pw #t.
  (UsernameApp( user, idp, username, pw ) @ #t)
 ∧
  (∃ #x. (!KU( pw ) @ #x)) ∧
  (∀ sk #x. (CompromisedDomain( idp, sk ) @ #x) ⇒ ⊥) ∧
  (∀ someone #x. (CompromisedAccount( someone, idp, username ) @ #x) ⇒ ⊥)"
*/
simplify
solve( !Domain( $IdP, ~IdPKey ) ▶₂ #t )
  case TLSSetup
  solve( !KU( ~n ) @ #x )
    case IdPAccountCompromise
    by contradiction /* from formulas */
  next
    case IdPSignUpInit
    solve( !KU( ~IdPKey ) @ #vk )
      case DomainCompromise
      by contradiction /* from formulas */
    next
      case OIDCAppLogin
      by solve( GenBrowserSession( $Prover, $IdP.1, ~IdPKey ) @ #y )
    next
      case OIDCIdPIssueCode
      solve( !KU( browserLaunch(~IdPKey, cert(~IdPKey.1),
                                <'oidc_req', hash, nonce, code_challenge>)
             ) @ #vk.3 )
        case c_browserLaunch
        by contradiction /* cyclic */
      qed
    qed
  next
    case OIDCAppLogin_case_1
    by solve( GenBrowserSession( $Prover, $IdP.1, ~n ) @ #y )
  next
    case OIDCAppLogin_case_2
    solve( !KU( ~IdPKey ) @ #vk.1 )
      case DomainCompromise
      by contradiction /* from formulas */
    next
      case OIDCAppLogin
      by solve( GenBrowserSession( $Prover, $IdP.1, ~IdPKey ) @ #y.1 )
    next
      case OIDCIdPIssueCode
      solve( !KU( browserLaunch(~IdPKey, cert(~IdPKey.1),
                                <'oidc_req', hash, nonce, code_challenge>)
             ) @ #vk.5 )
        case c_browserLaunch
        by contradiction /* cyclic */
      qed
    qed
  next
    case OIDCIdPIssueCode
    solve( !KU( browserLaunch(~n, cert(~IdPKey.1),
                              <'oidc_req', hash, nonce, code_challenge>)
           ) @ #vk.2 )
      case c_browserLaunch
      by contradiction /* cyclic */
    qed
  qed
qed

lemma SignalKeysUnique [reuse]:
  all-traces
  "∀ userA userB sk #a #b.
    ((ClaimSignalKey( userA, sk ) @ #a) ∧
     (ClaimSignalKey( userB, sk ) @ #b)) ⇒
    (((#a = #b) ∧ (userA = userB)) ∨
     (∃ signal sk.1 #t1 #t2.
       (CompromisedDomain( signal, sk.1 ) @ #t1) ∧ (IsSignal( signal ) @ #t2)))"
/*
guarded formula characterizing all counter-examples:
"∃ userA userB sk #a #b.
  (ClaimSignalKey( userA, sk ) @ #a) ∧ (ClaimSignalKey( userB, sk ) @ #b)
 ∧
  (((¬(#a = #b)) ∨ (¬(userA = userB)))) ∧
  (∀ signal sk.1 #t1 #t2.
    (CompromisedDomain( signal, sk.1 ) @ #t1) ∧ (IsSignal( signal ) @ #t2)
   ⇒
    ⊥)"
*/
simplify
solve( !SignalDomain( ~signal ) ▶₀ #a )
  case SignalServer
  solve( !SignalDomain( ~signal.1 ) ▶₀ #b )
    case SignalServer
    solve( St_SignalReg_AppWait( $A, ~sess, sk ) ▶₁ #a )
      case SignalRespond
      solve( St_SignalReg_AppWait( $A.1, ~sess.1, ~n ) ▶₁ #b )
        case SignalRespond
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

rule (modulo E) OIDCIdPIssueCode:
   [
   St_OIDCServer_Auth( $IdP, ~sess, hash, nonce, code_challenge ),
   In( tlsClientMsg(~sess, cert(~IdPKey), <'login', $Username, pw>) ),
   !IdPAccountServer( $IdP, $Username, pw ), !IdPLtk( $IdP, sk ),
   !Domain( $IdP, ~IdPKey ), !SignalAppDomain( $IdP, ~signalApp ),
   Fr( ~code )
   ]
  --[
  IdPIssueCode( $IdP, $Username, ~code ), IsPW( pw ), IsNonce( nonce ),
  GenCode( $IdP, ~code )
  ]->
   [
   Out( browserLaunch(~sess, cert(~signalApp), <'code', ~code, nonce>) ),
   St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce, code_challenge )
   ]

  /* has exactly the trivial AC variant */

lemma IsPW [reuse]:
  all-traces
  "∀ pw #x.
    (IsPW( pw ) @ #x) ⇒
    ((∃ u i un #y. UsernameApp( u, i, un, pw ) @ #y) ∨
     (∃ #y. !KU( pw ) @ #y))"
/*
guarded formula characterizing all counter-examples:
"∃ pw #x.
  (IsPW( pw ) @ #x)
 ∧
  (∀ u i un #y. (UsernameApp( u, i, un, pw ) @ #y) ⇒ ⊥) ∧
  (∀ #y. (!KU( pw ) @ #y) ⇒ ⊥)"
*/
simplify
solve( St_OIDCServer_Auth( $IdP, ~sess, hash, nonce, code_challenge
       ) ▶₀ #x )
  case OIDCIdPInit
  solve( !KU( tlsClientMsg(~sess, cert(~IdPKey), <'login', $Username, pw>)
         ) @ #vk )
    case OIDCAppLogin
    by contradiction /* from formulas */
  next
    case c_tlsClientMsg
    by contradiction /* from formulas */
  qed
qed

lemma UserAccountRequiresSignUp [reuse]:
  all-traces
  "∀ u i un pw #x.
    (ClaimUsername( u, i, un, pw ) @ #x) ⇒
    ((∃ #y. UsernameApp( u, i, un, pw ) @ #y) ∨
     (∃ d #y. CompromisedDomain( i, d ) @ #y))"
/*
guarded formula characterizing all counter-examples:
"∃ u i un pw #x.
  (ClaimUsername( u, i, un, pw ) @ #x)
 ∧
  (∀ #y. (UsernameApp( u, i, un, pw ) @ #y) ⇒ ⊥) ∧
  (∀ d #y. (CompromisedDomain( i, d ) @ #y) ⇒ ⊥)"
*/
simplify
solve( (∃ #x. (UsernameServer( $IdP, $Username, pw ) @ #x))  ∥
       (∃ sk #x. (CompromisedDomain( $IdP, sk ) @ #x)) )
  case case_1
  solve( St_IdPRegistration_App( ~sess, $A, $IdP, $Username, pw ) ▶₀ #x )
    case IdPSignUpInit
    by contradiction /* from formulas */
  qed
next
  case case_2
  by contradiction /* from formulas */
qed

rule (modulo E) OIDCAppCodeRedirect:
   [
   Browser( $Prover, drop, ~sess ),
   In( browserLaunch(~sess, cert(~signalApp), <'code', code, nonce>) ),
   !SignalAppDomain( $IdP, ~signalApp ), !Domain( $IdP, ~IdPKey ),
   SessionStore( $Prover, nonce, <$IdP, hash, salt, code_verifier> ),
   Fr( ~sessPost )
   ]
  --[
  AppReceiveCode( $Prover, $IdP, code ), SelfIssued( $Prover, nonce ),
  Neq( nonce, 'null' ), IsCode( code )
  ]->
   [
   Out( tlsClientMsg(~sessPost, cert(~IdPKey),
                     <'token_req', code, code_verifier>)
   ),
   St_OIDCApp_CodeReq( $Prover, $IdP, ~sessPost, hash, salt, code ),
   SessionStore( $Prover, 'null', 'null' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) OIDCIdPTokenIssue:
   [
   In( tlsClientMsg(~sess, cert(~IdPKey),
                    <'token_req', code, code_verifier>)
   ),
   !Domain( $IdP, ~IdPKey ), !IdPLtk( $IdP, sk ),
   St_OIDCIdP_Code( $IdP, $Username, code, hash, nonce, code_challenge )
   ]
  --[
  Eq( s256(code_verifier), code_challenge ),
  IdPIssueToken( <<$IdP, $Username, nonce, hash>, 
                  sign(<$IdP, $Username, nonce, hash>, sk)>
  ),
  IsToken( <<$IdP, $Username, nonce, hash>, 
            sign(<$IdP, $Username, nonce, hash>, sk)>
  ),
  UseCode( code ), UseCodeVerifierFor( code_verifier, $IdP )
  ]->
   [
   Out( tlsServerMsg(~sess, ~IdPKey,
                     <'token', <$IdP, $Username, nonce, hash>, 
                      sign(<$IdP, $Username, nonce, hash>, sk)>)
   )
   ]

  /* has exactly the trivial AC variant */

lemma CodeVerifierSecrecy [reuse]:
  all-traces
  "∀ verifier idp #x #y.
    ((UseCodeVerifierFor( verifier, idp ) @ #x) ∧
     (GenerateCodeVerifierFor( verifier, idp ) @ #y)) ⇒
    ((¬(∃ #z. !KU( verifier ) @ #z)) ∨
     (∃ domain #z. CompromisedDomain( idp, domain ) @ #z))"
/*
guarded formula characterizing all counter-examples:
"∃ verifier idp #x #y.
  (UseCodeVerifierFor( verifier, idp ) @ #x) ∧
  (GenerateCodeVerifierFor( verifier, idp ) @ #y)
 ∧
  (∃ #z. (!KU( verifier ) @ #z)) ∧
  (∀ domain #z. (CompromisedDomain( idp, domain ) @ #z) ⇒ ⊥)"
*/
by sorry

restriction Neq:
  "∀ a b #x. (Neq( a, b ) @ #x) ⇒ (¬(a = b))"
  // safety formula

lemma TokenFormatAndOTPLearning [sources]:
  all-traces
  "((((∀ token #i.
        (IsToken( token ) @ #i) ⇒
        (∃ first second user idp nonce hashed sk.
          ((((((token = <first, second>) ∧ (first = <idp, user, nonce, hashed>)) ∧
              ((∃ #h. (!KU( idp ) @ #h) ∧ (#h < #i)) ∨
               (∃ sk.1 #h. ClaimIdPKey( idp, sk.1 ) @ #h))) ∧
             ((∃ #h. (!KU( user ) @ #h) ∧ (#h < #i)) ∨
              (∃ party pw #h. ClaimUsername( party, idp, user, pw ) @ #h))) ∧
            ((∃ #h. (!KU( nonce ) @ #h) ∧ (#h < #i)) ∨
             (∃ #h. GenNonce( nonce ) @ #h))) ∧
           ((∃ #h. (!KU( hashed ) @ #h) ∧ (#h < #i)) ∨
            (∃ fp salt. hashed = h(fp, salt)))) ∧
          (second = sign(first, sk)))) ∧
      (∀ nonce #i.
        (IsNonce( nonce ) @ #i) ⇒
        ((∃ #h. (!KU( nonce ) @ #h) ∧ (#h < #i)) ∨
         (∃ #h. GenNonce( nonce ) @ #h)))) ∧
     (∀ code #i.
       (IsCode( code ) @ #i) ⇒
       ((∃ #h. (!KU( code ) @ #h) ∧ (#h < #i)) ∨
        (∃ idp #h. GenCode( idp, code ) @ #h)))) ∧
    (∀ chall #i.
      (OTPRespond( chall ) @ #i) ⇒
      ((∃ #j. (OTPChallenge( chall ) @ #j) ∧ (#j < #i)) ∨
       (∃ #j. (!KU( chall ) @ #j) ∧ (#j < #i))))) ∧
   (∀ ltk #i.
     (ShareSignalKey( ltk ) @ #i) ⇒
     ((∃ sk #j. (IsSignalKey( sk ) @ #j) ∧ (ltk = pk(sk))) ∨
      (∃ #j. (!KU( ltk ) @ #j) ∧ (#j < #i))))"
/*
guarded formula characterizing all counter-examples:
"((∃ token #i.
    (IsToken( token ) @ #i)
   ∧
    ∀ first second user idp nonce hashed sk.
     (token = <first, second>) ∧
     (first = <idp, user, nonce, hashed>) ∧
     (second = sign(first, sk))
    ⇒
     (((∀ #h. (!KU( idp ) @ #h) ⇒ ¬(#h < #i)) ∧
       (∀ sk.1 #h. (ClaimIdPKey( idp, sk.1 ) @ #h) ⇒ ⊥)) ∨
      ((∀ #h. (!KU( user ) @ #h) ⇒ ¬(#h < #i)) ∧
       (∀ party pw #h. (ClaimUsername( party, idp, user, pw ) @ #h) ⇒ ⊥)) ∨
      ((∀ #h. (!KU( nonce ) @ #h) ⇒ ¬(#h < #i)) ∧
       (∀ #h. (GenNonce( nonce ) @ #h) ⇒ ⊥)) ∨
      ((∀ #h. (!KU( hashed ) @ #h) ⇒ ¬(#h < #i)) ∧
       (∀ fp salt. (hashed = h(fp, salt)) ⇒ ⊥)))) ∨
  (∃ nonce #i.
    (IsNonce( nonce ) @ #i)
   ∧
    (∀ #h. (!KU( nonce ) @ #h) ⇒ ¬(#h < #i)) ∧
    (∀ #h. (GenNonce( nonce ) @ #h) ⇒ ⊥)) ∨
  (∃ code #i.
    (IsCode( code ) @ #i)
   ∧
    (∀ #h. (!KU( code ) @ #h) ⇒ ¬(#h < #i)) ∧
    (∀ idp #h. (GenCode( idp, code ) @ #h) ⇒ ⊥)) ∨
  (∃ chall #i.
    (OTPRespond( chall ) @ #i)
   ∧
    (∀ #j. (OTPChallenge( chall ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j. (!KU( chall ) @ #j) ⇒ ¬(#j < #i))) ∨
  (∃ ltk #i.
    (ShareSignalKey( ltk ) @ #i)
   ∧
    (∀ sk #j. (IsSignalKey( sk ) @ #j) ∧ (ltk = pk(sk)) ⇒ ⊥) ∧
    (∀ #j. (!KU( ltk ) @ #j) ⇒ ¬(#j < #i))))"
*/
by sorry

rule (modulo E) OIDCTokenForward:
   [
   St_OIDCApp_CodeReq( $Prover, $IdP, ~sessPost, hash, salt, code ),
   !Domain( $IdP, ~IdPKey ), !SignalDomain( ~signal ),
   In( tlsServerMsg(~sess1, ~IdPKey, <'idp_pk_response', pkIdP>) ),
   In( tlsServerMsg(~sess2, ~signal,
                    <'signal_pk_response', phone, pkVerifier>)
   ),
   In( tlsServerMsg(~sessPost, ~IdPKey,
                    <'token', <$IdP, username, nonce, hash>, signature>)
   ),
   !SignalLtkApp( $Prover, skProver )
   ]
  --[
  Eq( h(fingerprint(<pk(skProver), pkVerifier>), salt), hash ),
  Eq( verify(signature, <$IdP, username, nonce, hash>, pkIdP), true ),
  Forward( $Prover, <<$IdP, username, nonce, hash>, signature> ),
  IsToken( <<$IdP, username, nonce, hash>, signature> ), UsedCode( code )
  ]->
   [
   Out( signalMsg(skProver, pkVerifier,
                  <'fwd_token', <<$IdP, username, nonce, hash>, signature>, salt>)
   ),
   Out( code )
   ]

  /*
  rule (modulo AC) OIDCTokenForward:
     [
     St_OIDCApp_CodeReq( $Prover, $IdP, ~sessPost, hash, salt, code ),
     !Domain( $IdP, ~IdPKey ), !SignalDomain( ~signal ),
     In( tlsServerMsg(~sess1, ~IdPKey, <'idp_pk_response', pkIdP>) ),
     In( tlsServerMsg(~sess2, ~signal,
                      <'signal_pk_response', phone, pkVerifier>)
     ),
     In( tlsServerMsg(~sessPost, ~IdPKey,
                      <'token', <$IdP, username, nonce, hash>, signature>)
     ),
     !SignalLtkApp( $Prover, skProver )
     ]
    --[
    Eq( h(fingerprint(<pk(skProver), pkVerifier>), salt), hash ),
    Eq( z, true ),
    Forward( $Prover, <<$IdP, username, nonce, hash>, signature> ),
    IsToken( <<$IdP, username, nonce, hash>, signature> ), UsedCode( code )
    ]->
     [
     Out( signalMsg(skProver, pkVerifier,
                    <'fwd_token', <<$IdP, username, nonce, hash>, signature>, salt>)
     ),
     Out( code )
     ]
    variants (modulo AC)
    1. $IdP  = $IdP.40
       hash  = hash.48
       nonce = nonce.49
       pkIdP = pkIdP.51
       signature
             = signature.54
       username
             = username.56
       z     = verify(signature.54, <$IdP.40, username.56, nonce.49, hash.48>,
                      pkIdP.51)
    
    2. $IdP  = $IdP.101
       hash  = hash.109
       nonce = nonce.110
       pkIdP = pk(x.200)
       signature
             = sign(<$IdP.101, username.117, nonce.110, hash.109>, x.200)
       username
             = username.117
       z     = true
  */

lemma CodeIsSingleUse [use_induction, reuse]:
  all-traces
  "∀ idp code #a #b #x #y.
    ((((GenCode( idp, code ) @ #a) ∧ (UsedCode( code ) @ #b)) ∧
      (UseCode( code ) @ #x)) ∧
     (UseCode( code ) @ #y)) ⇒
    (((#x = #y) ∨ (∃ domain #x.1. CompromisedDomain( idp, domain ) @ #x.1)) ∨
     (∃ signalApp domain #x.1 #y.1.
       (IsSignalAppFor( idp, signalApp ) @ #x.1) ∧
       (CompromisedDomain( signalApp, domain ) @ #y.1)))"
/*
guarded formula characterizing all counter-examples:
"∃ idp code #a #b #x #y.
  (GenCode( idp, code ) @ #a) ∧
  (UsedCode( code ) @ #b) ∧
  (UseCode( code ) @ #x) ∧
  (UseCode( code ) @ #y)
 ∧
  (¬(#x = #y)) ∧
  (∀ domain #x.1. (CompromisedDomain( idp, domain ) @ #x.1) ⇒ ⊥) ∧
  (∀ signalApp domain #x.1 #y.1.
    (IsSignalAppFor( idp, signalApp ) @ #x.1) ∧
    (CompromisedDomain( signalApp, domain ) @ #y.1)
   ⇒
    ⊥)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (#x.1 < #y)  ∥ (#y < #x.1) )
    case case_1
    solve( St_OIDCServer_Auth( $IdP, ~sess, hash, nonce, code_challenge
           ) ▶₀ #a )
      case OIDCIdPInit
      solve( St_OIDCApp_CodeReq( $Prover, $IdP.1, ~sessPost,
                                 h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
             ) ▶₀ #b )
        case OIDCAppCodeRedirect_case_1
        solve( St_OIDCIdP_Code( $IdP.3, $Username.2, ~code, hash.2, nonce.3,
                                s256(code_verifier.1)
               ) ▶₃ #x.1 )
          case OIDCIdPIssueCode
          solve( St_OIDCIdP_Code( $IdP.2, $Username.1, ~code, hash.1, nonce.2,
                                  s256(code_verifier.1)
                 ) ▶₃ #y )
            case OIDCIdPIssueCode
            by contradiction /* cyclic */
          qed
        qed
      next
        case OIDCAppCodeRedirect_case_2
        solve( St_OIDCIdP_Code( $IdP.3, $Username.2, ~code, hash.2, nonce.3,
                                s256(code_verifier.1)
               ) ▶₃ #x.1 )
          case OIDCIdPIssueCode
          solve( St_OIDCIdP_Code( $IdP.2, $Username.1, ~code, hash.1, nonce.2,
                                  s256(code_verifier.1)
                 ) ▶₃ #y )
            case OIDCIdPIssueCode
            by contradiction /* cyclic */
          qed
        qed
      next
        case OIDCAppCodeRedirect_case_3
        solve( St_OIDCIdP_Code( $IdP.3, $Username.2, ~code, hash.2, nonce.3,
                                s256(code_verifier.1)
               ) ▶₃ #x.1 )
          case OIDCIdPIssueCode
          solve( St_OIDCIdP_Code( $IdP.2, $Username.1, ~code, hash.1, nonce.2,
                                  s256(code_verifier.1)
                 ) ▶₃ #y )
            case OIDCIdPIssueCode
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( St_OIDCServer_Auth( $IdP, ~sess, hash, nonce, code_challenge
           ) ▶₀ #a )
      case OIDCIdPInit
      solve( St_OIDCApp_CodeReq( $Prover, $IdP.1, ~sessPost,
                                 h(fingerprint(<pk(skProver), pkVerifier>), salt), salt, ~code
             ) ▶₀ #b )
        case OIDCAppCodeRedirect_case_1
        solve( St_OIDCIdP_Code( $IdP.3, $Username.2, ~code, hash.2, nonce.3,
                                s256(code_verifier.1)
               ) ▶₃ #x.1 )
          case OIDCIdPIssueCode
          solve( St_OIDCIdP_Code( $IdP.2, $Username.1, ~code, hash.1, nonce.2,
                                  s256(code_verifier.1)
                 ) ▶₃ #y )
            case OIDCIdPIssueCode
            by contradiction /* cyclic */
          qed
        qed
      next
        case OIDCAppCodeRedirect_case_2
        solve( St_OIDCIdP_Code( $IdP.3, $Username.2, ~code, hash.2, nonce.3,
                                s256(code_verifier.1)
               ) ▶₃ #x.1 )
          case OIDCIdPIssueCode
          solve( St_OIDCIdP_Code( $IdP.2, $Username.1, ~code, hash.1, nonce.2,
                                  s256(code_verifier.1)
                 ) ▶₃ #y )
            case OIDCIdPIssueCode
            by contradiction /* cyclic */
          qed
        qed
      next
        case OIDCAppCodeRedirect_case_3
        solve( St_OIDCIdP_Code( $IdP.3, $Username.2, ~code, hash.2, nonce.3,
                                s256(code_verifier.1)
               ) ▶₃ #x.1 )
          case OIDCIdPIssueCode
          solve( St_OIDCIdP_Code( $IdP.2, $Username.1, ~code, hash.1, nonce.2,
                                  s256(code_verifier.1)
                 ) ▶₃ #y )
            case OIDCIdPIssueCode
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  qed
qed

rule (modulo E) OIDCTokenReceive:
   [
   !SignalLtkApp( $Verifier, skVerifier ),
   In( signalMsg(skSender, pk(skVerifier),
                 <'fwd_token', <<IdP, username, nonce, hash>, signature>, salt>)
   ),
   !Domain( IdP, ~IdPKey )
   ]
  -->
   [
   St_OIDCVerifier( $Verifier, pk(skSender), skVerifier,
                    <<IdP, username, nonce, hash>, signature>, salt
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) OIDCTokenVerify:
   [
   St_OIDCVerifier( $Verifier, pkProver, skVerifier,
                    <<IdP, username, nonce, hash>, signature>, salt
   ),
   !Domain( IdP, ~IdPKey ),
   In( tlsServerMsg(~sess, ~IdPKey, <'idp_pk_response', pkIdP>) )
   ]
  --[
  Eq( h(fingerprint(<pkProver, pk(skVerifier)>), salt), hash ),
  Eq( verify(signature, <IdP, username, nonce, hash>, pkIdP), true ),
  DidNotIssueSelf( $Verifier, nonce ),
  AssociateAs( pkProver, IdP, username, pk(skVerifier) )
  ]->
   [ ]

  /*
  rule (modulo AC) OIDCTokenVerify:
     [
     St_OIDCVerifier( $Verifier, pkProver, skVerifier,
                      <<IdP, username, nonce, hash>, signature>, salt
     ),
     !Domain( IdP, ~IdPKey ),
     In( tlsServerMsg(~sess, ~IdPKey, <'idp_pk_response', pkIdP>) )
     ]
    --[
    Eq( h(fingerprint(<pkProver, pk(skVerifier)>), salt), hash ),
    Eq( z, true ), DidNotIssueSelf( $Verifier, nonce ),
    AssociateAs( pkProver, IdP, username, pk(skVerifier) )
    ]->
     [ ]
    variants (modulo AC)
    1. IdP   = IdP.16
       hash  = hash.17
       nonce = nonce.18
       pkIdP = pkIdP.19
       signature
             = signature.22
       username
             = username.24
       z     = verify(signature.22, <IdP.16, username.24, nonce.18, hash.17>,
                      pkIdP.19)
    
    2. IdP   = IdP.22
       hash  = hash.23
       nonce = nonce.24
       pkIdP = pk(x.36)
       signature
             = sign(<IdP.22, username.30, nonce.24, hash.23>, x.36)
       username
             = username.30
       z     = true
  */

restriction CheckNonceReplay:
  "∀ verifier nonce #t1.
    (DidNotIssueSelf( verifier, nonce ) @ #t1) ⇒
    (¬(∃ #t2. SelfIssued( verifier, nonce ) @ #t2))"
  // safety formula

restriction Equality:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

lemma SocialAuthentication:
  all-traces
  "∀ pkI idp username pkV prover accountHolder pw skI #i #j #k.
    ((((AssociateAs( pkI, idp, username, pkV ) @ #i) ∧
       (ClaimSignalKey( prover, skI ) @ #j)) ∧
      (pkI = pk(skI))) ∧
     (ClaimUsername( accountHolder, idp, username, pw ) @ #k)) ⇒
    ((((∃ salt hash nonce code_challenge sess #k.1 #l #m.
         ((((((prover = accountHolder) ∧
              (OIDCRequest( prover, idp, pkV, salt, hash, nonce, code_challenge
               ) @ #k.1)) ∧
             (#k.1 < #i)) ∧
            (AuthenticationRequest( sess, idp, hash, nonce, code_challenge ) @ #l)) ∧
           (#l < #i)) ∧
          (AuthenticationResponse( sess, prover, idp, username ) @ #m)) ∧
         (#m < #i)) ∨
       (∃ domain #k.1. CompromisedDomain( idp, domain ) @ #k.1)) ∨
      (∃ signalApp domain #k.1 #l.
        (IsSignalAppFor( idp, signalApp ) @ #k.1) ∧
        (CompromisedDomain( signalApp, domain ) @ #l))) ∨
     (∃ party #k.1. CompromisedAccount( party, idp, username ) @ #k.1))"
/*
guarded formula characterizing all counter-examples:
"∃ pkI idp username pkV prover accountHolder pw skI #i #j #k.
  (AssociateAs( pkI, idp, username, pkV ) @ #i) ∧
  (ClaimSignalKey( prover, skI ) @ #j) ∧
  (pkI = pk(skI)) ∧
  (ClaimUsername( accountHolder, idp, username, pw ) @ #k)
 ∧
  (∀ salt hash nonce code_challenge sess #k.1 #l #m.
    (prover = accountHolder) ∧
    (OIDCRequest( prover, idp, pkV, salt, hash, nonce, code_challenge
     ) @ #k.1) ∧
    (AuthenticationRequest( sess, idp, hash, nonce, code_challenge ) @ #l) ∧
    (AuthenticationResponse( sess, prover, idp, username ) @ #m)
   ⇒
    ((¬(#k.1 < #i)) ∨ (¬(#l < #i)) ∨ (¬(#m < #i)))) ∧
  (∀ domain #k.1. (CompromisedDomain( idp, domain ) @ #k.1) ⇒ ⊥) ∧
  (∀ signalApp domain #k.1 #l.
    (IsSignalAppFor( idp, signalApp ) @ #k.1) ∧
    (CompromisedDomain( signalApp, domain ) @ #l)
   ⇒
    ⊥) ∧
  (∀ party #k.1. (CompromisedAccount( party, idp, username ) @ #k.1) ⇒ ⊥)"
*/
by sorry

lemma Executability:
  exists-trace
  "∃ pkI idp username pkV prover skI accountHolder pw salt hash nonce
     code_challenge sess #i #j #k #l #m #n.
    ((((((((((((((AssociateAs( pkI, idp, username, pkV ) @ #i) ∧
                 (ClaimSignalKey( prover, skI ) @ #j)) ∧
                (pkI = pk(skI))) ∧
               (ClaimUsername( accountHolder, idp, username, pw ) @ #k)) ∧
              (prover = accountHolder)) ∧
             (OIDCRequest( prover, idp, pkV, salt, hash, nonce, code_challenge
              ) @ #l)) ∧
            (#l < #i)) ∧
           (AuthenticationRequest( sess, idp, hash, nonce, code_challenge ) @ #m)) ∧
          (#m < #i)) ∧
         (AuthenticationResponse( sess, prover, idp, username ) @ #n)) ∧
        (#n < #i)) ∧
       (¬(∃ d s #x. CompromisedDomain( d, s ) @ #x))) ∧
      (¬(∃ u s #x. CompromisedSignal( u, s ) @ #x))) ∧
     (¬(∃ u idp.1 n.1 #x. CompromisedAccount( u, idp.1, n.1 ) @ #x))) ∧
    (¬(∃ #x. AdversaryLinkClick( ) @ #x))"
/*
guarded formula characterizing all satisfying traces:
"∃ pkI idp username pkV prover skI accountHolder pw salt hash nonce
   code_challenge sess #i #j #k #l #m #n.
  (AssociateAs( pkI, idp, username, pkV ) @ #i) ∧
  (ClaimSignalKey( prover, skI ) @ #j) ∧
  (pkI = pk(skI)) ∧
  (ClaimUsername( accountHolder, idp, username, pw ) @ #k) ∧
  (prover = accountHolder) ∧
  (OIDCRequest( prover, idp, pkV, salt, hash, nonce, code_challenge
   ) @ #l) ∧
  (AuthenticationRequest( sess, idp, hash, nonce, code_challenge ) @ #m) ∧
  (AuthenticationResponse( sess, prover, idp, username ) @ #n)
 ∧
  (#l < #i) ∧
  (#m < #i) ∧
  (#n < #i) ∧
  (∀ d s #x. (CompromisedDomain( d, s ) @ #x) ⇒ ⊥) ∧
  (∀ u s #x. (CompromisedSignal( u, s ) @ #x) ⇒ ⊥) ∧
  (∀ u idp.1 n.1 #x. (CompromisedAccount( u, idp.1, n.1 ) @ #x) ⇒ ⊥) ∧
  (∀ #x. (AdversaryLinkClick( ) @ #x) ⇒ ⊥)"
*/
by sorry

/* All well-formedness checks were successful. */

end