theory SignalOIDC begin

// Function signature and definition of the equational theory E

functions: browserForward/3, cert/1, forwardReceive/2, fst/1, h/2,
           pair/2, pk/1, s256/1, sign/2, signalMsg/3, signalRead/2, snd/1,
           tlsClientMsg/3, tlsClientReceive/2, tlsServerMsg/3, tlsServerReceive/2,
           trim/1, true/0, verify/3
equations:
    forwardReceive(browserForward(~sess, cert(~domain), m), ~domain) = ~sess,
    forwardReceive(browserForward(~sess, cert(~domain), m), ~domain) = m,
    fst(<x.1, x.2>) = x.1,
    signalRead(signalMsg(~senderSk, pk(~receiverSk), m), ~receiverSk) = m,
    snd(<x.1, x.2>) = x.2,
    tlsClientReceive(tlsServerMsg(~sess, ~domain, m), ~sess) = m,
    tlsServerReceive(tlsClientMsg(~sess, cert(~domain), m), ~domain) = ~sess,
    tlsServerReceive(tlsClientMsg(~sess, cert(~domain), m), ~domain) = m,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true

heuristic: o "./oracle.py"

rule (modulo E) Phone:
   [ ] --[ ClaimNumber( $A, $Number ) ]-> [ !Phone( $A, $Number ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) TLSSetup:
   [ Fr( ~domain ) ]
  --[ OnlyOneDomain( $A ) ]->
   [ !Domain( $A, ~domain ), Out( cert(~domain) ) ]

  /* has exactly the trivial AC variant */

restriction OnlyOneDomain:
  "∀ domain #x #y.
    ((OnlyOneDomain( domain ) @ #x) ∧ (OnlyOneDomain( domain ) @ #y)) ⇒
    (#x = #y)"
  // safety formula

rule (modulo E) DomainCompromise:
   [ !Domain( $A, ~domain ) ]
  --[ CompromisedDomain( $A, ~domain ) ]->
   [ Out( ~domain ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) SignalServer:
   [ !Domain( $Signal, ~domain ) ]
  --[ OnlyOnceSignal( ), IsSignal( $Signal ) ]->
   [ !SignalDomain( ~domain ) ]

  /* has exactly the trivial AC variant */

restriction OnlyOnceSignal:
  "∀ #i #j.
    ((OnlyOnceSignal( ) @ #i) ∧ (OnlyOnceSignal( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

rule (modulo E) SignalClient:
   [ !Domain( $IdP, ~secret ), !Domain( $SignalClient, ~domain ) ]
  --[
  OnlyOnceSignalClientIdP( $IdP ), OnlyOnceSignalClient( $SignalClient ),
  IsSignalClientFor( $IdP, $SignalClient )
  ]->
   [ !SignalClientDomain( $IdP, ~domain ) ]

  /* has exactly the trivial AC variant */

restriction OnlyOnceSignalClientIdP:
  "∀ idp #i #j.
    ((OnlyOnceSignalClientIdP( idp ) @ #i) ∧
     (OnlyOnceSignalClientIdP( idp ) @ #j)) ⇒
    (#i = #j)"
  // safety formula

restriction OnlyOnceSignalClient:
  "∀ c #i #j.
    ((OnlyOnceSignalClient( c ) @ #i) ∧ (OnlyOnceSignalClient( c ) @ #j)) ⇒
    (#i = #j)"
  // safety formula

rule (modulo E) SignalRegister:
   [ Fr( sk ), Fr( ~sess ), !Phone( $A, $Number ), !SignalDomain( ~signal )
   ]
  --[ SignalKeyClient( $A, sk ) ]->
   [
   Out( tlsClientMsg(~sess, cert(~signal), <'signal_req', $Number, pk(sk)>)
   ),
   Out( pk(sk) ), St_SignalReg_Client( $A, ~sess, sk )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) SignalChallenge:
   [
   !SignalDomain( ~signal ),
   In( tlsClientMsg(~sess, cert(~signal), <'signal_req', $Number, ltk>) ),
   Fr( challenge )
   ]
  --[ OTPChallenge( challenge ) ]->
   [
   Out( <'otp', challenge> ),
   St_SigReg_Server( ~sess, $Number, ltk, challenge )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) SignalRespond:
   [
   In( <'otp', challenge> ), !SignalDomain( ~signal ),
   St_SignalReg_Client( $A, ~sess, sk )
   ]
  --[ OTPRespond( challenge ) ]->
   [
   Out( tlsClientMsg(~sess, cert(~signal), <'otp_respond', challenge>) ),
   St_SignalReg_ClientWait( $A, ~sess, sk )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) SignalAck:
   [
   !SignalDomain( ~signal ),
   In( tlsClientMsg(~sess, cert(~signal), <'otp_respond', challenge>) ),
   St_SigReg_Server( ~sess, phone, ltk, challenge )
   ]
  --[ SignalKeyServer( phone, ltk ) ]->
   [
   !SignalLtkServer( phone, ltk ),
   Out( tlsServerMsg(~sess, ~signal, 'signal_ack') )
   ]

  /* has exactly the trivial AC variant */

restriction KeysUnique:
  "∀ phone ltk1 ltk2 #a #b.
    ((SignalKeyServer( phone, ltk1 ) @ #a) ∧
     (SignalKeyServer( phone, ltk2 ) @ #b)) ⇒
    ((#a = #b) ∧ (ltk1 = ltk2))"
  // safety formula

rule (modulo E) SignalFin:
   [
   !SignalDomain( ~signal ), St_SignalReg_ClientWait( $A, ~sess, sk ),
   In( tlsServerMsg(~sess, ~signal, 'signal_ack') )
   ]
  --[ ClaimSignalKey( $A, sk ) ]->
   [ !SignalLtkClient( $A, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) SignalCompromise:
   [ !SignalLtkClient( $A, ~sk ) ]
  --[ CompromisedSignal( $A, ~sk ) ]->
   [ Out( ~sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) IdPSetup:
   [ Fr( sk ) ]
  --[ ClaimIdPKey( $IdP, sk ) ]->
   [ !IdPLtk( $IdP, sk ), Out( pk(sk) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) IdPPkDistribute:
   [
   !IdPLtk( $IdP, sk ), !Domain( $IdP, ~IdPKey ),
   In( tlsClientMsg(~sess, cert(~IdPKey), 'pk_req') )
   ]
  -->
   [ Out( tlsServerMsg(~sess, ~IdPKey, <'pk_response', pk(sk)>) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) IdPSignUpInit:
   [ Fr( pw ), Fr( ~sess ), !Domain( $IdP, ~IdPKey ) ]
  --[ UsernameClient( $A, $IdP, $Username, pw ) ]->
   [
   Out( tlsClientMsg(~sess, cert(~IdPKey), <'sign_up', $Username, pw>) ),
   St_IdPRegistration_Client( ~sess, $A, $IdP, $Username, pw )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) IdPSignUpServer:
   [
   !Domain( $IdP, ~IdPKey ),
   In( tlsClientMsg(~sess, cert(~IdPKey), <'sign_up', username, pw>) )
   ]
  --[
  UsernameServer( $IdP, username, pw ), AccountsUnique( $IdP, username )
  ]->
   [
   !IdPAccountServer( $IdP, username, pw ),
   Out( tlsServerMsg(~sess, ~IdPKey, 'idp_ack') )
   ]

  /* has exactly the trivial AC variant */

restriction AccountsUnique:
  "∀ idp u #a #b.
    ((AccountsUnique( idp, u ) @ #a) ∧ (AccountsUnique( idp, u ) @ #b)) ⇒
    (#a = #b)"
  // safety formula

rule (modulo E) IdPSignUpFin:
   [
   St_IdPRegistration_Client( ~sess, $A, $IdP, $Username, pw ),
   !Domain( $IdP, ~IdPKey ), In( tlsServerMsg(~sess, ~IdPKey, 'idp_ack') )
   ]
  --[ ClaimUsername( $A, $IdP, $Username, pw ) ]->
   [ !IdPAccountClient( $A, $IdP, $Username, pw ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) IdPAccountCompromise:
   [ !IdPAccountClient( $A, $IdP, $Username, ~pw ) ]
  --[ CompromisedAccount( $A, $IdP, $Username ) ]->
   [ Out( ~pw ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) InitSessionStore:
   [ ]
  --[ OnlyOnceInitSessionStore( $User ) ]->
   [ SessionStore( $User, 'null', 'null' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ClearSessionStore:
   [ SessionStore( $User, x, y ) ]
  -->
   [ SessionStore( $User, 'null', 'null' ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

restriction OnlyOnceInitSessionStore:
  "∀ u #x #y.
    ((OnlyOnceInitSessionStore( u ) @ #x) ∧
     (OnlyOnceInitSessionStore( u ) @ #y)) ⇒
    (#x = #y)"
  // safety formula

rule (modulo E) OIDCClientInit:
   [
   !Domain( $IdP, ~IdPKey ), !SignalLtkClient( $Initiator, skInitiator ),
   !IdPAccountClient( $Initiator, $IdP, username, pw ),
   !SignalLtkServer( numVerifier, pkVerifier ),
   SessionStore( $Initiator, drop1, drop2 ), Fr( salt ), Fr( nonce ),
   Fr( code_verifier ), Fr( ~sess )
   ]
  --[
  OIDCRequest( $Initiator, $IdP, pkVerifier, salt,
               h(<trim(pk(skInitiator)), trim(pkVerifier)>, salt), nonce,
               s256(code_verifier)
  ),
  GenNonce( nonce ), GenBrowserSession( $Initiator, $IdP, ~sess ),
  GenerateCodeVerifierFor( code_verifier, $IdP )
  ]->
   [
   Out( tlsClientMsg(~sess, cert(~IdPKey),
                     <'oidc_req', h(<trim(pk(skInitiator)), trim(pkVerifier)>, salt), nonce, 
                      s256(code_verifier)>)
   ),
   Out( <h(<trim(pk(skInitiator)), trim(pkVerifier)>, salt), nonce, 
         s256(code_verifier)>
   ),
   SessionStore( $Initiator, nonce,
                 <$IdP, h(<trim(pk(skInitiator)), trim(pkVerifier)>, salt), salt, 
                  code_verifier>
   ),
   Browser( $Initiator, $IdP, ~sess )
   ]

  // loop breaker: [4]
  /* has exactly the trivial AC variant */

rule (modulo E) OIDCAdversaryInit:
   [
   !Domain( $IdP, ~IdPKey ),
   In( <$IdP, $Initiator, hash, nonce, code_challenge> ), Fr( ~sess )
   ]
  --[ AdversaryOIDCRequest( ), GenBrowserSession( $Initiator, $IdP, ~sess )
  ]->
   [
   Out( tlsClientMsg(~sess, cert(~IdPKey),
                     <'oidc_req', hash, nonce, code_challenge>)
   ),
   Browser( $Initiator, $IdP, ~sess )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) OIDCIdPInit:
   [
   !Domain( $IdP, ~IdPKey ),
   In( tlsClientMsg(~sess, cert(~IdPKey),
                    <'oidc_req', hash, nonce, code_challenge>)
   )
   ]
  --[
  AuthenticationRequest( ~sess, $IdP, hash, nonce, code_challenge ),
  IsNonce( nonce )
  ]->
   [
   Out( tlsServerMsg(~sess, ~IdPKey, 'auth_req') ),
   St_OIDCServer_Auth( $IdP, ~sess, hash, nonce, code_challenge )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) OIDCClientLogin:
   [
   Browser( $Initiator, $IdP, ~sess ), !Domain( $IdP, ~IdPKey ),
   In( tlsServerMsg(~sess, ~IdPKey, 'auth_req') ),
   !IdPAccountClient( $Initiator, $IdP, $Username, pw )
   ]
  --[
  AuthenticationResponse( ~sess, $Initiator, $IdP, $Username ),
  UseBrowserSession( $Initiator, $IdP, ~sess )
  ]->
   [
   Out( tlsClientMsg(~sess, cert(~IdPKey), <'login', $Username, pw>) ),
   Browser( $Initiator, $IdP, ~sess )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

lemma BrowserSessionSources [reuse, use_induction]:
  all-traces
  "∀ user domain sess #x.
    (UseBrowserSession( user, domain, sess ) @ #x) ⇒
    (∃ user.1 domain.1 #y.
      (GenBrowserSession( user.1, domain.1, sess ) @ #y) ∧ (#y < #x))"
/*
guarded formula characterizing all counter-examples:
"∃ user domain sess #x.
  (UseBrowserSession( user, domain, sess ) @ #x)
 ∧
  ∀ user.1 domain.1 #y.
   (GenBrowserSession( user.1, domain.1, sess ) @ #y) ⇒ ¬(#y < #x)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#x))  ∥
         (∃ user domain #y.
           (GenBrowserSession( user, domain, ~sess ) @ #y)
          ∧
           (¬(last(#y))) ∧ (#y < #x)) )
    case case_1
    solve( Browser( $Initiator, $IdP, ~sess ) ▶₀ #x )
      case LinkClick
      by contradiction /* from formulas */
    next
      case OIDCAdversaryInit
      by contradiction /* from formulas */
    next
      case OIDCClientInit
      by contradiction /* from formulas */
    next
      case OIDCClientLogin
      by contradiction /* from formulas */
    qed
  next
    case case_2
    by contradiction /* from formulas */
  qed
qed

lemma BrowserSessionBinding [reuse, use_induction]:
  all-traces
  "∀ user1 user2 domain1 domain2 sess #x #y.
    ((UseBrowserSession( user1, domain1, sess ) @ #x) ∧
     (GenBrowserSession( user2, domain2, sess ) @ #y)) ⇒
    ((user1 = user2) ∧ (domain1 = domain2))"
/*
guarded formula characterizing all counter-examples:
"∃ user1 user2 domain1 domain2 sess #x #y.
  (UseBrowserSession( user1, domain1, sess ) @ #x) ∧
  (GenBrowserSession( user2, domain2, sess ) @ #y)
 ∧
  ((¬(user1 = user2)) ∨ (¬(domain1 = domain2)))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( GenBrowserSession( user2, domain2, ~sess ) @ #y.2 )
    case LinkClick
    solve( (¬($Initiator = $Initiator.1))  ∥ (¬($IdP = $Party)) )
      case case_1
      solve( (last(#y))  ∥ (last(#x))  ∥
             (($Initiator = $Initiator.1) ∧ ($IdP = $Party)) )
        case case_1
        solve( GenBrowserSession( $Initiator, $IdP, ~sess ) @ #y.1 )
          case LinkClick
          by contradiction /* from formulas */
        qed
      next
        case case_2
        solve( GenBrowserSession( user, domain.1, ~sess ) @ #y.1 )
          case LinkClick
          solve( Browser( $Initiator, $IdP, ~sess ) ▶₀ #x )
            case LinkClick
            by contradiction /* from formulas */
          next
            case OIDCClientLogin
            by contradiction /* from formulas */
          qed
        qed
      next
        case case_3
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( (last(#y))  ∥ (last(#x))  ∥
             (($Initiator = $Initiator.1) ∧ ($IdP = $Party)) )
        case case_1
        solve( GenBrowserSession( $Initiator, $IdP, ~sess ) @ #y.1 )
          case LinkClick
          by contradiction /* from formulas */
        qed
      next
        case case_2
        solve( GenBrowserSession( user, domain.1, ~sess ) @ #y.1 )
          case LinkClick
          solve( Browser( $Initiator, $IdP, ~sess ) ▶₀ #x )
            case LinkClick
            by contradiction /* from formulas */
          next
            case OIDCClientLogin
            by contradiction /* from formulas */
          qed
        qed
      next
        case case_3
        by contradiction /* from formulas */
      qed
    qed
  next
    case OIDCAdversaryInit
    solve( (¬($Initiator = $Initiator.1))  ∥ (¬($IdP = $IdP.1)) )
      case case_1
      solve( (last(#y))  ∥ (last(#x))  ∥
             (($Initiator = $Initiator.1) ∧ ($IdP = $IdP.1)) )
        case case_1
        solve( GenBrowserSession( $Initiator, $IdP, ~sess ) @ #y.1 )
          case OIDCAdversaryInit
          by contradiction /* from formulas */
        qed
      next
        case case_2
        solve( GenBrowserSession( user, domain, ~sess ) @ #y.1 )
          case OIDCAdversaryInit
          solve( Browser( $Initiator, $IdP, ~sess ) ▶₀ #x )
            case OIDCAdversaryInit
            by contradiction /* from formulas */
          next
            case OIDCClientLogin
            by contradiction /* from formulas */
          qed
        qed
      next
        case case_3
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( (last(#y))  ∥ (last(#x))  ∥
             (($Initiator = $Initiator.1) ∧ ($IdP = $IdP.1)) )
        case case_1
        solve( GenBrowserSession( $Initiator, $IdP, ~sess ) @ #y.1 )
          case OIDCAdversaryInit
          by contradiction /* from formulas */
        qed
      next
        case case_2
        solve( GenBrowserSession( user, domain, ~sess ) @ #y.1 )
          case OIDCAdversaryInit
          solve( Browser( $Initiator, $IdP, ~sess ) ▶₀ #x )
            case OIDCAdversaryInit
            by contradiction /* from formulas */
          next
            case OIDCClientLogin
            by contradiction /* from formulas */
          qed
        qed
      next
        case case_3
        by contradiction /* from formulas */
      qed
    qed
  next
    case OIDCClientInit
    solve( (¬($Initiator = $Initiator.1))  ∥ (¬($IdP = $IdP.1)) )
      case case_1
      solve( (last(#y))  ∥ (last(#x))  ∥
             (($Initiator = $Initiator.1) ∧ ($IdP = $IdP.1)) )
        case case_1
        solve( GenBrowserSession( $Initiator, $IdP, ~sess ) @ #y.1 )
          case OIDCClientInit
          by contradiction /* from formulas */
        qed
      next
        case case_2
        solve( GenBrowserSession( user, domain, ~sess ) @ #y.1 )
          case OIDCClientInit
          solve( Browser( $Initiator, $IdP, ~sess ) ▶₀ #x )
            case OIDCClientInit
            by contradiction /* from formulas */
          next
            case OIDCClientLogin
            by contradiction /* from formulas */
          qed
        qed
      next
        case case_3
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( (last(#y))  ∥ (last(#x))  ∥
             (($Initiator = $Initiator.1) ∧ ($IdP = $IdP.1)) )
        case case_1
        solve( GenBrowserSession( $Initiator, $IdP, ~sess ) @ #y.1 )
          case OIDCClientInit
          by contradiction /* from formulas */
        qed
      next
        case case_2
        solve( GenBrowserSession( user, domain, ~sess ) @ #y.1 )
          case OIDCClientInit
          solve( Browser( $Initiator, $IdP, ~sess ) ▶₀ #x )
            case OIDCClientInit
            by contradiction /* from formulas */
          next
            case OIDCClientLogin
            by contradiction /* from formulas */
          qed
        qed
      next
        case case_3
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma BrowserSessionUnique [reuse, use_induction]:
  all-traces
  "∀ user1 user2 domain1 domain2 sess #x #y.
    ((GenBrowserSession( user1, domain1, sess ) @ #x) ∧
     (GenBrowserSession( user2, domain2, sess ) @ #y)) ⇒
    (#x = #y)"
/*
guarded formula characterizing all counter-examples:
"∃ user1 user2 domain1 domain2 sess #x #y.
  (GenBrowserSession( user1, domain1, sess ) @ #x) ∧
  (GenBrowserSession( user2, domain2, sess ) @ #y)
 ∧
  ¬(#x = #y)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( GenBrowserSession( user1, domain1, sess ) @ #x )
    case LinkClick
    solve( GenBrowserSession( user2, domain2, ~sess ) @ #y )
      case LinkClick
      by contradiction /* from formulas */
    qed
  next
    case OIDCAdversaryInit
    solve( GenBrowserSession( user2, domain2, ~sess ) @ #y )
      case OIDCAdversaryInit
      by contradiction /* from formulas */
    qed
  next
    case OIDCClientInit
    solve( GenBrowserSession( user2, domain2, ~sess ) @ #y )
      case OIDCClientInit
      by contradiction /* from formulas */
    qed
  qed
qed

lemma UsernamesUnique [reuse]:
  all-traces
  "∀ userA userB idp username pw #a #b.
    ((ClaimUsername( userA, idp, username, pw ) @ #a) ∧
     (ClaimUsername( userB, idp, username, pw ) @ #b)) ⇒
    (((#a = #b) ∧ (userA = userB)) ∨
     (∃ sk #t. CompromisedDomain( idp, sk ) @ #t))"
/*
guarded formula characterizing all counter-examples:
"∃ userA userB idp username pw #a #b.
  (ClaimUsername( userA, idp, username, pw ) @ #a) ∧
  (ClaimUsername( userB, idp, username, pw ) @ #b)
 ∧
  (((¬(#a = #b)) ∨ (¬(userA = userB)))) ∧
  (∀ sk #t. (CompromisedDomain( idp, sk ) @ #t) ⇒ ⊥)"
*/
simplify
solve( !Domain( $IdP, ~IdPKey ) ▶₁ #a )
  case TLSSetup
  solve( !Domain( $IdP, ~IdPKey.1 ) ▶₁ #b )
    case TLSSetup
    solve( St_IdPRegistration_Client( ~sess, $A, $IdP, $Username, pw
           ) ▶₀ #a )
      case IdPSignUpInit
      solve( St_IdPRegistration_Client( ~sess.1, $A.1, $IdP, $Username, ~n
             ) ▶₀ #b )
        case IdPSignUpInit
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma UsernamesServerConfirmed [reuse]:
  all-traces
  "∀ user idp username pw #t.
    (ClaimUsername( user, idp, username, pw ) @ #t) ⇒
    ((∃ #x. UsernameServer( idp, username, pw ) @ #x) ∨
     (∃ sk #x. CompromisedDomain( idp, sk ) @ #x))"
/*
guarded formula characterizing all counter-examples:
"∃ user idp username pw #t.
  (ClaimUsername( user, idp, username, pw ) @ #t)
 ∧
  (∀ #x. (UsernameServer( idp, username, pw ) @ #x) ⇒ ⊥) ∧
  (∀ sk #x. (CompromisedDomain( idp, sk ) @ #x) ⇒ ⊥)"
*/
simplify
solve( !Domain( $IdP, ~IdPKey ) ▶₁ #t )
  case TLSSetup
  solve( St_IdPRegistration_Client( ~sess, $A, $IdP, $Username, pw
         ) ▶₀ #t )
    case IdPSignUpInit
    solve( !KU( tlsServerMsg(~sess, ~IdPKey, 'idp_ack') ) @ #vk )
      case IdPSignUpServer
      solve( !KU( tlsClientMsg(~sess, cert(~IdPKey), <'sign_up', username, pw>)
             ) @ #vk.1 )
        case IdPSignUpInit
        by contradiction /* from formulas */
      next
        case c_tlsClientMsg
        solve( !KU( ~sess ) @ #vk.2 )
          case IdPSignUpInit
          solve( !KU( ~IdPKey ) @ #vk.9 )
            case DomainCompromise
            by contradiction /* from formulas */
          next
            case OIDCClientLogin
            by solve( GenBrowserSession( $Initiator, $IdP.1, ~IdPKey ) @ #y )
          next
            case OIDCIdPIssueCode
            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                     <'oidc_req', hash, nonce, code_challenge>)
                   ) @ #vk.12 )
              case c_tlsClientMsg
              by contradiction /* cyclic */
            qed
          qed
        next
          case OIDCClientLogin
          by solve( GenBrowserSession( $Initiator, $IdP.1, ~sess ) @ #y )
        next
          case OIDCIdPIssueCode
          solve( !KU( tlsClientMsg(~sess, cert(~IdPKey.1),
                                   <'oidc_req', hash, nonce, code_challenge>)
                 ) @ #vk.11 )
            case c_tlsClientMsg
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case c_tlsServerMsg
      solve( !KU( ~IdPKey ) @ #vk.2 )
        case DomainCompromise
        by contradiction /* from formulas */
      next
        case OIDCClientLogin
        by solve( GenBrowserSession( $Initiator, $IdP.1, ~IdPKey ) @ #y )
      next
        case OIDCIdPIssueCode
        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                 <'oidc_req', hash, nonce, code_challenge>)
               ) @ #vk.6 )
          case c_tlsClientMsg
          by contradiction /* cyclic */
        qed
      qed
    qed
  qed
qed

lemma PasswordsConfidential [reuse]:
  all-traces
  "∀ user idp username pw #t.
    (ClaimUsername( user, idp, username, pw ) @ #t) ⇒
    (((¬(∃ #x. !KU( pw ) @ #x)) ∨
      (∃ sk #x. CompromisedDomain( idp, sk ) @ #x)) ∨
     (∃ someone #x. CompromisedAccount( someone, idp, username ) @ #x))"
/*
guarded formula characterizing all counter-examples:
"∃ user idp username pw #t.
  (ClaimUsername( user, idp, username, pw ) @ #t)
 ∧
  (∃ #x. (!KU( pw ) @ #x)) ∧
  (∀ sk #x. (CompromisedDomain( idp, sk ) @ #x) ⇒ ⊥) ∧
  (∀ someone #x. (CompromisedAccount( someone, idp, username ) @ #x) ⇒ ⊥)"
*/
simplify
solve( !Domain( $IdP, ~IdPKey ) ▶₁ #t )
  case TLSSetup
  solve( St_IdPRegistration_Client( ~sess, $A, $IdP, $Username, pw
         ) ▶₀ #t )
    case IdPSignUpInit
    solve( !KU( ~n ) @ #x )
      case IdPAccountCompromise
      by contradiction /* from formulas */
    next
      case IdPSignUpInit
      solve( !KU( ~IdPKey ) @ #vk.1 )
        case DomainCompromise
        by contradiction /* from formulas */
      next
        case OIDCClientLogin
        by solve( GenBrowserSession( $Initiator, $IdP.1, ~IdPKey ) @ #y )
      next
        case OIDCIdPIssueCode
        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                 <'oidc_req', hash, nonce, code_challenge>)
               ) @ #vk.4 )
          case c_tlsClientMsg
          by contradiction /* cyclic */
        qed
      qed
    next
      case OIDCClientLogin_case_1
      by solve( GenBrowserSession( $Initiator, $IdP.1, ~n ) @ #y )
    next
      case OIDCClientLogin_case_2
      solve( !KU( ~IdPKey ) @ #vk.2 )
        case DomainCompromise
        by contradiction /* from formulas */
      next
        case OIDCClientLogin
        by solve( GenBrowserSession( $Initiator, $IdP.1, ~IdPKey ) @ #y.1 )
      next
        case OIDCIdPIssueCode
        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                 <'oidc_req', hash, nonce, code_challenge>)
               ) @ #vk.5 )
          case c_tlsClientMsg
          by contradiction /* cyclic */
        qed
      qed
    next
      case OIDCIdPIssueCode
      solve( !KU( tlsClientMsg(~n, cert(~IdPKey.1),
                               <'oidc_req', hash, nonce, code_challenge>)
             ) @ #vk.3 )
        case c_tlsClientMsg
        by contradiction /* cyclic */
      qed
    qed
  qed
qed

lemma SignalKeysUnique [reuse]:
  all-traces
  "∀ userA userB sk #a #b.
    ((ClaimSignalKey( userA, sk ) @ #a) ∧
     (ClaimSignalKey( userB, sk ) @ #b)) ⇒
    (((#a = #b) ∧ (userA = userB)) ∨
     (∃ signal sk.1 #t1 #t2.
       (CompromisedDomain( signal, sk.1 ) @ #t1) ∧ (IsSignal( signal ) @ #t2)))"
/*
guarded formula characterizing all counter-examples:
"∃ userA userB sk #a #b.
  (ClaimSignalKey( userA, sk ) @ #a) ∧ (ClaimSignalKey( userB, sk ) @ #b)
 ∧
  (((¬(#a = #b)) ∨ (¬(userA = userB)))) ∧
  (∀ signal sk.1 #t1 #t2.
    (CompromisedDomain( signal, sk.1 ) @ #t1) ∧ (IsSignal( signal ) @ #t2)
   ⇒
    ⊥)"
*/
simplify
solve( !SignalDomain( ~signal ) ▶₀ #a )
  case SignalServer
  solve( !SignalDomain( ~signal.1 ) ▶₀ #b )
    case SignalServer
    solve( St_SignalReg_ClientWait( $A, ~sess, sk ) ▶₁ #a )
      case SignalRespond
      solve( St_SignalReg_ClientWait( $A.1, ~sess.1, ~n ) ▶₁ #b )
        case SignalRespond
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

rule (modulo E) OIDCIdPIssueCode:
   [
   St_OIDCServer_Auth( $IdP, ~sess, hash, nonce, code_challenge ),
   In( tlsClientMsg(~sess, cert(~IdPKey), <'login', $Username, pw>) ),
   !IdPAccountServer( $IdP, $Username, pw ), !IdPLtk( $IdP, sk ),
   !Domain( $IdP, ~IdPKey ), !SignalClientDomain( $IdP, ~signalClient ),
   Fr( ~code )
   ]
  --[
  IdPIssueCode( $IdP, $Username, ~code ), IsNonce( nonce ),
  GenCode( $IdP, ~code )
  ]->
   [
   Out( browserForward(~sess, cert(~signalClient), <'code', ~code, nonce>)
   ),
   St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce, code_challenge )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) LinkClick:
   [ Fr( ~sess ), In( <code, nonce> ), !Domain( $Party, ~domain ) ]
  --[ GenBrowserSession( $Initiator, $Party, ~sess ) ]->
   [
   Out( browserForward(~sess, cert(~domain), <'code', code, nonce>) ),
   Browser( $Initiator, $Party, ~sess )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) OIDCClientCodeRedirect:
   [
   Browser( $Initiator, drop, ~sess ),
   In( browserForward(~sess, cert(~signalClient), <'code', code, nonce>) ),
   !SignalClientDomain( $IdP, ~signalClient ), !Domain( $IdP, ~IdPKey ),
   SessionStore( $Initiator, nonce, <$IdP, hash, salt, code_verifier> ),
   Fr( ~sessPost )
   ]
  --[
  ClientReceiveCode( $Initiator, $IdP, code ),
  SelfIssued( $Initiator, nonce ), Neq( nonce, 'null' ), IsCode( code )
  ]->
   [
   Out( tlsClientMsg(~sessPost, cert(~IdPKey),
                     <'token_req', code, code_verifier>)
   ),
   St_OIDCClient_CodeReq( $Initiator, $IdP, ~sessPost, hash, salt, code ),
   SessionStore( $Initiator, 'null', 'null' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) OIDCIdPTokenIssue:
   [
   In( tlsClientMsg(~sess, cert(~IdPKey),
                    <'token_req', code, code_verifier>)
   ),
   !Domain( $IdP, ~IdPKey ), !IdPLtk( $IdP, sk ),
   St_OIDCIdP_Code( $IdP, $Username, code, hash, nonce, code_challenge )
   ]
  --[
  Eq( s256(code_verifier), code_challenge ),
  IdPIssueToken( <<$IdP, $Username, nonce, hash>, 
                  sign(<$IdP, $Username, nonce, hash>, sk)>
  ),
  IsToken( <<$IdP, $Username, nonce, hash>, 
            sign(<$IdP, $Username, nonce, hash>, sk)>
  ),
  UseCode( code ), UseCodeVerifierFor( code_verifier, $IdP )
  ]->
   [
   Out( tlsServerMsg(~sess, ~IdPKey,
                     <'token', <$IdP, $Username, nonce, hash>, 
                      sign(<$IdP, $Username, nonce, hash>, sk)>)
   )
   ]

  /* has exactly the trivial AC variant */

lemma CodeVerifierSecrecy [reuse]:
  all-traces
  "∀ verifier idp #x #y.
    ((UseCodeVerifierFor( verifier, idp ) @ #x) ∧
     (GenerateCodeVerifierFor( verifier, idp ) @ #y)) ⇒
    ((¬(∃ #z. !KU( verifier ) @ #z)) ∨
     (∃ domain #z. CompromisedDomain( idp, domain ) @ #z))"
/*
guarded formula characterizing all counter-examples:
"∃ verifier idp #x #y.
  (UseCodeVerifierFor( verifier, idp ) @ #x) ∧
  (GenerateCodeVerifierFor( verifier, idp ) @ #y)
 ∧
  (∃ #z. (!KU( verifier ) @ #z)) ∧
  (∀ domain #z. (CompromisedDomain( idp, domain ) @ #z) ⇒ ⊥)"
*/
by sorry

restriction Neq:
  "∀ a b #x. (Neq( a, b ) @ #x) ⇒ (¬(a = b))"
  // safety formula

lemma TokenFormatAndOTPLearning [sources]:
  all-traces
  "(((∀ token #i.
       (IsToken( token ) @ #i) ⇒
       (∃ first second user idp nonce hashed sk.
         ((((((token = <first, second>) ∧ (first = <idp, user, nonce, hashed>)) ∧
             ((∃ #h. (!KU( idp ) @ #h) ∧ (#h < #i)) ∨
              (∃ sk.1 #h. ClaimIdPKey( idp, sk.1 ) @ #h))) ∧
            ((∃ #h. (!KU( user ) @ #h) ∧ (#h < #i)) ∨
             (∃ party pw #h. ClaimUsername( party, idp, user, pw ) @ #h))) ∧
           ((∃ #h. (!KU( nonce ) @ #h) ∧ (#h < #i)) ∨
            (∃ #h. GenNonce( nonce ) @ #h))) ∧
          ((∃ #h. (!KU( hashed ) @ #h) ∧ (#h < #i)) ∨
           (∃ fp salt. hashed = h(fp, salt)))) ∧
         (second = sign(first, sk)))) ∧
     (∀ nonce #i.
       (IsNonce( nonce ) @ #i) ⇒
       ((∃ #h. (!KU( nonce ) @ #h) ∧ (#h < #i)) ∨
        (∃ #h. GenNonce( nonce ) @ #h)))) ∧
    (∀ code #i.
      (IsCode( code ) @ #i) ⇒
      ((∃ #h. (!KU( code ) @ #h) ∧ (#h < #i)) ∨
       (∃ idp #h. GenCode( idp, code ) @ #h)))) ∧
   (∀ chall #i.
     (OTPRespond( chall ) @ #i) ⇒
     ((∃ #j. (OTPChallenge( chall ) @ #j) ∧ (#j < #i)) ∨
      (∃ #j. (!KU( chall ) @ #j) ∧ (#j < #i))))"
/*
guarded formula characterizing all counter-examples:
"((∃ token #i.
    (IsToken( token ) @ #i)
   ∧
    ∀ first second user idp nonce hashed sk.
     (token = <first, second>) ∧
     (first = <idp, user, nonce, hashed>) ∧
     (second = sign(first, sk))
    ⇒
     (((∀ #h. (!KU( idp ) @ #h) ⇒ ¬(#h < #i)) ∧
       (∀ sk.1 #h. (ClaimIdPKey( idp, sk.1 ) @ #h) ⇒ ⊥)) ∨
      ((∀ #h. (!KU( user ) @ #h) ⇒ ¬(#h < #i)) ∧
       (∀ party pw #h. (ClaimUsername( party, idp, user, pw ) @ #h) ⇒ ⊥)) ∨
      ((∀ #h. (!KU( nonce ) @ #h) ⇒ ¬(#h < #i)) ∧
       (∀ #h. (GenNonce( nonce ) @ #h) ⇒ ⊥)) ∨
      ((∀ #h. (!KU( hashed ) @ #h) ⇒ ¬(#h < #i)) ∧
       (∀ fp salt. (hashed = h(fp, salt)) ⇒ ⊥)))) ∨
  (∃ nonce #i.
    (IsNonce( nonce ) @ #i)
   ∧
    (∀ #h. (!KU( nonce ) @ #h) ⇒ ¬(#h < #i)) ∧
    (∀ #h. (GenNonce( nonce ) @ #h) ⇒ ⊥)) ∨
  (∃ code #i.
    (IsCode( code ) @ #i)
   ∧
    (∀ #h. (!KU( code ) @ #h) ⇒ ¬(#h < #i)) ∧
    (∀ idp #h. (GenCode( idp, code ) @ #h) ⇒ ⊥)) ∨
  (∃ chall #i.
    (OTPRespond( chall ) @ #i)
   ∧
    (∀ #j. (OTPChallenge( chall ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j. (!KU( chall ) @ #j) ⇒ ¬(#j < #i))))"
*/
by sorry

rule (modulo E) pk_req:
   [ Fr( ~sess ), !Domain( $IdP, ~IdPKey ) ]
  -->
   [ Out( tlsClientMsg(~sess, cert(~IdPKey), 'pk_req') ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) OIDCTokenForward:
   [
   St_OIDCClient_CodeReq( $Initiator, $IdP, ~sessPost, hash, salt, code ),
   !Domain( $IdP, ~IdPKey ),
   In( tlsServerMsg(~sess, ~IdPKey, <'pk_response', pkIdP>) ),
   In( tlsServerMsg(~sessPost, ~IdPKey,
                    <'token', <$IdP, username, nonce, hash>, signature>)
   ),
   !SignalLtkClient( $Initiator, skInitiator ),
   !SignalLtkServer( phone, pkVerifier )
   ]
  --[
  Eq( h(<trim(pk(skInitiator)), trim(pkVerifier)>, salt), hash ),
  Eq( verify(signature, <$IdP, username, nonce, hash>, pkIdP), true ),
  Forward( $Initiator, <<$IdP, username, nonce, hash>, signature> ),
  IsToken( <<$IdP, username, nonce, hash>, signature> ), UsedCode( code )
  ]->
   [
   Out( signalMsg(skInitiator, pkVerifier,
                  <'fwd_token', <<$IdP, username, nonce, hash>, signature>, salt>)
   ),
   Out( code )
   ]

  /*
  rule (modulo AC) OIDCTokenForward:
     [
     St_OIDCClient_CodeReq( $Initiator, $IdP, ~sessPost, hash, salt, code ),
     !Domain( $IdP, ~IdPKey ),
     In( tlsServerMsg(~sess, ~IdPKey, <'pk_response', pkIdP>) ),
     In( tlsServerMsg(~sessPost, ~IdPKey,
                      <'token', <$IdP, username, nonce, hash>, signature>)
     ),
     !SignalLtkClient( $Initiator, skInitiator ),
     !SignalLtkServer( phone, pkVerifier )
     ]
    --[
    Eq( h(<trim(pk(skInitiator)), trim(pkVerifier)>, salt), hash ),
    Eq( z, true ),
    Forward( $Initiator, <<$IdP, username, nonce, hash>, signature> ),
    IsToken( <<$IdP, username, nonce, hash>, signature> ), UsedCode( code )
    ]->
     [
     Out( signalMsg(skInitiator, pkVerifier,
                    <'fwd_token', <<$IdP, username, nonce, hash>, signature>, salt>)
     ),
     Out( code )
     ]
    variants (modulo AC)
    1. $IdP  = $IdP.35
       hash  = hash.41
       nonce = nonce.42
       pkIdP = pkIdP.44
       signature
             = signature.47
       username
             = username.49
       z     = verify(signature.47, <$IdP.35, username.49, nonce.42, hash.41>,
                      pkIdP.44)
    
    2. $IdP  = $IdP.68
       hash  = hash.74
       nonce = nonce.75
       pkIdP = pk(x.134)
       signature
             = sign(<$IdP.68, username.82, nonce.75, hash.74>, x.134)
       username
             = username.82
       z     = true
  */

lemma CodeIsSingleUse [use_induction, reuse]:
  all-traces
  "∀ idp code #a #b #x #y.
    ((((GenCode( idp, code ) @ #a) ∧ (UsedCode( code ) @ #b)) ∧
      (UseCode( code ) @ #x)) ∧
     (UseCode( code ) @ #y)) ⇒
    (((#x = #y) ∨ (∃ domain #x.1. CompromisedDomain( idp, domain ) @ #x.1)) ∨
     (∃ signalClient domain #x.1 #y.1.
       (IsSignalClientFor( idp, signalClient ) @ #x.1) ∧
       (CompromisedDomain( signalClient, domain ) @ #y.1)))"
/*
guarded formula characterizing all counter-examples:
"∃ idp code #a #b #x #y.
  (GenCode( idp, code ) @ #a) ∧
  (UsedCode( code ) @ #b) ∧
  (UseCode( code ) @ #x) ∧
  (UseCode( code ) @ #y)
 ∧
  (¬(#x = #y)) ∧
  (∀ domain #x.1. (CompromisedDomain( idp, domain ) @ #x.1) ⇒ ⊥) ∧
  (∀ signalClient domain #x.1 #y.1.
    (IsSignalClientFor( idp, signalClient ) @ #x.1) ∧
    (CompromisedDomain( signalClient, domain ) @ #y.1)
   ⇒
    ⊥)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (#x.1 < #y)  ∥ (#y < #x.1) )
    case case_1
    solve( St_OIDCServer_Auth( $IdP, ~sess, hash, nonce, code_challenge
           ) ▶₀ #a )
      case OIDCIdPInit
      solve( St_OIDCClient_CodeReq( $Initiator, $IdP.1, ~sessPost,
                                    h(<trim(pk(skInitiator)), trim(pkVerifier)>, salt), salt, ~code
             ) ▶₀ #b )
        case OIDCClientCodeRedirect_case_1
        solve( St_OIDCIdP_Code( $IdP.3, $Username.2, ~code, hash.2, nonce.3,
                                s256(code_verifier.1)
               ) ▶₃ #x.1 )
          case OIDCIdPIssueCode
          solve( St_OIDCIdP_Code( $IdP.2, $Username.1, ~code, hash.1, nonce.2,
                                  s256(code_verifier.1)
                 ) ▶₃ #y )
            case OIDCIdPIssueCode
            by contradiction /* cyclic */
          qed
        qed
      next
        case OIDCClientCodeRedirect_case_2
        solve( St_OIDCIdP_Code( $IdP.3, $Username.2, ~code, hash.2, nonce.3,
                                s256(code_verifier.1)
               ) ▶₃ #x.1 )
          case OIDCIdPIssueCode
          solve( St_OIDCIdP_Code( $IdP.2, $Username.1, ~code, hash.1, nonce.2,
                                  s256(code_verifier.1)
                 ) ▶₃ #y )
            case OIDCIdPIssueCode
            by contradiction /* cyclic */
          qed
        qed
      next
        case OIDCClientCodeRedirect_case_3
        solve( St_OIDCIdP_Code( $IdP.3, $Username.2, ~code, hash.2, nonce.3,
                                s256(code_verifier.1)
               ) ▶₃ #x.1 )
          case OIDCIdPIssueCode
          solve( St_OIDCIdP_Code( $IdP.2, $Username.1, ~code, hash.1, nonce.2,
                                  s256(code_verifier.1)
                 ) ▶₃ #y )
            case OIDCIdPIssueCode
            by contradiction /* cyclic */
          qed
        qed
      next
        case OIDCClientCodeRedirect_case_4
        solve( St_OIDCIdP_Code( $IdP.3, $Username.2, ~code, hash.2, nonce.3,
                                s256(code_verifier.1)
               ) ▶₃ #x.1 )
          case OIDCIdPIssueCode
          solve( St_OIDCIdP_Code( $IdP.2, $Username.1, ~code, hash.1, nonce.2,
                                  s256(code_verifier.1)
                 ) ▶₃ #y )
            case OIDCIdPIssueCode
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( St_OIDCServer_Auth( $IdP, ~sess, hash, nonce, code_challenge
           ) ▶₀ #a )
      case OIDCIdPInit
      solve( St_OIDCClient_CodeReq( $Initiator, $IdP.1, ~sessPost,
                                    h(<trim(pk(skInitiator)), trim(pkVerifier)>, salt), salt, ~code
             ) ▶₀ #b )
        case OIDCClientCodeRedirect_case_1
        solve( St_OIDCIdP_Code( $IdP.3, $Username.2, ~code, hash.2, nonce.3,
                                s256(code_verifier.1)
               ) ▶₃ #x.1 )
          case OIDCIdPIssueCode
          solve( St_OIDCIdP_Code( $IdP.2, $Username.1, ~code, hash.1, nonce.2,
                                  s256(code_verifier.1)
                 ) ▶₃ #y )
            case OIDCIdPIssueCode
            by contradiction /* cyclic */
          qed
        qed
      next
        case OIDCClientCodeRedirect_case_2
        solve( St_OIDCIdP_Code( $IdP.3, $Username.2, ~code, hash.2, nonce.3,
                                s256(code_verifier.1)
               ) ▶₃ #x.1 )
          case OIDCIdPIssueCode
          solve( St_OIDCIdP_Code( $IdP.2, $Username.1, ~code, hash.1, nonce.2,
                                  s256(code_verifier.1)
                 ) ▶₃ #y )
            case OIDCIdPIssueCode
            by contradiction /* cyclic */
          qed
        qed
      next
        case OIDCClientCodeRedirect_case_3
        solve( St_OIDCIdP_Code( $IdP.3, $Username.2, ~code, hash.2, nonce.3,
                                s256(code_verifier.1)
               ) ▶₃ #x.1 )
          case OIDCIdPIssueCode
          solve( St_OIDCIdP_Code( $IdP.2, $Username.1, ~code, hash.1, nonce.2,
                                  s256(code_verifier.1)
                 ) ▶₃ #y )
            case OIDCIdPIssueCode
            by contradiction /* cyclic */
          qed
        qed
      next
        case OIDCClientCodeRedirect_case_4
        solve( St_OIDCIdP_Code( $IdP.3, $Username.2, ~code, hash.2, nonce.3,
                                s256(code_verifier.1)
               ) ▶₃ #x.1 )
          case OIDCIdPIssueCode
          solve( St_OIDCIdP_Code( $IdP.2, $Username.1, ~code, hash.1, nonce.2,
                                  s256(code_verifier.1)
                 ) ▶₃ #y )
            case OIDCIdPIssueCode
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  qed
qed

rule (modulo E) OIDCTokenReceive:
   [
   !SignalLtkClient( $Verifier, skVerifier ),
   In( signalMsg(skSender, pk(skVerifier),
                 <'fwd_token', <<IdP, username, nonce, hash>, signature>, salt>)
   ),
   !Domain( IdP, ~IdPKey ), Fr( ~sess )
   ]
  -->
   [
   St_OIDCVerifier( $Verifier, ~sess, pk(skSender), skVerifier,
                    <<IdP, username, nonce, hash>, signature>, salt
   ),
   Out( tlsClientMsg(~sess, cert(~IdPKey), 'pk_req') )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) OIDCTokenVerify:
   [
   St_OIDCVerifier( $Verifier, ~sess, pkInitiator, skVerifier,
                    <<IdP, username, nonce, hash>, signature>, salt
   ),
   !Domain( IdP, ~IdPKey ),
   In( tlsServerMsg(~sess, ~IdPKey, <'pk_response', pkIdP>) )
   ]
  --[
  Eq( h(<trim(pkInitiator), trim(pk(skVerifier))>, salt), hash ),
  Eq( verify(signature, <IdP, username, nonce, hash>, pkIdP), true ),
  DidNotIssueSelf( $Verifier, nonce ),
  AssociateAs( pkInitiator, IdP, username, pk(skVerifier) )
  ]->
   [ ]

  /*
  rule (modulo AC) OIDCTokenVerify:
     [
     St_OIDCVerifier( $Verifier, ~sess, pkInitiator, skVerifier,
                      <<IdP, username, nonce, hash>, signature>, salt
     ),
     !Domain( IdP, ~IdPKey ),
     In( tlsServerMsg(~sess, ~IdPKey, <'pk_response', pkIdP>) )
     ]
    --[
    Eq( h(<trim(pkInitiator), trim(pk(skVerifier))>, salt), hash ),
    Eq( z, true ), DidNotIssueSelf( $Verifier, nonce ),
    AssociateAs( pkInitiator, IdP, username, pk(skVerifier) )
    ]->
     [ ]
    variants (modulo AC)
    1. IdP   = IdP.16
       hash  = hash.17
       nonce = nonce.18
       pkIdP = pkIdP.19
       signature
             = signature.22
       username
             = username.24
       z     = verify(signature.22, <IdP.16, username.24, nonce.18, hash.17>,
                      pkIdP.19)
    
    2. IdP   = IdP.22
       hash  = hash.23
       nonce = nonce.24
       pkIdP = pk(x.36)
       signature
             = sign(<IdP.22, username.30, nonce.24, hash.23>, x.36)
       username
             = username.30
       z     = true
  */

restriction CheckNonceReplay:
  "∀ verifier nonce #t1.
    (DidNotIssueSelf( verifier, nonce ) @ #t1) ⇒
    (¬(∃ #t2. SelfIssued( verifier, nonce ) @ #t2))"
  // safety formula

restriction Equality:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

lemma NonInjectiveAgreement:
  all-traces
  "∀ pkI idp username pkV initiator accountHolder pw skI #i #j #k.
    ((((AssociateAs( pkI, idp, username, pkV ) @ #i) ∧
       (ClaimSignalKey( initiator, skI ) @ #j)) ∧
      (pkI = pk(skI))) ∧
     (ClaimUsername( accountHolder, idp, username, pw ) @ #k)) ⇒
    ((((∃ salt hash nonce code_challenge sess #k.1 #l #m.
         ((((((initiator = accountHolder) ∧
              (OIDCRequest( initiator, idp, pkV, salt, hash, nonce, code_challenge
               ) @ #k.1)) ∧
             (#k.1 < #i)) ∧
            (AuthenticationRequest( sess, idp, hash, nonce, code_challenge ) @ #l)) ∧
           (#l < #i)) ∧
          (AuthenticationResponse( sess, initiator, idp, username ) @ #m)) ∧
         (#m < #i)) ∨
       (∃ domain #k.1. CompromisedDomain( idp, domain ) @ #k.1)) ∨
      (∃ signalClient domain #k.1 #l.
        (IsSignalClientFor( idp, signalClient ) @ #k.1) ∧
        (CompromisedDomain( signalClient, domain ) @ #l))) ∨
     (∃ party #k.1. CompromisedAccount( party, idp, username ) @ #k.1))"
/*
guarded formula characterizing all counter-examples:
"∃ pkI idp username pkV initiator accountHolder pw skI #i #j #k.
  (AssociateAs( pkI, idp, username, pkV ) @ #i) ∧
  (ClaimSignalKey( initiator, skI ) @ #j) ∧
  (pkI = pk(skI)) ∧
  (ClaimUsername( accountHolder, idp, username, pw ) @ #k)
 ∧
  (∀ salt hash nonce code_challenge sess #k.1 #l #m.
    (initiator = accountHolder) ∧
    (OIDCRequest( initiator, idp, pkV, salt, hash, nonce, code_challenge
     ) @ #k.1) ∧
    (AuthenticationRequest( sess, idp, hash, nonce, code_challenge ) @ #l) ∧
    (AuthenticationResponse( sess, initiator, idp, username ) @ #m)
   ⇒
    ((¬(#k.1 < #i)) ∨ (¬(#l < #i)) ∨ (¬(#m < #i)))) ∧
  (∀ domain #k.1. (CompromisedDomain( idp, domain ) @ #k.1) ⇒ ⊥) ∧
  (∀ signalClient domain #k.1 #l.
    (IsSignalClientFor( idp, signalClient ) @ #k.1) ∧
    (CompromisedDomain( signalClient, domain ) @ #l)
   ⇒
    ⊥) ∧
  (∀ party #k.1. (CompromisedAccount( party, idp, username ) @ #k.1) ⇒ ⊥)"
*/
by sorry

lemma Executability:
  exists-trace
  "∃ initiator initiatorNum initiatorSk verifier verifierNum verifierSk idp
     salt hash nonce code_verifier session username pw code token idpSk body
     signature fingerprint #a #b #c #d #e #f #g #h #i #j #k #l #m #n #o #p #q
     #r #s #t.
    (((((((((((((((((((((((((((((((((((((((ClaimNumber( initiator,
                                                        initiatorNum
                                           ) @ #a) ∧
                                          (SignalKeyClient( initiator, initiatorSk ) @ #b)) ∧
                                         (SignalKeyServer( initiatorNum, pk(initiatorSk) ) @ #c)) ∧
                                        (ClaimSignalKey( initiator, initiatorSk ) @ #d)) ∧
                                       (¬(∃ #x. CompromisedSignal( initiator, initiatorSk ) @ #x))) ∧
                                      (ClaimNumber( verifier, verifierNum ) @ #e)) ∧
                                     (SignalKeyClient( verifier, verifierSk ) @ #f)) ∧
                                    (SignalKeyServer( verifierNum, pk(verifierSk) ) @ #g)) ∧
                                   (ClaimSignalKey( verifier, verifierSk ) @ #h)) ∧
                                  (¬(∃ #x. CompromisedSignal( verifier, verifierSk ) @ #x))) ∧
                                 (UsernameClient( initiator, idp, username, pw ) @ #i)) ∧
                                (UsernameServer( idp, username, pw ) @ #j)) ∧
                               (ClaimUsername( initiator, idp, username, pw ) @ #k)) ∧
                              (¬(∃ #x. CompromisedAccount( initiator, idp, username ) @ #x))) ∧
                             (OIDCRequest( initiator, idp, pk(verifierSk), salt, hash, nonce,
                                           s256(code_verifier)
                              ) @ #l)) ∧
                            (¬(∃ a.1 b.1 c.1 d.1 e.1 f.1 g.1 #x.
                                (OIDCRequest( a.1, b.1, c.1, d.1, e.1, f.1, g.1 ) @ #x) ∧
                                (¬(#l = #x))))) ∧
                           (¬(∃ #x. AdversaryOIDCRequest( ) @ #x))) ∧
                          (AuthenticationRequest( session, idp, hash, nonce, s256(code_verifier)
                           ) @ #m)) ∧
                         (¬(∃ a.1 b.1 c.1 d.1 e.1 #x.
                             (AuthenticationRequest( a.1, b.1, c.1, d.1, e.1 ) @ #x) ∧
                             (¬(#m = #x))))) ∧
                        (AuthenticationResponse( session, initiator, idp, username ) @ #n)) ∧
                       (¬(∃ a.1 b.1 c.1 d.1 #x.
                           (AuthenticationResponse( a.1, b.1, c.1, d.1 ) @ #x) ∧ (¬(#n = #x))))) ∧
                      (IdPIssueCode( idp, username, code ) @ #o)) ∧
                     (¬(∃ a.1 b.1 c.1 #x.
                         (IdPIssueCode( a.1, b.1, c.1 ) @ #x) ∧ (¬(#o = #x))))) ∧
                    (ClientReceiveCode( initiator, idp, code ) @ #p)) ∧
                   (¬(∃ a.1 b.1 c.1 #x.
                       (ClientReceiveCode( a.1, b.1, c.1 ) @ #x) ∧ (¬(#p = #x))))) ∧
                  (IdPIssueToken( token ) @ #q)) ∧
                 (¬(∃ a.1 #x. (IdPIssueToken( a.1 ) @ #x) ∧ (¬(#q = #x))))) ∧
                (ClaimIdPKey( idp, idpSk ) @ #r)) ∧
               (¬(∃ sk #x. CompromisedDomain( idp, sk ) @ #x))) ∧
              (token = <body, signature>)) ∧
             (body = <idp, username, nonce, hash>)) ∧
            (hash = h(fingerprint, salt))) ∧
           (fingerprint = <trim(pk(initiatorSk)), trim(pk(verifierSk))>)) ∧
          (signature = sign(body, idpSk))) ∧
         (Forward( initiator, token ) @ #s)) ∧
        (¬(∃ a.1 b.1 #x. (Forward( a.1, b.1 ) @ #x) ∧ (¬(#s = #x))))) ∧
       (AssociateAs( pk(initiatorSk), idp, username, pk(verifierSk) ) @ #t)) ∧
      (¬(∃ a.1 b.1 c.1 d.1 #x.
          (AssociateAs( a.1, b.1, c.1, d.1 ) @ #x) ∧ (¬(#t = #x))))) ∧
     (¬(∃ signal sk #x #y.
         (IsSignal( signal ) @ #x) ∧ (CompromisedDomain( signal, sk ) @ #y)))) ∧
    (¬(∃ client sk #x #y.
        (IsSignalClientFor( idp, client ) @ #x) ∧
        (CompromisedDomain( client, sk ) @ #y)))"
/*
guarded formula characterizing all satisfying traces:
"∃ initiator initiatorNum initiatorSk verifier verifierNum verifierSk idp
   salt hash nonce code_verifier session username pw code token idpSk body
   signature fingerprint #a #b #c #d #e #f #g #h #i #j #k #l #m #n #o #p #q
   #r #s #t.
  (ClaimNumber( initiator, initiatorNum ) @ #a) ∧
  (SignalKeyClient( initiator, initiatorSk ) @ #b) ∧
  (SignalKeyServer( initiatorNum, pk(initiatorSk) ) @ #c) ∧
  (ClaimSignalKey( initiator, initiatorSk ) @ #d) ∧
  (ClaimNumber( verifier, verifierNum ) @ #e) ∧
  (SignalKeyClient( verifier, verifierSk ) @ #f) ∧
  (SignalKeyServer( verifierNum, pk(verifierSk) ) @ #g) ∧
  (ClaimSignalKey( verifier, verifierSk ) @ #h) ∧
  (UsernameClient( initiator, idp, username, pw ) @ #i) ∧
  (UsernameServer( idp, username, pw ) @ #j) ∧
  (ClaimUsername( initiator, idp, username, pw ) @ #k) ∧
  (OIDCRequest( initiator, idp, pk(verifierSk), salt, hash, nonce,
                s256(code_verifier)
   ) @ #l) ∧
  (AuthenticationRequest( session, idp, hash, nonce, s256(code_verifier)
   ) @ #m) ∧
  (AuthenticationResponse( session, initiator, idp, username ) @ #n) ∧
  (IdPIssueCode( idp, username, code ) @ #o) ∧
  (ClientReceiveCode( initiator, idp, code ) @ #p) ∧
  (IdPIssueToken( token ) @ #q) ∧
  (ClaimIdPKey( idp, idpSk ) @ #r) ∧
  (token = <body, signature>) ∧
  (body = <idp, username, nonce, hash>) ∧
  (hash = h(fingerprint, salt)) ∧
  (fingerprint = <trim(pk(initiatorSk)), trim(pk(verifierSk))>) ∧
  (signature = sign(body, idpSk)) ∧
  (Forward( initiator, token ) @ #s) ∧
  (AssociateAs( pk(initiatorSk), idp, username, pk(verifierSk) ) @ #t)
 ∧
  (∀ #x. (CompromisedSignal( initiator, initiatorSk ) @ #x) ⇒ ⊥) ∧
  (∀ #x. (CompromisedSignal( verifier, verifierSk ) @ #x) ⇒ ⊥) ∧
  (∀ #x. (CompromisedAccount( initiator, idp, username ) @ #x) ⇒ ⊥) ∧
  (∀ a.1 b.1 c.1 d.1 e.1 f.1 g.1 #x.
    (OIDCRequest( a.1, b.1, c.1, d.1, e.1, f.1, g.1 ) @ #x) ⇒ #l = #x) ∧
  (∀ #x. (AdversaryOIDCRequest( ) @ #x) ⇒ ⊥) ∧
  (∀ a.1 b.1 c.1 d.1 e.1 #x.
    (AuthenticationRequest( a.1, b.1, c.1, d.1, e.1 ) @ #x) ⇒ #m = #x) ∧
  (∀ a.1 b.1 c.1 d.1 #x.
    (AuthenticationResponse( a.1, b.1, c.1, d.1 ) @ #x) ⇒ #n = #x) ∧
  (∀ a.1 b.1 c.1 #x. (IdPIssueCode( a.1, b.1, c.1 ) @ #x) ⇒ #o = #x) ∧
  (∀ a.1 b.1 c.1 #x. (ClientReceiveCode( a.1, b.1, c.1 ) @ #x) ⇒ #p = #x) ∧
  (∀ a.1 #x. (IdPIssueToken( a.1 ) @ #x) ⇒ #q = #x) ∧
  (∀ sk #x. (CompromisedDomain( idp, sk ) @ #x) ⇒ ⊥) ∧
  (∀ a.1 b.1 #x. (Forward( a.1, b.1 ) @ #x) ⇒ #s = #x) ∧
  (∀ a.1 b.1 c.1 d.1 #x.
    (AssociateAs( a.1, b.1, c.1, d.1 ) @ #x) ⇒ #t = #x) ∧
  (∀ signal sk #x #y.
    (IsSignal( signal ) @ #x) ∧ (CompromisedDomain( signal, sk ) @ #y) ⇒ ⊥) ∧
  (∀ client sk #x #y.
    (IsSignalClientFor( idp, client ) @ #x) ∧
    (CompromisedDomain( client, sk ) @ #y)
   ⇒
    ⊥)"
*/
by sorry

/* All well-formedness checks were successful. */

end