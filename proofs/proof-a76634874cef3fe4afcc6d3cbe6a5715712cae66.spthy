theory SignalOIDC begin

// Function signature and definition of the equational theory E

functions: browserForward/3, cert/1, forwardReceive/2, fst/1, h/2,
           pair/2, phone/1, pk/1, receive/2, s256/1, sign/2, signalMsg/3,
           signalRead/2, sms/2, snd/1, tlsClientMsg/3, tlsClientReceive/2,
           tlsServerMsg/3, tlsServerReceive/2, trim/1, true/0, verify/3
equations:
    forwardReceive(browserForward(~sess, cert(~domain), m), ~domain)
  = ~sess,
    forwardReceive(browserForward(~sess, cert(~domain), m), ~domain)
  = m,
    fst(<x.1, x.2>) = x.1,
    receive(sms(phone(sim), m), sim) = m,
    signalRead(signalMsg(~senderSk, pk(~receiverSk), m), ~receiverSk)
  = m,
    snd(<x.1, x.2>) = x.2,
    tlsClientReceive(tlsServerMsg(~sess, ~domain, m), ~sess) = m,
    tlsServerReceive(tlsClientMsg(~sess, cert(~domain), m), ~domain)
  = ~sess,
    tlsServerReceive(tlsClientMsg(~sess, cert(~domain), m), ~domain)
  = m,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true

heuristic: o "./oracle.py"

rule (modulo E) Phone:
   [ Fr( sim ) ]
  --[ ClaimNumber( $A, phone(sim) ) ]->
   [ !Phone( $A, sim ), Out( phone(sim) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) PhoneCompromise:
   [ !Phone( $A, sim ) ]
  --[ CompromisedNumber( $A, sim ) ]->
   [ Out( sim ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) TLSSetup:
   [ Fr( ~domain ) ]
  --[ OnlyOneDomain( $A ) ]->
   [ !Domain( $A, ~domain ), Out( cert(~domain) ) ]

  /* has exactly the trivial AC variant */

restriction OnlyOneDomain:
  "∀ domain #x #y.
    ((OnlyOneDomain( domain ) @ #x) ∧ (OnlyOneDomain( domain ) @ #y)) ⇒
    (#x = #y)"
  // safety formula

rule (modulo E) DomainCompromise:
   [ !Domain( $A, ~domain ) ]
  --[ CompromisedDomain( $A, ~domain ) ]->
   [ Out( ~domain ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) SignalServer:
   [ !Domain( $Signal, ~domain ) ]
  --[ OnlyOnceSignal( ), IsSignal( $Signal ) ]->
   [ !SignalDomain( ~domain ) ]

  /* has exactly the trivial AC variant */

restriction OnlyOnceSignal:
  "∀ #i #j.
    ((OnlyOnceSignal( ) @ #i) ∧ (OnlyOnceSignal( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

rule (modulo E) SignalClient:
   [ !Domain( $IdP, ~secret ), !Domain( $SignalClient, ~domain ) ]
  --[
  OnlyOnceSignalClientIdP( $IdP ),
  OnlyOnceSignalClient( $SignalClient ),
  IsSignalClientFor( $IdP, $SignalClient )
  ]->
   [ !SignalClientDomain( $IdP, ~domain ) ]

  /* has exactly the trivial AC variant */

restriction OnlyOnceSignalClientIdP:
  "∀ idp #i #j.
    ((OnlyOnceSignalClientIdP( idp ) @ #i) ∧
     (OnlyOnceSignalClientIdP( idp ) @ #j)) ⇒
    (#i = #j)"
  // safety formula

restriction OnlyOnceSignalClient:
  "∀ c #i #j.
    ((OnlyOnceSignalClient( c ) @ #i) ∧
     (OnlyOnceSignalClient( c ) @ #j)) ⇒
    (#i = #j)"
  // safety formula

rule (modulo E) SignalRegister:
   [
   Fr( sk ), Fr( ~sess ), !Phone( $A, sim ), !SignalDomain( ~signal )
   ]
  --[ SignalKeyClient( $A, sk ) ]->
   [
   Out( tlsClientMsg(~sess, cert(~signal),
                     <'signal_req', phone(sim), pk(sk)>)
   ),
   St_SignalReg_Client( $A, ~sess, sk )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) SignalChallenge:
   [
   !SignalDomain( ~signal ),
   In( tlsClientMsg(~sess, cert(~signal), <'signal_req', phone, ltk>)
   ),
   Fr( challenge )
   ]
  --[ OTPChallenge( challenge ) ]->
   [
   Out( sms(phone, <'otp', challenge>) ),
   St_SigReg_Server( ~sess, phone, ltk, challenge )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) SignalRespond:
   [
   !Phone( $A, sim ), In( sms(phone(sim), <'otp', challenge>) ),
   !SignalDomain( ~signal ), St_SignalReg_Client( $A, ~sess, sk )
   ]
  --[ OTPRespond( challenge ) ]->
   [
   Out( tlsClientMsg(~sess, cert(~signal), <'otp_respond', challenge>)
   ),
   St_SignalReg_ClientWait( $A, ~sess, sk )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) SignalAck:
   [
   !SignalDomain( ~signal ),
   In( tlsClientMsg(~sess, cert(~signal), <'otp_respond', challenge>)
   ),
   St_SigReg_Server( ~sess, phone, ltk, challenge )
   ]
  --[ SignalKeyServer( phone, ltk ) ]->
   [
   !SignalLtkServer( phone, ltk ),
   Out( tlsServerMsg(~sess, ~signal, 'signal_ack') )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) SignalFin:
   [
   !SignalDomain( ~signal ), St_SignalReg_ClientWait( $A, ~sess, sk ),
   In( tlsServerMsg(~sess, ~signal, 'signal_ack') )
   ]
  --[ ClaimSignalKey( $A, sk ) ]->
   [ !SignalLtkClient( $A, sk ), Out( pk(sk) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) SignalCompromise:
   [ !SignalLtkClient( $A, ~sk ) ]
  --[ CompromisedSignal( $A, ~sk ) ]->
   [ Out( ~sk ) ]

  /* has exactly the trivial AC variant */

lemma ServerKeysAuthentic:
  all-traces
  "∀ pk num #i.
    (SignalKeyServer( num, pk ) @ #i) ⇒
    (((∃ party sk #j #k.
        ((ClaimNumber( party, num ) @ #j) ∧
         (SignalKeyClient( party, sk ) @ #k)) ∧
        (pk = pk(sk))) ∨
      (∃ signal domain #j #k.
        (IsSignal( signal ) @ #j) ∧
        (CompromisedDomain( signal, domain ) @ #k))) ∨
     (∃ sim #j. (!KU( sim ) @ #j) ∧ (num = phone(sim))))"
/*
guarded formula characterizing all counter-examples:
"∃ pk num #i.
  (SignalKeyServer( num, pk ) @ #i)
 ∧
  (∀ party sk #j #k.
    (ClaimNumber( party, num ) @ #j) ∧
    (SignalKeyClient( party, sk ) @ #k) ∧
    (pk = pk(sk))
   ⇒
    ⊥) ∧
  (∀ signal domain #j #k.
    (IsSignal( signal ) @ #j) ∧
    (CompromisedDomain( signal, domain ) @ #k)
   ⇒
    ⊥) ∧
  (∀ sim #j. (!KU( sim ) @ #j) ∧ (num = phone(sim)) ⇒ ⊥)"
*/
by sorry

rule (modulo E) IdPSetup:
   [ Fr( sk ) ]
  --[ ClaimIdPKey( $IdP, sk ) ]->
   [ !IdPLtk( $IdP, sk ), Out( pk(sk) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) IdPPkDistribute:
   [
   !IdPLtk( $IdP, sk ), !Domain( $IdP, ~IdPKey ),
   In( tlsClientMsg(~sess, cert(~IdPKey), 'pk_req') )
   ]
  -->
   [ Out( tlsServerMsg(~sess, ~IdPKey, <'pk_response', pk(sk)>) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) IdPSignUpInit:
   [ Fr( pw ), Fr( ~sess ), !Domain( $IdP, ~IdPKey ) ]
  --[ UsernameClient( $A, $IdP, $Username, pw ) ]->
   [
   Out( tlsClientMsg(~sess, cert(~IdPKey), <'sign_up', $Username, pw>)
   ),
   St_IdPRegistration_Client( ~sess, $A, $IdP, $Username, pw )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) IdPSignUpServer:
   [
   !Domain( $IdP, ~IdPKey ),
   In( tlsClientMsg(~sess, cert(~IdPKey), <'sign_up', username, pw>) )
   ]
  --[
  UsernameServer( $A, $IdP, username, pw ),
  AccountsUnique( $IdP, username )
  ]->
   [
   !IdPAccountServer( $A, $IdP, username, pw ),
   Out( tlsServerMsg(~sess, ~IdPKey, 'idp_ack') )
   ]

  /* has exactly the trivial AC variant */

restriction AccountsUnique:
  "∀ idp u #a #b.
    ((AccountsUnique( idp, u ) @ #a) ∧
     (AccountsUnique( idp, u ) @ #b)) ⇒
    (#a = #b)"
  // safety formula

rule (modulo E) IdPSignUpFin:
   [
   St_IdPRegistration_Client( ~sess, $A, $IdP, $Username, pw ),
   !Domain( $IdP, ~IdPKey ),
   In( tlsServerMsg(~sess, ~IdPKey, 'idp_ack') )
   ]
  --[ ClaimUsername( $A, $IdP, $Username ) ]->
   [ !IdPAccountClient( $A, $IdP, $Username, pw ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) IdPAccountCompromise:
   [ !IdPAccountClient( $A, $IdP, $Username, ~pw ) ]
  --[ CompromisedAccount( $A, $IdP, $Username ) ]->
   [ Out( ~pw ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) InitSessionStore:
   [ ]
  --[ OnlyOnceInitSessionStore( $User ) ]->
   [ SessionStore( $User, 'null', 'null' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ClearSessionStore:
   [ SessionStore( $User, x, y ) ]
  -->
   [ SessionStore( $User, 'null', 'null' ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

restriction OnlyOnceInitSessionStore:
  "∀ u #x #y.
    ((OnlyOnceInitSessionStore( u ) @ #x) ∧
     (OnlyOnceInitSessionStore( u ) @ #y)) ⇒
    (#x = #y)"
  // safety formula

rule (modulo E) OIDCClientInit:
   [
   !Domain( $IdP, ~IdPKey ),
   !SignalLtkClient( $Initiator, skInitiator ),
   !IdPAccountClient( $Initiator, $IdP, username, pw ),
   !SignalLtkServer( numVerifier, pkVerifier ),
   SessionStore( $Initiator, drop1, drop2 ), Fr( salt ), Fr( nonce ),
   Fr( code_verifier ), Fr( ~sess )
   ]
  --[
  OIDCRequest( $Initiator, $IdP, pkVerifier, salt,
               h(<trim(pk(skInitiator)), trim(pkVerifier)>, salt), nonce,
               s256(code_verifier)
  ),
  GenNonce( nonce ), GenBrowserSession( $Initiator, $IdP, ~sess ),
  GenerateCodeVerifierFor( code_verifier, $IdP )
  ]->
   [
   Out( tlsClientMsg(~sess, cert(~IdPKey),
                     <'oidc_req', h(<trim(pk(skInitiator)), trim(pkVerifier)>, salt), 
                      nonce, s256(code_verifier)>)
   ),
   Out( <h(<trim(pk(skInitiator)), trim(pkVerifier)>, salt), nonce, 
         s256(code_verifier)>
   ),
   SessionStore( $Initiator, nonce,
                 <$IdP, h(<trim(pk(skInitiator)), trim(pkVerifier)>, salt), salt, 
                  code_verifier>
   ),
   Browser( $Initiator, $IdP, ~sess )
   ]

  // loop breaker: [4]
  /* has exactly the trivial AC variant */

rule (modulo E) OIDCAdversaryInit:
   [
   !Domain( $IdP, ~IdPKey ),
   In( <$IdP, $Initiator, hash, nonce, code_challenge> ), Fr( ~sess )
   ]
  --[
  AdversaryOIDCRequest( ),
  GenBrowserSession( $Initiator, $IdP, ~sess )
  ]->
   [
   Out( tlsClientMsg(~sess, cert(~IdPKey),
                     <'oidc_req', hash, nonce, code_challenge>)
   ),
   Browser( $Initiator, $IdP, ~sess )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) OIDCIdPInit:
   [
   !Domain( $IdP, ~IdPKey ),
   In( tlsClientMsg(~sess, cert(~IdPKey),
                    <'oidc_req', hash, nonce, code_challenge>)
   )
   ]
  --[
  AuthenticationRequest( ~sess, $IdP, hash, nonce, code_challenge ),
  IsNonce( nonce )
  ]->
   [
   Out( tlsServerMsg(~sess, ~IdPKey, 'auth_req') ),
   St_OIDCServer_Auth( $IdP, ~sess, hash, nonce, code_challenge )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) OIDCClientLogin:
   [
   Browser( $Initiator, $IdP, ~sess ), !Domain( $IdP, ~IdPKey ),
   In( tlsServerMsg(~sess, ~IdPKey, 'auth_req') ),
   !IdPAccountClient( $Initiator, $IdP, $Username, pw )
   ]
  --[
  AuthenticationResponse( ~sess, $Initiator, $IdP, $Username ),
  UseBrowserSession( $Initiator, $IdP, ~sess )
  ]->
   [
   Out( tlsClientMsg(~sess, cert(~IdPKey), <'login', $Username, pw>)
   ),
   Browser( $Initiator, $IdP, ~sess )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

lemma BrowserSessionSources [reuse, use_induction]:
  all-traces
  "∀ user domain sess #x.
    (UseBrowserSession( user, domain, sess ) @ #x) ⇒
    (∃ user.1 domain.1 #y.
      (GenBrowserSession( user.1, domain.1, sess ) @ #y) ∧ (#y < #x))"
/*
guarded formula characterizing all counter-examples:
"∃ user domain sess #x.
  (UseBrowserSession( user, domain, sess ) @ #x)
 ∧
  ∀ user.1 domain.1 #y.
   (GenBrowserSession( user.1, domain.1, sess ) @ #y) ⇒ ¬(#y < #x)"
*/
induction
  case empty_trace
  by contradiction
next
  case non_empty_trace
  simplify
  solve( (last(#x))  ∥
         (∃ user domain #y.
           (GenBrowserSession( user, domain, ~sess ) @ #y)
          ∧
           (¬(last(#y))) ∧ (#y < #x)) )
    case case_1
    solve( Browser( $Initiator, $IdP, ~sess ) ▶₀ #x )
      case LinkClick
      by contradiction
    next
      case OIDCAdversaryInit
      by contradiction
    next
      case OIDCClientInit
      by contradiction
    next
      case OIDCClientLogin
      by contradiction
    qed
  next
    case case_2
    by contradiction
  qed
qed

lemma BrowserSessionBinding [reuse, use_induction]:
  all-traces
  "∀ user1 user2 domain1 domain2 sess #x #y.
    ((UseBrowserSession( user1, domain1, sess ) @ #x) ∧
     (GenBrowserSession( user2, domain2, sess ) @ #y)) ⇒
    ((user1 = user2) ∧ (domain1 = domain2))"
/*
guarded formula characterizing all counter-examples:
"∃ user1 user2 domain1 domain2 sess #x #y.
  (UseBrowserSession( user1, domain1, sess ) @ #x) ∧
  (GenBrowserSession( user2, domain2, sess ) @ #y)
 ∧
  ((¬(user1 = user2)) ∨ (¬(domain1 = domain2)))"
*/
induction
  case empty_trace
  by contradiction
next
  case non_empty_trace
  simplify
  solve( GenBrowserSession( user2, domain2, ~sess ) @ #y.2 )
    case LinkClick
    solve( (¬($Initiator = $Initiator.1))  ∥ (¬($IdP = $Party)) )
      case case_1
      solve( (last(#y))  ∥ (last(#x))  ∥
             (($Initiator = $Initiator.1) ∧ ($IdP = $Party)) )
        case case_1
        solve( GenBrowserSession( $Initiator, $IdP, ~sess ) @ #y.1 )
          case LinkClick
          by contradiction
        qed
      next
        case case_2
        solve( GenBrowserSession( user, domain.1, ~sess ) @ #y.1 )
          case LinkClick
          solve( Browser( $Initiator, $IdP, ~sess ) ▶₀ #x )
            case LinkClick
            by contradiction
          next
            case OIDCClientLogin
            by contradiction
          qed
        qed
      next
        case case_3
        by contradiction
      qed
    next
      case case_2
      solve( (last(#y))  ∥ (last(#x))  ∥
             (($Initiator = $Initiator.1) ∧ ($IdP = $Party)) )
        case case_1
        solve( GenBrowserSession( $Initiator, $IdP, ~sess ) @ #y.1 )
          case LinkClick
          by contradiction
        qed
      next
        case case_2
        solve( GenBrowserSession( user, domain.1, ~sess ) @ #y.1 )
          case LinkClick
          solve( Browser( $Initiator, $IdP, ~sess ) ▶₀ #x )
            case LinkClick
            by contradiction
          next
            case OIDCClientLogin
            by contradiction
          qed
        qed
      next
        case case_3
        by contradiction
      qed
    qed
  next
    case OIDCAdversaryInit
    solve( (¬($Initiator = $Initiator.1))  ∥ (¬($IdP = $IdP.1)) )
      case case_1
      solve( (last(#y))  ∥ (last(#x))  ∥
             (($Initiator = $Initiator.1) ∧ ($IdP = $IdP.1)) )
        case case_1
        solve( GenBrowserSession( $Initiator, $IdP, ~sess ) @ #y.1 )
          case OIDCAdversaryInit
          by contradiction
        qed
      next
        case case_2
        solve( GenBrowserSession( user, domain, ~sess ) @ #y.1 )
          case OIDCAdversaryInit
          solve( Browser( $Initiator, $IdP, ~sess ) ▶₀ #x )
            case OIDCAdversaryInit
            by contradiction
          next
            case OIDCClientLogin
            by contradiction
          qed
        qed
      next
        case case_3
        by contradiction
      qed
    next
      case case_2
      solve( (last(#y))  ∥ (last(#x))  ∥
             (($Initiator = $Initiator.1) ∧ ($IdP = $IdP.1)) )
        case case_1
        solve( GenBrowserSession( $Initiator, $IdP, ~sess ) @ #y.1 )
          case OIDCAdversaryInit
          by contradiction
        qed
      next
        case case_2
        solve( GenBrowserSession( user, domain, ~sess ) @ #y.1 )
          case OIDCAdversaryInit
          solve( Browser( $Initiator, $IdP, ~sess ) ▶₀ #x )
            case OIDCAdversaryInit
            by contradiction
          next
            case OIDCClientLogin
            by contradiction
          qed
        qed
      next
        case case_3
        by contradiction
      qed
    qed
  next
    case OIDCClientInit
    solve( (¬($Initiator = $Initiator.1))  ∥ (¬($IdP = $IdP.1)) )
      case case_1
      solve( (last(#y))  ∥ (last(#x))  ∥
             (($Initiator = $Initiator.1) ∧ ($IdP = $IdP.1)) )
        case case_1
        solve( GenBrowserSession( $Initiator, $IdP, ~sess ) @ #y.1 )
          case OIDCClientInit
          by contradiction
        qed
      next
        case case_2
        solve( GenBrowserSession( user, domain, ~sess ) @ #y.1 )
          case OIDCClientInit
          solve( Browser( $Initiator, $IdP, ~sess ) ▶₀ #x )
            case OIDCClientInit
            by contradiction
          next
            case OIDCClientLogin
            by contradiction
          qed
        qed
      next
        case case_3
        by contradiction
      qed
    next
      case case_2
      solve( (last(#y))  ∥ (last(#x))  ∥
             (($Initiator = $Initiator.1) ∧ ($IdP = $IdP.1)) )
        case case_1
        solve( GenBrowserSession( $Initiator, $IdP, ~sess ) @ #y.1 )
          case OIDCClientInit
          by contradiction
        qed
      next
        case case_2
        solve( GenBrowserSession( user, domain, ~sess ) @ #y.1 )
          case OIDCClientInit
          solve( Browser( $Initiator, $IdP, ~sess ) ▶₀ #x )
            case OIDCClientInit
            by contradiction
          next
            case OIDCClientLogin
            by contradiction
          qed
        qed
      next
        case case_3
        by contradiction
      qed
    qed
  qed
qed

lemma BrowserSessionUnique [reuse, use_induction]:
  all-traces
  "∀ user1 user2 domain1 domain2 sess #x #y.
    ((GenBrowserSession( user1, domain1, sess ) @ #x) ∧
     (GenBrowserSession( user2, domain2, sess ) @ #y)) ⇒
    (#x = #y)"
/*
guarded formula characterizing all counter-examples:
"∃ user1 user2 domain1 domain2 sess #x #y.
  (GenBrowserSession( user1, domain1, sess ) @ #x) ∧
  (GenBrowserSession( user2, domain2, sess ) @ #y)
 ∧
  ¬(#x = #y)"
*/
induction
  case empty_trace
  by contradiction
next
  case non_empty_trace
  simplify
  solve( GenBrowserSession( user1, domain1, sess ) @ #x )
    case LinkClick
    solve( GenBrowserSession( user2, domain2, ~sess ) @ #y )
      case LinkClick
      by contradiction
    qed
  next
    case OIDCAdversaryInit
    solve( GenBrowserSession( user2, domain2, ~sess ) @ #y )
      case OIDCAdversaryInit
      by contradiction
    qed
  next
    case OIDCClientInit
    solve( GenBrowserSession( user2, domain2, ~sess ) @ #y )
      case OIDCClientInit
      by contradiction
    qed
  qed
qed

rule (modulo E) OIDCIdPIssueCode:
   [
   St_OIDCServer_Auth( $IdP, ~sess, hash, nonce, code_challenge ),
   In( tlsClientMsg(~sess, cert(~IdPKey), <'login', $Username, pw>) ),
   !IdPAccountServer( $SomeOne, $IdP, $Username, pw ),
   !IdPLtk( $IdP, sk ), !Domain( $IdP, ~IdPKey ),
   !SignalClientDomain( $IdP, ~signalClient ), Fr( ~sess2 ),
   Fr( ~code )
   ]
  --[
  IdPIssueCode( $IdP, $Username, ~code ), IsNonce( nonce ),
  GenCode( $IdP, ~code )
  ]->
   [
   Out( browserForward(~sess, cert(~signalClient),
                       <'code', ~code, nonce>)
   ),
   St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce,
                    code_challenge
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) LinkClick:
   [ Fr( ~sess ), In( <code, nonce> ), !Domain( $Party, ~domain ) ]
  --[ GenBrowserSession( $Initiator, $Party, ~sess ) ]->
   [
   Out( browserForward(~sess, cert(~domain), <'code', code, nonce>) ),
   Browser( $Initiator, $Party, ~sess )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) OIDCClientCodeRedirect:
   [
   Browser( $Initiator, $IdP, ~sess ),
   In( browserForward(~sess, cert(~signalClient),
                      <'code', code, nonce>)
   ),
   !SignalClientDomain( $IdP, ~signalClient ),
   !Domain( $IdP, ~IdPKey ),
   SessionStore( $Initiator, nonce, <$IdP, hash, salt, code_verifier>
   ),
   Fr( ~sessPost )
   ]
  --[
  ClientReceiveCode( $Initiator, $IdP, code ), Neq( nonce, 'null' ),
  IsCode( code )
  ]->
   [
   Out( tlsClientMsg(~sessPost, cert(~IdPKey),
                     <'token_req', code, code_verifier>)
   ),
   St_OIDCClient_CodeReq( $Initiator, $IdP, ~sessPost, hash, salt,
                          code
   ),
   SessionStore( $Initiator, 'null', 'null' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) OIDCIdPTokenIssue:
   [
   In( tlsClientMsg(~sess, cert(~IdPKey),
                    <'token_req', code, code_verifier>)
   ),
   !Domain( $IdP, ~IdPKey ), !IdPLtk( $IdP, sk ),
   St_OIDCIdP_Code( $IdP, $Username, code, hash, nonce, code_challenge
   )
   ]
  --[
  Eq( s256(code_verifier), code_challenge ),
  IdPIssueToken( <<$IdP, $Username, nonce, hash>, 
                  sign(<$IdP, $Username, nonce, hash>, sk)>
  ),
  IsToken( <<$IdP, $Username, nonce, hash>, 
            sign(<$IdP, $Username, nonce, hash>, sk)>
  ),
  UseCode( code ), UseCodeVerifierFor( code_verifier, $IdP )
  ]->
   [
   Out( tlsServerMsg(~sess, ~IdPKey,
                     <'token', <$IdP, $Username, nonce, hash>, 
                      sign(<$IdP, $Username, nonce, hash>, sk)>)
   )
   ]

  /* has exactly the trivial AC variant */

lemma CodeVerifierSecrecy [reuse, use_induction]:
  all-traces
  "∀ verifier idp #x #y.
    ((UseCodeVerifierFor( verifier, idp ) @ #x) ∧
     (GenerateCodeVerifierFor( verifier, idp ) @ #y)) ⇒
    ((¬(∃ #z. !KU( verifier ) @ #z)) ∨
     (∃ domain #z. CompromisedDomain( idp, domain ) @ #z))"
/*
guarded formula characterizing all counter-examples:
"∃ verifier idp #x #y.
  (UseCodeVerifierFor( verifier, idp ) @ #x) ∧
  (GenerateCodeVerifierFor( verifier, idp ) @ #y)
 ∧
  (∃ #z. (!KU( verifier ) @ #z)) ∧
  (∀ domain #z. (CompromisedDomain( idp, domain ) @ #z) ⇒ ⊥)"
*/
induction
  case empty_trace
  by contradiction
next
  case non_empty_trace
  simplify
  solve( !Domain( $IdP, ~IdPKey ) ▶₁ #x )
    case TLSSetup
    solve( !Domain( $IdP, ~IdPKey.1 ) ▶₀ #y )
      case TLSSetup
      solve( (last(#y))  ∥ (last(#x))  ∥
             (∀ #z. (!KU( ~n ) @ #z) ⇒ last(#z))  ∥
             (∃ domain #z.
               (CompromisedDomain( $IdP, domain ) @ #z) ∧ ¬(last(#z))) )
        case case_1
        solve( !KU( tlsClientMsg(~sess, cert(~IdPKey),
                                 <'token_req', code, ~n>)
               ) @ #vk )
          case OIDCClientCodeRedirect_case_1
          by contradiction
        next
          case OIDCClientCodeRedirect_case_2
          by contradiction
        next
          case OIDCClientCodeRedirect_case_3
          by contradiction
        next
          case OIDCClientCodeRedirect_case_4
          by contradiction
        next
          case c_tlsClientMsg
          solve( !KU( ~n ) @ #z )
            case OIDCClientCodeRedirect_case_1
            by contradiction
          next
            case OIDCClientCodeRedirect_case_2
            by contradiction
          next
            case OIDCClientCodeRedirect_case_3
            by contradiction
          next
            case OIDCClientCodeRedirect_case_4
            by contradiction
          next
            case OIDCClientLogin
            by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~n ) @ #y.1 )
          next
            case OIDCIdPIssueCode
            solve( !KU( tlsClientMsg(~n, cert(~IdPKey.1),
                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                   ) @ #vk.9 )
              case c_tlsClientMsg
              by contradiction
            qed
          qed
        qed
      next
        case case_2
        solve( !KU( tlsClientMsg(~sess, cert(~IdPKey),
                                 <'token_req', code, ~n>)
               ) @ #vk )
          case OIDCClientCodeRedirect_case_1
          solve( !KU( ~n ) @ #z )
            case OIDCClientCodeRedirect
            solve( !KU( ~IdPKey ) @ #vk.12 )
              case DomainCompromise
              by contradiction
            next
              case OIDCClientLogin
              by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~IdPKey
                        ) @ #y.1 )
            next
              case OIDCIdPIssueCode
              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                       <'oidc_req', hash.1, nonce.1, code_challenge>)
                     ) @ #vk.15 )
                case c_tlsClientMsg
                by contradiction
              qed
            qed
          next
            case OIDCClientLogin
            by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~n ) @ #y.1 )
          next
            case OIDCIdPIssueCode
            solve( !KU( tlsClientMsg(~n, cert(~IdPKey.1),
                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                   ) @ #vk.14 )
              case c_tlsClientMsg
              by contradiction
            qed
          qed
        next
          case OIDCClientCodeRedirect_case_2
          solve( !KU( ~n ) @ #z )
            case OIDCClientCodeRedirect
            solve( !KU( ~IdPKey ) @ #vk.16 )
              case DomainCompromise
              by contradiction
            next
              case OIDCClientLogin
              by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~IdPKey
                        ) @ #y.1 )
            next
              case OIDCIdPIssueCode
              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                       <'oidc_req', hash.2, nonce.2, code_challenge.1>)
                     ) @ #vk.19 )
                case c_tlsClientMsg
                by contradiction
              qed
            qed
          next
            case OIDCClientLogin
            by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~n ) @ #y.1 )
          next
            case OIDCIdPIssueCode
            solve( !KU( tlsClientMsg(~n, cert(~IdPKey.1),
                                     <'oidc_req', hash.2, nonce.2, code_challenge.1>)
                   ) @ #vk.18 )
              case c_tlsClientMsg
              by contradiction
            qed
          qed
        next
          case OIDCClientCodeRedirect_case_3
          solve( !KU( ~n ) @ #z )
            case OIDCClientCodeRedirect
            solve( !KU( ~IdPKey ) @ #vk.9 )
              case DomainCompromise
              by contradiction
            next
              case OIDCClientLogin
              by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~IdPKey
                        ) @ #y.2 )
            next
              case OIDCIdPIssueCode
              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                       <'oidc_req', hash.1, nonce.1, code_challenge>)
                     ) @ #vk.12 )
                case c_tlsClientMsg
                by contradiction
              qed
            qed
          next
            case OIDCClientLogin
            by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~n ) @ #y.2 )
          next
            case OIDCIdPIssueCode
            solve( !KU( tlsClientMsg(~n, cert(~IdPKey.1),
                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                   ) @ #vk.11 )
              case c_tlsClientMsg
              by contradiction
            qed
          qed
        next
          case OIDCClientCodeRedirect_case_4
          solve( !KU( ~n ) @ #z )
            case OIDCClientCodeRedirect
            solve( !KU( ~IdPKey ) @ #vk.10 )
              case DomainCompromise
              by contradiction
            next
              case OIDCClientLogin
              by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~IdPKey
                        ) @ #y.1 )
            next
              case OIDCIdPIssueCode
              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                       <'oidc_req', hash.1, nonce.2, code_challenge>)
                     ) @ #vk.13 )
                case c_tlsClientMsg
                by contradiction
              qed
            qed
          next
            case OIDCClientLogin
            by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~n ) @ #y.1 )
          next
            case OIDCIdPIssueCode
            solve( !KU( tlsClientMsg(~n, cert(~IdPKey.1),
                                     <'oidc_req', hash.1, nonce.2, code_challenge>)
                   ) @ #vk.12 )
              case c_tlsClientMsg
              by contradiction
            qed
          qed
        next
          case c_tlsClientMsg
          solve( !KU( ~n ) @ #z )
            case OIDCClientCodeRedirect_case_1
            solve( !KU( ~IdPKey ) @ #vk.8 )
              case DomainCompromise
              by contradiction
            next
              case OIDCClientLogin
              by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~IdPKey
                        ) @ #y.1 )
            next
              case OIDCIdPIssueCode
              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                       <'oidc_req', hash.1, nonce.1, code_challenge>)
                     ) @ #vk.21 )
                case c_tlsClientMsg
                by contradiction
              qed
            qed
          next
            case OIDCClientCodeRedirect_case_2
            solve( !KU( ~IdPKey ) @ #vk.8 )
              case DomainCompromise
              by contradiction
            next
              case OIDCClientLogin
              by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~IdPKey
                        ) @ #y.1 )
            next
              case OIDCIdPIssueCode
              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                       <'oidc_req', hash.2, nonce.2, code_challenge.1>)
                     ) @ #vk.25 )
                case c_tlsClientMsg
                by contradiction
              qed
            qed
          next
            case OIDCClientCodeRedirect_case_3
            solve( !KU( ~IdPKey ) @ #vk.8 )
              case DomainCompromise
              by contradiction
            next
              case OIDCClientLogin
              by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~IdPKey
                        ) @ #y.2 )
            next
              case OIDCIdPIssueCode
              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                       <'oidc_req', hash.1, nonce.1, code_challenge>)
                     ) @ #vk.18 )
                case c_tlsClientMsg
                by contradiction
              qed
            qed
          next
            case OIDCClientCodeRedirect_case_4
            solve( !KU( ~IdPKey ) @ #vk.8 )
              case DomainCompromise
              by contradiction
            next
              case OIDCClientLogin
              by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~IdPKey
                        ) @ #y.1 )
            next
              case OIDCIdPIssueCode
              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                       <'oidc_req', hash.1, nonce.2, code_challenge>)
                     ) @ #vk.19 )
                case c_tlsClientMsg
                by contradiction
              qed
            qed
          next
            case OIDCClientLogin
            by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~n ) @ #y.1 )
          next
            case OIDCIdPIssueCode
            solve( !KU( tlsClientMsg(~n, cert(~IdPKey.1),
                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                   ) @ #vk.9 )
              case c_tlsClientMsg
              by contradiction
            qed
          qed
        qed
      next
        case case_3
        solve( !KU( tlsClientMsg(~sess, cert(~IdPKey),
                                 <'token_req', code, ~n>)
               ) @ #vk )
          case OIDCClientCodeRedirect_case_1
          solve( !KU( ~n ) @ #z )
            case OIDCClientCodeRedirect
            solve( !KU( ~IdPKey ) @ #vk.12 )
              case DomainCompromise
              by contradiction
            next
              case OIDCClientLogin
              by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~IdPKey
                        ) @ #y.1 )
            next
              case OIDCIdPIssueCode
              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                       <'oidc_req', hash.1, nonce.1, code_challenge>)
                     ) @ #vk.15 )
                case c_tlsClientMsg
                by contradiction
              qed
            qed
          next
            case OIDCClientLogin
            by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~n ) @ #y.1 )
          next
            case OIDCIdPIssueCode
            solve( !KU( tlsClientMsg(~n, cert(~IdPKey.1),
                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                   ) @ #vk.14 )
              case c_tlsClientMsg
              by contradiction
            qed
          qed
        next
          case OIDCClientCodeRedirect_case_2
          solve( !KU( ~n ) @ #z )
            case OIDCClientCodeRedirect
            solve( !KU( ~IdPKey ) @ #vk.16 )
              case DomainCompromise
              by contradiction
            next
              case OIDCClientLogin
              by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~IdPKey
                        ) @ #y.1 )
            next
              case OIDCIdPIssueCode
              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                       <'oidc_req', hash.2, nonce.2, code_challenge.1>)
                     ) @ #vk.19 )
                case c_tlsClientMsg
                by contradiction
              qed
            qed
          next
            case OIDCClientLogin
            by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~n ) @ #y.1 )
          next
            case OIDCIdPIssueCode
            solve( !KU( tlsClientMsg(~n, cert(~IdPKey.1),
                                     <'oidc_req', hash.2, nonce.2, code_challenge.1>)
                   ) @ #vk.18 )
              case c_tlsClientMsg
              by contradiction
            qed
          qed
        next
          case OIDCClientCodeRedirect_case_3
          solve( !KU( ~n ) @ #z )
            case OIDCClientCodeRedirect
            solve( !KU( ~IdPKey ) @ #vk.9 )
              case DomainCompromise
              by contradiction
            next
              case OIDCClientLogin
              by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~IdPKey
                        ) @ #y.2 )
            next
              case OIDCIdPIssueCode
              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                       <'oidc_req', hash.1, nonce.1, code_challenge>)
                     ) @ #vk.12 )
                case c_tlsClientMsg
                by contradiction
              qed
            qed
          next
            case OIDCClientLogin
            by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~n ) @ #y.2 )
          next
            case OIDCIdPIssueCode
            solve( !KU( tlsClientMsg(~n, cert(~IdPKey.1),
                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                   ) @ #vk.11 )
              case c_tlsClientMsg
              by contradiction
            qed
          qed
        next
          case OIDCClientCodeRedirect_case_4
          solve( !KU( ~n ) @ #z )
            case OIDCClientCodeRedirect
            solve( !KU( ~IdPKey ) @ #vk.10 )
              case DomainCompromise
              by contradiction
            next
              case OIDCClientLogin
              by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~IdPKey
                        ) @ #y.1 )
            next
              case OIDCIdPIssueCode
              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                       <'oidc_req', hash.1, nonce.2, code_challenge>)
                     ) @ #vk.13 )
                case c_tlsClientMsg
                by contradiction
              qed
            qed
          next
            case OIDCClientLogin
            by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~n ) @ #y.1 )
          next
            case OIDCIdPIssueCode
            solve( !KU( tlsClientMsg(~n, cert(~IdPKey.1),
                                     <'oidc_req', hash.1, nonce.2, code_challenge>)
                   ) @ #vk.12 )
              case c_tlsClientMsg
              by contradiction
            qed
          qed
        next
          case c_tlsClientMsg
          by contradiction
        qed
      next
        case case_4
        by contradiction
      qed
    qed
  qed
qed

restriction Neq:
  "∀ a b #x. (Neq( a, b ) @ #x) ⇒ (¬(a = b))"
  // safety formula

lemma TokenFormatAndOTPLearning [sources]:
  all-traces
  "(((∀ token #i.
       (IsToken( token ) @ #i) ⇒
       (∃ first second user idp nonce hashed sk.
         ((((((token = <first, second>) ∧
              (first = <idp, user, nonce, hashed>)) ∧
             ((∃ #h. (!KU( idp ) @ #h) ∧ (#h < #i)) ∨
              (∃ sk.1 #h. ClaimIdPKey( idp, sk.1 ) @ #h))) ∧
            ((∃ #h. (!KU( user ) @ #h) ∧ (#h < #i)) ∨
             (∃ party #h. ClaimUsername( party, idp, user ) @ #h))) ∧
           ((∃ #h. (!KU( nonce ) @ #h) ∧ (#h < #i)) ∨
            (∃ #h. GenNonce( nonce ) @ #h))) ∧
          ((∃ #h. (!KU( hashed ) @ #h) ∧ (#h < #i)) ∨
           (∃ fp salt. hashed = h(fp, salt)))) ∧
         (second = sign(first, sk)))) ∧
     (∀ nonce #i.
       (IsNonce( nonce ) @ #i) ⇒
       ((∃ #h. (!KU( nonce ) @ #h) ∧ (#h < #i)) ∨
        (∃ #h. GenNonce( nonce ) @ #h)))) ∧
    (∀ code #i.
      (IsCode( code ) @ #i) ⇒
      ((∃ #h. (!KU( code ) @ #h) ∧ (#h < #i)) ∨
       (∃ idp #h. GenCode( idp, code ) @ #h)))) ∧
   (∀ chall #i.
     (OTPRespond( chall ) @ #i) ⇒
     ((∃ #j. (OTPChallenge( chall ) @ #j) ∧ (#j < #i)) ∨
      (∃ #j. (!KU( chall ) @ #j) ∧ (#j < #i))))"
/*
guarded formula characterizing all counter-examples:
"((∃ token #i.
    (IsToken( token ) @ #i)
   ∧
    ∀ first second user idp nonce hashed sk.
     (token = <first, second>) ∧
     (first = <idp, user, nonce, hashed>) ∧
     (second = sign(first, sk))
    ⇒
     (((∀ #h. (!KU( idp ) @ #h) ⇒ ¬(#h < #i)) ∧
       (∀ sk.1 #h. (ClaimIdPKey( idp, sk.1 ) @ #h) ⇒ ⊥)) ∨
      ((∀ #h. (!KU( user ) @ #h) ⇒ ¬(#h < #i)) ∧
       (∀ party #h. (ClaimUsername( party, idp, user ) @ #h) ⇒ ⊥)) ∨
      ((∀ #h. (!KU( nonce ) @ #h) ⇒ ¬(#h < #i)) ∧
       (∀ #h. (GenNonce( nonce ) @ #h) ⇒ ⊥)) ∨
      ((∀ #h. (!KU( hashed ) @ #h) ⇒ ¬(#h < #i)) ∧
       (∀ fp salt. (hashed = h(fp, salt)) ⇒ ⊥)))) ∨
  (∃ nonce #i.
    (IsNonce( nonce ) @ #i)
   ∧
    (∀ #h. (!KU( nonce ) @ #h) ⇒ ¬(#h < #i)) ∧
    (∀ #h. (GenNonce( nonce ) @ #h) ⇒ ⊥)) ∨
  (∃ code #i.
    (IsCode( code ) @ #i)
   ∧
    (∀ #h. (!KU( code ) @ #h) ⇒ ¬(#h < #i)) ∧
    (∀ idp #h. (GenCode( idp, code ) @ #h) ⇒ ⊥)) ∨
  (∃ chall #i.
    (OTPRespond( chall ) @ #i)
   ∧
    (∀ #j. (OTPChallenge( chall ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j. (!KU( chall ) @ #j) ⇒ ¬(#j < #i))))"
*/
by sorry

rule (modulo E) pk_req:
   [ Fr( ~sess ), !Domain( $IdP, ~IdPKey ) ]
  -->
   [ Out( tlsClientMsg(~sess, cert(~IdPKey), 'pk_req') ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) OIDCTokenForward:
   [
   St_OIDCClient_CodeReq( $Initiator, $IdP, ~sessPost, hash, salt,
                          code
   ),
   !Domain( $IdP, ~IdPKey ),
   In( tlsServerMsg(~sess, ~IdPKey, <'pk_response', pkIdP>) ),
   In( tlsServerMsg(~sessPost, ~IdPKey,
                    <'token', <$IdP, username, nonce, hash>, signature>)
   ),
   !SignalLtkClient( $Initiator, skInitiator ),
   !SignalLtkServer( phone, pkVerifier )
   ]
  --[
  Eq( h(<trim(pk(skInitiator)), trim(pkVerifier)>, salt), hash ),
  Eq( verify(signature, <$IdP, username, nonce, hash>, pkIdP), true
  ),
  Forward( $Initiator, <<$IdP, username, nonce, hash>, signature> ),
  IsToken( <<$IdP, username, nonce, hash>, signature> ),
  UsedCode( code )
  ]->
   [
   Out( signalMsg(skInitiator, pkVerifier,
                  <'fwd_token', <<$IdP, username, nonce, hash>, signature>, salt>)
   ),
   Out( code )
   ]

  /*
  rule (modulo AC) OIDCTokenForward:
     [
     St_OIDCClient_CodeReq( $Initiator, $IdP, ~sessPost, hash, salt,
                            code
     ),
     !Domain( $IdP, ~IdPKey ),
     In( tlsServerMsg(~sess, ~IdPKey, <'pk_response', pkIdP>) ),
     In( tlsServerMsg(~sessPost, ~IdPKey,
                      <'token', <$IdP, username, nonce, hash>, signature>)
     ),
     !SignalLtkClient( $Initiator, skInitiator ),
     !SignalLtkServer( phone, pkVerifier )
     ]
    --[
    Eq( h(<trim(pk(skInitiator)), trim(pkVerifier)>, salt), hash ),
    Eq( z, true ),
    Forward( $Initiator, <<$IdP, username, nonce, hash>, signature> ),
    IsToken( <<$IdP, username, nonce, hash>, signature> ),
    UsedCode( code )
    ]->
     [
     Out( signalMsg(skInitiator, pkVerifier,
                    <'fwd_token', <<$IdP, username, nonce, hash>, signature>, salt>)
     ),
     Out( code )
     ]
    variants (modulo AC)
    1. $IdP  = $IdP.35
       hash  = hash.41
       nonce = nonce.42
       pkIdP = pkIdP.44
       signature
             = signature.47
       username
             = username.49
       z     = verify(signature.47,
                      <$IdP.35, username.49, nonce.42, hash.41>, pkIdP.44)
    
    2. $IdP  = $IdP.68
       hash  = hash.74
       nonce = nonce.75
       pkIdP = pk(x.134)
       signature
             = sign(<$IdP.68, username.82, nonce.75, hash.74>, x.134)
       username
             = username.82
       z     = true
  */

lemma CodeIsSingleUse [use_induction, reuse]:
  all-traces
  "∀ idp code #a #b.
    ((GenCode( idp, code ) @ #a) ∧ (UsedCode( code ) @ #b)) ⇒
    (((∃ #x.
        (((UseCode( code ) @ #x) ∧ (#a < #x)) ∧ (#x < #b)) ∧
        (∀ #y. (UseCode( code ) @ #y) ⇒ (#x = #y))) ∨
      (∃ domain #x. CompromisedDomain( idp, domain ) @ #x)) ∨
     (∃ signalClient domain #x #y.
       (IsSignalClientFor( idp, signalClient ) @ #x) ∧
       (CompromisedDomain( signalClient, domain ) @ #y)))"
/*
guarded formula characterizing all counter-examples:
"∃ idp code #a #b.
  (GenCode( idp, code ) @ #a) ∧ (UsedCode( code ) @ #b)
 ∧
  (∀ #x.
    (UseCode( code ) @ #x)
   ⇒
    ((¬(#a < #x)) ∨
     (¬(#x < #b)) ∨
     (∃ #y. (UseCode( code ) @ #y) ∧ ¬(#x = #y)))) ∧
  (∀ domain #x. (CompromisedDomain( idp, domain ) @ #x) ⇒ ⊥) ∧
  (∀ signalClient domain #x #y.
    (IsSignalClientFor( idp, signalClient ) @ #x) ∧
    (CompromisedDomain( signalClient, domain ) @ #y)
   ⇒
    ⊥)"
*/
induction
  case empty_trace
  by contradiction
next
  case non_empty_trace
  simplify
  solve( St_OIDCServer_Auth( $IdP, ~sess, hash, nonce, code_challenge
         ) ▶₀ #a )
    case OIDCIdPInit
    solve( St_OIDCClient_CodeReq( $Initiator, $IdP.1, ~sessPost,
                                  h(<trim(pk(skInitiator)), trim(pkVerifier)>, salt), salt, ~code
           ) ▶₀ #b )
      case OIDCClientCodeRedirect_case_1
      solve( (last(#b))  ∥ (last(#a))  ∥
             (∃ #x.
               (UseCode( ~code ) @ #x)
              ∧
               (¬(last(#x))) ∧
               (#a < #x) ∧
               (#x < #b) ∧
               (∀ #y. (UseCode( ~code ) @ #y) ⇒ ((last(#y)) ∨ (#x = #y))))  ∥
             (∃ domain #x.
               (CompromisedDomain( $IdP, domain ) @ #x) ∧ ¬(last(#x)))  ∥
             (∃ signalClient domain #x #y.
               (IsSignalClientFor( $IdP, signalClient ) @ #x) ∧
               (CompromisedDomain( signalClient, domain ) @ #y)
              ∧
               (¬(last(#y))) ∧ (¬(last(#x)))) )
        case case_1
        solve( !KU( browserForward(~sess.2, cert(~signalClient.1),
                                   <'code', ~code, ~n.2>)
               ) @ #vk.4 )
          case OIDCIdPIssueCode
          solve( !KU( tlsServerMsg(~sessPost, ~IdPKey.1,
                                   <'token', 
                                    <$IdP, username, nonce, 
                                     h(<trim(pk(~n.2)), trim(pkVerifier)>, ~n.3)>, 
                                    sign(<$IdP, username, nonce, 
                                          h(<trim(pk(~n.2)), trim(pkVerifier)>, ~n.3)>,
                                         x)
                                   >)
                 ) @ #vk.3 )
            case OIDCIdPTokenIssue
            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                     <'token_req', ~code.1, code_verifier>)
                   ) @ #vk.16 )
              case OIDCClientCodeRedirect
              solve( St_OIDCIdP_Code( $IdP.1, $Username.3, ~code, hash, nonce,
                                      s256(code_verifier)
                     ) ▶₃ #y )
                case OIDCIdPIssueCode
                by contradiction
              qed
            next
              case c_tlsClientMsg
              solve( !KU( ~sessPost ) @ #vk.20 )
                case OIDCClientCodeRedirect
                solve( !KU( ~IdPKey ) @ #vk.27 )
                  case DomainCompromise
                  by contradiction
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~IdPKey ) @ #y )
                next
                  case OIDCIdPIssueCode
                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                           <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                         ) @ #vk.30 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                qed
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~sessPost
                          ) @ #y )
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey.1),
                                         <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                       ) @ #vk.29 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              qed
            qed
          next
            case c_tlsServerMsg
            solve( !KU( ~sessPost ) @ #vk.16 )
              case OIDCClientCodeRedirect
              solve( !KU( ~IdPKey ) @ #vk.29 )
                case DomainCompromise
                by contradiction
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~IdPKey ) @ #y )
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.2),
                                         <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                       ) @ #vk.32 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              qed
            next
              case OIDCClientLogin
              by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~sessPost
                        ) @ #y )
            next
              case OIDCIdPIssueCode
              solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey.2),
                                       <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                     ) @ #vk.31 )
                case c_tlsClientMsg
                by contradiction
              qed
            qed
          qed
        next
          case c_browserForward
          solve( !KU( ~code ) @ #vk.20 )
            case OIDCClientCodeRedirect_case_1
            solve( !KU( browserForward(~sess.10, cert(~signalClient.2),
                                       <'code', ~code, ~n.18>)
                   ) @ #vk.22 )
              case OIDCIdPIssueCode
              solve( !KU( ~IdPKey ) @ #vk.23 )
                case DomainCompromise
                by contradiction
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.2, $IdP.2, ~IdPKey ) @ #y )
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.3),
                                         <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                       ) @ #vk.37 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              qed
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_2
            solve( !KU( browserForward(~sess.10, cert(~signalClient.2),
                                       <'code', ~code, ~n.18>)
                   ) @ #vk.22 )
              case OIDCIdPIssueCode
              solve( !KU( ~IdPKey ) @ #vk.23 )
                case DomainCompromise
                by contradiction
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.2, $IdP.2, ~IdPKey ) @ #y )
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.3),
                                         <'oidc_req', hash.2, nonce.2, code_challenge.2>)
                       ) @ #vk.41 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              qed
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_3
            solve( !KU( browserForward(~sess.10, cert(~signalClient.2),
                                       <'code', ~code, ~n.18>)
                   ) @ #vk.22 )
              case LinkClick
              by contradiction
            next
              case OIDCIdPIssueCode
              solve( !KU( ~IdPKey ) @ #vk.23 )
                case DomainCompromise
                by contradiction
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.2, $IdP.2, ~IdPKey
                          ) @ #y.1 )
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.3),
                                         <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                       ) @ #vk.34 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              qed
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_4
            solve( !KU( browserForward(~sess.10, cert(~signalClient.2),
                                       <'code', ~code, ~n.18>)
                   ) @ #vk.22 )
              case LinkClick
              by contradiction
            next
              case OIDCIdPIssueCode
              solve( !KU( ~IdPKey ) @ #vk.23 )
                case DomainCompromise
                by contradiction
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.2, $IdP.2, ~IdPKey ) @ #y )
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.3),
                                         <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                       ) @ #vk.35 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              qed
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientLogin
            by solve( GenBrowserSession( $Initiator.1, $IdP.2, ~code ) @ #y )
          next
            case OIDCIdPIssueCode_case_1
            solve( !KU( tlsClientMsg(~code, cert(~IdPKey.4),
                                     <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                   ) @ #vk.24 )
              case c_tlsClientMsg
              by contradiction
            qed
          next
            case OIDCIdPIssueCode_case_2
            solve( !KU( ~signalClient ) @ #vk.22 )
              case DomainCompromise
              by contradiction
            next
              case OIDCClientLogin
              by solve( GenBrowserSession( $Initiator.1, $IdP.2, ~signalClient
                        ) @ #y )
            next
              case OIDCIdPIssueCode
              solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.3),
                                       <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                     ) @ #vk.26 )
                case c_tlsClientMsg
                by contradiction
              qed
            qed
          next
            case OIDCTokenForward_case_1
            solve( (∃ #x.
                     (UseCode( ~code ) @ #x)
                    ∧
                     (¬(last(#x))) ∧
                     (#a < #x) ∧
                     (#x < #vr.28) ∧
                     (∀ #y. (UseCode( ~code ) @ #y) ⇒ ((last(#y)) ∨ (#x = #y))))  ∥
                   (∃ domain #x.
                     (CompromisedDomain( $IdP, domain ) @ #x) ∧ ¬(last(#x)))  ∥
                   (∃ signalClient domain #x #y.
                     (IsSignalClientFor( $IdP, signalClient ) @ #x) ∧
                     (CompromisedDomain( signalClient, domain ) @ #y)
                    ∧
                     (¬(last(#y))) ∧ (¬(last(#x)))) )
              case case_1
              by contradiction
            next
              case case_2
              by contradiction
            next
              case case_3
              by contradiction
            qed
          next
            case OIDCTokenForward_case_2
            solve( (∃ #x.
                     (UseCode( ~code ) @ #x)
                    ∧
                     (¬(last(#x))) ∧
                     (#a < #x) ∧
                     (#x < #vr.28) ∧
                     (∀ #y. (UseCode( ~code ) @ #y) ⇒ ((last(#y)) ∨ (#x = #y))))  ∥
                   (∃ domain #x.
                     (CompromisedDomain( $IdP, domain ) @ #x) ∧ ¬(last(#x)))  ∥
                   (∃ signalClient domain #x #y.
                     (IsSignalClientFor( $IdP, signalClient ) @ #x) ∧
                     (CompromisedDomain( signalClient, domain ) @ #y)
                    ∧
                     (¬(last(#y))) ∧ (¬(last(#x)))) )
              case case_1
              by contradiction
            next
              case case_2
              by contradiction
            next
              case case_3
              by contradiction
            qed
          next
            case OIDCTokenForward_case_3
            solve( (∃ #x.
                     (UseCode( ~code ) @ #x)
                    ∧
                     (¬(last(#x))) ∧
                     (#a < #x) ∧
                     (#x < #vr.28) ∧
                     (∀ #y. (UseCode( ~code ) @ #y) ⇒ ((last(#y)) ∨ (#x = #y))))  ∥
                   (∃ domain #x.
                     (CompromisedDomain( $IdP, domain ) @ #x) ∧ ¬(last(#x)))  ∥
                   (∃ signalClient domain #x #y.
                     (IsSignalClientFor( $IdP, signalClient ) @ #x) ∧
                     (CompromisedDomain( signalClient, domain ) @ #y)
                    ∧
                     (¬(last(#y))) ∧ (¬(last(#x)))) )
              case case_1
              by contradiction
            next
              case case_2
              by contradiction
            next
              case case_3
              by contradiction
            qed
          next
            case OIDCTokenForward_case_4
            solve( (∃ #x.
                     (UseCode( ~code ) @ #x)
                    ∧
                     (¬(last(#x))) ∧
                     (#a < #x) ∧
                     (#x < #vr.28) ∧
                     (∀ #y. (UseCode( ~code ) @ #y) ⇒ ((last(#y)) ∨ (#x = #y))))  ∥
                   (∃ domain #x.
                     (CompromisedDomain( $IdP, domain ) @ #x) ∧ ¬(last(#x)))  ∥
                   (∃ signalClient domain #x #y.
                     (IsSignalClientFor( $IdP, signalClient ) @ #x) ∧
                     (CompromisedDomain( signalClient, domain ) @ #y)
                    ∧
                     (¬(last(#y))) ∧ (¬(last(#x)))) )
              case case_1
              by contradiction
            next
              case case_2
              by contradiction
            next
              case case_3
              by contradiction
            qed
          qed
        qed
      next
        case case_2
        solve( !KU( browserForward(~sess.2, cert(~signalClient.1),
                                   <'code', ~code, ~n.2>)
               ) @ #vk.4 )
          case OIDCIdPIssueCode
          by contradiction
        next
          case c_browserForward
          solve( !KU( ~code ) @ #vk.20 )
            case OIDCClientCodeRedirect_case_1
            solve( !KU( browserForward(~sess.10, cert(~signalClient.2),
                                       <'code', ~code, ~n.18>)
                   ) @ #vk.22 )
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_2
            solve( !KU( browserForward(~sess.10, cert(~signalClient.2),
                                       <'code', ~code, ~n.18>)
                   ) @ #vk.22 )
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_3
            solve( !KU( browserForward(~sess.10, cert(~signalClient.2),
                                       <'code', ~code, ~n.18>)
                   ) @ #vk.22 )
              case LinkClick
              by contradiction
            next
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_4
            solve( !KU( browserForward(~sess.10, cert(~signalClient.2),
                                       <'code', ~code, ~n.18>)
                   ) @ #vk.22 )
              case LinkClick
              by contradiction
            next
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientLogin
            by solve( GenBrowserSession( $Initiator.1, $IdP.2, ~code ) @ #y )
          next
            case OIDCIdPIssueCode_case_1
            solve( !KU( tlsClientMsg(~code, cert(~IdPKey.4),
                                     <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                   ) @ #vk.24 )
              case c_tlsClientMsg
              by contradiction
            qed
          next
            case OIDCIdPIssueCode_case_2
            by contradiction
          next
            case OIDCTokenForward_case_1
            solve( !KU( browserForward(~sess.11, cert(~signalClient.2),
                                       <'code', ~code, ~n.19>)
                   ) @ #vk.24 )
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCTokenForward_case_2
            solve( !KU( browserForward(~sess.11, cert(~signalClient.2),
                                       <'code', ~code, ~n.19>)
                   ) @ #vk.24 )
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCTokenForward_case_3
            solve( !KU( browserForward(~sess.11, cert(~signalClient.2),
                                       <'code', ~code, ~n.19>)
                   ) @ #vk.24 )
              case LinkClick
              by contradiction
            next
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCTokenForward_case_4
            solve( !KU( browserForward(~sess.11, cert(~signalClient.2),
                                       <'code', ~code, ~n.19>)
                   ) @ #vk.24 )
              case LinkClick
              by contradiction
            next
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          qed
        qed
      next
        case case_3
        solve( St_OIDCIdP_Code( $IdP.2, $Username.3, ~code, hash.1,
                                nonce.2, s256(code_verifier)
               ) ▶₃ #x.1 )
          case OIDCIdPIssueCode
          solve( St_OIDCIdP_Code( $IdP.2, $Username.1, ~code, hash.1,
                                  nonce.2, s256(code_verifier.1)
                 ) ▶₃ #y )
            case OIDCIdPIssueCode
            by contradiction
          qed
        qed
      next
        case case_4
        by contradiction
      next
        case case_5
        by contradiction
      qed
    next
      case OIDCClientCodeRedirect_case_2
      solve( (last(#b))  ∥ (last(#a))  ∥
             (∃ #x.
               (UseCode( ~code ) @ #x)
              ∧
               (¬(last(#x))) ∧
               (#a < #x) ∧
               (#x < #b) ∧
               (∀ #y. (UseCode( ~code ) @ #y) ⇒ ((last(#y)) ∨ (#x = #y))))  ∥
             (∃ domain #x.
               (CompromisedDomain( $IdP, domain ) @ #x) ∧ ¬(last(#x)))  ∥
             (∃ signalClient domain #x #y.
               (IsSignalClientFor( $IdP, signalClient ) @ #x) ∧
               (CompromisedDomain( signalClient, domain ) @ #y)
              ∧
               (¬(last(#y))) ∧ (¬(last(#x)))) )
        case case_1
        solve( !KU( browserForward(~sess.2, cert(~signalClient.1),
                                   <'code', ~code, ~n.2>)
               ) @ #vk.4 )
          case OIDCIdPIssueCode
          solve( !KU( tlsServerMsg(~sessPost, ~IdPKey.1,
                                   <'token', 
                                    <$IdP, username, nonce, 
                                     h(<trim(pk(~n.2)), trim(pkVerifier)>, ~n.3)>, 
                                    sign(<$IdP, username, nonce, 
                                          h(<trim(pk(~n.2)), trim(pkVerifier)>, ~n.3)>,
                                         x)
                                   >)
                 ) @ #vk.3 )
            case OIDCIdPTokenIssue
            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                     <'token_req', ~code.1, code_verifier>)
                   ) @ #vk.20 )
              case OIDCClientCodeRedirect
              solve( St_OIDCIdP_Code( $IdP.1, $Username.2, ~code, hash.1,
                                      nonce.1, s256(code_verifier)
                     ) ▶₃ #y )
                case OIDCIdPIssueCode
                by contradiction
              qed
            next
              case c_tlsClientMsg
              solve( !KU( ~sessPost ) @ #vk.24 )
                case OIDCClientCodeRedirect
                solve( !KU( ~IdPKey ) @ #vk.31 )
                  case DomainCompromise
                  by contradiction
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~IdPKey ) @ #y )
                next
                  case OIDCIdPIssueCode
                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                           <'oidc_req', hash.2, nonce.2, code_challenge.2>)
                         ) @ #vk.34 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                qed
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~sessPost
                          ) @ #y )
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey.1),
                                         <'oidc_req', hash.2, nonce.2, code_challenge.2>)
                       ) @ #vk.33 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              qed
            qed
          next
            case c_tlsServerMsg
            solve( !KU( ~sessPost ) @ #vk.21 )
              case OIDCClientCodeRedirect
              solve( !KU( ~IdPKey ) @ #vk.32 )
                case DomainCompromise
                by contradiction
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~IdPKey ) @ #y )
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.2),
                                         <'oidc_req', hash.2, nonce.2, code_challenge.2>)
                       ) @ #vk.35 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              qed
            next
              case OIDCClientLogin
              by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~sessPost
                        ) @ #y )
            next
              case OIDCIdPIssueCode
              solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey.2),
                                       <'oidc_req', hash.2, nonce.2, code_challenge.2>)
                     ) @ #vk.34 )
                case c_tlsClientMsg
                by contradiction
              qed
            qed
          qed
        next
          case c_browserForward
          solve( !KU( ~code ) @ #vk.24 )
            case OIDCClientCodeRedirect_case_1
            solve( !KU( browserForward(~sess.7, cert(~signalClient.2),
                                       <'code', ~code, ~n.10>)
                   ) @ #vk.26 )
              case OIDCIdPIssueCode
              solve( !KU( ~IdPKey ) @ #vk.27 )
                case DomainCompromise
                by contradiction
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.2, $IdP.2, ~IdPKey ) @ #y )
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.3),
                                         <'oidc_req', hash.2, nonce.2, code_challenge.2>)
                       ) @ #vk.41 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              qed
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_2
            solve( !KU( browserForward(~sess.7, cert(~signalClient.2),
                                       <'code', ~code, ~n.10>)
                   ) @ #vk.26 )
              case OIDCIdPIssueCode
              solve( !KU( ~IdPKey ) @ #vk.27 )
                case DomainCompromise
                by contradiction
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.2, $IdP.2, ~IdPKey ) @ #y )
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.3),
                                         <'oidc_req', hash.3, nonce.3, code_challenge.3>)
                       ) @ #vk.45 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              qed
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_3
            solve( !KU( browserForward(~sess.7, cert(~signalClient.2),
                                       <'code', ~code, ~n.10>)
                   ) @ #vk.26 )
              case LinkClick
              by contradiction
            next
              case OIDCIdPIssueCode
              solve( !KU( ~IdPKey ) @ #vk.27 )
                case DomainCompromise
                by contradiction
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.2, $IdP.2, ~IdPKey
                          ) @ #y.1 )
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.3),
                                         <'oidc_req', hash.2, nonce.2, code_challenge.2>)
                       ) @ #vk.38 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              qed
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_4
            solve( !KU( browserForward(~sess.7, cert(~signalClient.2),
                                       <'code', ~code, ~n.10>)
                   ) @ #vk.26 )
              case LinkClick
              by contradiction
            next
              case OIDCIdPIssueCode
              solve( !KU( ~IdPKey ) @ #vk.27 )
                case DomainCompromise
                by contradiction
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.2, $IdP.2, ~IdPKey ) @ #y )
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.3),
                                         <'oidc_req', hash.2, nonce.3, code_challenge.2>)
                       ) @ #vk.39 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              qed
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientLogin
            by solve( GenBrowserSession( $Initiator.1, $IdP.2, ~code ) @ #y )
          next
            case OIDCIdPIssueCode_case_1
            solve( !KU( tlsClientMsg(~code, cert(~IdPKey.4),
                                     <'oidc_req', hash.2, nonce.3, code_challenge.2>)
                   ) @ #vk.28 )
              case c_tlsClientMsg
              by contradiction
            qed
          next
            case OIDCIdPIssueCode_case_2
            solve( !KU( ~signalClient ) @ #vk.26 )
              case DomainCompromise
              by contradiction
            next
              case OIDCClientLogin
              by solve( GenBrowserSession( $Initiator.1, $IdP.2, ~signalClient
                        ) @ #y )
            next
              case OIDCIdPIssueCode
              solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.3),
                                       <'oidc_req', hash.2, nonce.3, code_challenge.2>)
                     ) @ #vk.30 )
                case c_tlsClientMsg
                by contradiction
              qed
            qed
          next
            case OIDCTokenForward_case_1
            solve( (∃ #x.
                     (UseCode( ~code ) @ #x)
                    ∧
                     (¬(last(#x))) ∧
                     (#a < #x) ∧
                     (#x < #vr.19) ∧
                     (∀ #y. (UseCode( ~code ) @ #y) ⇒ ((last(#y)) ∨ (#x = #y))))  ∥
                   (∃ domain #x.
                     (CompromisedDomain( $IdP, domain ) @ #x) ∧ ¬(last(#x)))  ∥
                   (∃ signalClient domain #x #y.
                     (IsSignalClientFor( $IdP, signalClient ) @ #x) ∧
                     (CompromisedDomain( signalClient, domain ) @ #y)
                    ∧
                     (¬(last(#y))) ∧ (¬(last(#x)))) )
              case case_1
              by contradiction
            next
              case case_2
              by contradiction
            next
              case case_3
              by contradiction
            qed
          next
            case OIDCTokenForward_case_2
            solve( (∃ #x.
                     (UseCode( ~code ) @ #x)
                    ∧
                     (¬(last(#x))) ∧
                     (#a < #x) ∧
                     (#x < #vr.19) ∧
                     (∀ #y. (UseCode( ~code ) @ #y) ⇒ ((last(#y)) ∨ (#x = #y))))  ∥
                   (∃ domain #x.
                     (CompromisedDomain( $IdP, domain ) @ #x) ∧ ¬(last(#x)))  ∥
                   (∃ signalClient domain #x #y.
                     (IsSignalClientFor( $IdP, signalClient ) @ #x) ∧
                     (CompromisedDomain( signalClient, domain ) @ #y)
                    ∧
                     (¬(last(#y))) ∧ (¬(last(#x)))) )
              case case_1
              by contradiction
            next
              case case_2
              by contradiction
            next
              case case_3
              by contradiction
            qed
          next
            case OIDCTokenForward_case_3
            solve( (∃ #x.
                     (UseCode( ~code ) @ #x)
                    ∧
                     (¬(last(#x))) ∧
                     (#a < #x) ∧
                     (#x < #vr.19) ∧
                     (∀ #y. (UseCode( ~code ) @ #y) ⇒ ((last(#y)) ∨ (#x = #y))))  ∥
                   (∃ domain #x.
                     (CompromisedDomain( $IdP, domain ) @ #x) ∧ ¬(last(#x)))  ∥
                   (∃ signalClient domain #x #y.
                     (IsSignalClientFor( $IdP, signalClient ) @ #x) ∧
                     (CompromisedDomain( signalClient, domain ) @ #y)
                    ∧
                     (¬(last(#y))) ∧ (¬(last(#x)))) )
              case case_1
              by contradiction
            next
              case case_2
              by contradiction
            next
              case case_3
              by contradiction
            qed
          next
            case OIDCTokenForward_case_4
            solve( (∃ #x.
                     (UseCode( ~code ) @ #x)
                    ∧
                     (¬(last(#x))) ∧
                     (#a < #x) ∧
                     (#x < #vr.19) ∧
                     (∀ #y. (UseCode( ~code ) @ #y) ⇒ ((last(#y)) ∨ (#x = #y))))  ∥
                   (∃ domain #x.
                     (CompromisedDomain( $IdP, domain ) @ #x) ∧ ¬(last(#x)))  ∥
                   (∃ signalClient domain #x #y.
                     (IsSignalClientFor( $IdP, signalClient ) @ #x) ∧
                     (CompromisedDomain( signalClient, domain ) @ #y)
                    ∧
                     (¬(last(#y))) ∧ (¬(last(#x)))) )
              case case_1
              by contradiction
            next
              case case_2
              by contradiction
            next
              case case_3
              by contradiction
            qed
          qed
        qed
      next
        case case_2
        solve( !KU( browserForward(~sess.2, cert(~signalClient.1),
                                   <'code', ~code, ~n.2>)
               ) @ #vk.4 )
          case OIDCIdPIssueCode
          by contradiction
        next
          case c_browserForward
          solve( !KU( ~code ) @ #vk.24 )
            case OIDCClientCodeRedirect_case_1
            solve( !KU( browserForward(~sess.7, cert(~signalClient.2),
                                       <'code', ~code, ~n.10>)
                   ) @ #vk.26 )
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_2
            solve( !KU( browserForward(~sess.7, cert(~signalClient.2),
                                       <'code', ~code, ~n.10>)
                   ) @ #vk.26 )
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_3
            solve( !KU( browserForward(~sess.7, cert(~signalClient.2),
                                       <'code', ~code, ~n.10>)
                   ) @ #vk.26 )
              case LinkClick
              by contradiction
            next
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_4
            solve( !KU( browserForward(~sess.7, cert(~signalClient.2),
                                       <'code', ~code, ~n.10>)
                   ) @ #vk.26 )
              case LinkClick
              by contradiction
            next
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientLogin
            by solve( GenBrowserSession( $Initiator.1, $IdP.2, ~code ) @ #y )
          next
            case OIDCIdPIssueCode_case_1
            solve( !KU( tlsClientMsg(~code, cert(~IdPKey.4),
                                     <'oidc_req', hash.2, nonce.3, code_challenge.2>)
                   ) @ #vk.28 )
              case c_tlsClientMsg
              by contradiction
            qed
          next
            case OIDCIdPIssueCode_case_2
            by contradiction
          next
            case OIDCTokenForward_case_1
            solve( !KU( browserForward(~sess.8, cert(~signalClient.2),
                                       <'code', ~code, ~n.11>)
                   ) @ #vk.28 )
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCTokenForward_case_2
            solve( !KU( browserForward(~sess.8, cert(~signalClient.2),
                                       <'code', ~code, ~n.11>)
                   ) @ #vk.28 )
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCTokenForward_case_3
            solve( !KU( browserForward(~sess.8, cert(~signalClient.2),
                                       <'code', ~code, ~n.11>)
                   ) @ #vk.28 )
              case LinkClick
              by contradiction
            next
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCTokenForward_case_4
            solve( !KU( browserForward(~sess.8, cert(~signalClient.2),
                                       <'code', ~code, ~n.11>)
                   ) @ #vk.28 )
              case LinkClick
              by contradiction
            next
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          qed
        qed
      next
        case case_3
        solve( St_OIDCIdP_Code( $IdP.2, $Username.2, ~code, hash.2,
                                nonce.3, s256(code_verifier)
               ) ▶₃ #x.1 )
          case OIDCIdPIssueCode
          solve( St_OIDCIdP_Code( $IdP.2, $Username.1, ~code, hash.1,
                                  nonce.2, s256(code_verifier.1)
                 ) ▶₃ #y )
            case OIDCIdPIssueCode
            by contradiction
          qed
        qed
      next
        case case_4
        by contradiction
      next
        case case_5
        by contradiction
      qed
    next
      case OIDCClientCodeRedirect_case_3
      solve( (last(#b))  ∥ (last(#a))  ∥
             (∃ #x.
               (UseCode( ~code ) @ #x)
              ∧
               (¬(last(#x))) ∧
               (#a < #x) ∧
               (#x < #b) ∧
               (∀ #y. (UseCode( ~code ) @ #y) ⇒ ((last(#y)) ∨ (#x = #y))))  ∥
             (∃ domain #x.
               (CompromisedDomain( $IdP, domain ) @ #x) ∧ ¬(last(#x)))  ∥
             (∃ signalClient domain #x #y.
               (IsSignalClientFor( $IdP, signalClient ) @ #x) ∧
               (CompromisedDomain( signalClient, domain ) @ #y)
              ∧
               (¬(last(#y))) ∧ (¬(last(#x)))) )
        case case_1
        solve( !KU( browserForward(~sess.2, cert(~signalClient.1),
                                   <'code', ~code, ~n.2>)
               ) @ #vk.4 )
          case LinkClick
          solve( !KU( ~code ) @ #vk.13 )
            case OIDCClientCodeRedirect_case_1
            solve( !KU( browserForward(~sess.8, cert(~signalClient.2),
                                       <'code', ~code, ~n.11>)
                   ) @ #vk.15 )
              case OIDCIdPIssueCode
              solve( !KU( ~IdPKey ) @ #vk.16 )
                case DomainCompromise
                by contradiction
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.2, $IdP.1, ~IdPKey
                          ) @ #y.1 )
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.2),
                                         <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                       ) @ #vk.30 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              qed
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_2
            solve( !KU( browserForward(~sess.8, cert(~signalClient.2),
                                       <'code', ~code, ~n.11>)
                   ) @ #vk.15 )
              case OIDCIdPIssueCode
              solve( !KU( ~IdPKey ) @ #vk.16 )
                case DomainCompromise
                by contradiction
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.2, $IdP.1, ~IdPKey
                          ) @ #y.1 )
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.2),
                                         <'oidc_req', hash.2, nonce.2, code_challenge.2>)
                       ) @ #vk.34 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              qed
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_3
            solve( !KU( browserForward(~sess.8, cert(~signalClient.2),
                                       <'code', ~code, ~n.11>)
                   ) @ #vk.15 )
              case LinkClick
              by contradiction
            next
              case OIDCIdPIssueCode
              solve( !KU( ~IdPKey ) @ #vk.16 )
                case DomainCompromise
                by contradiction
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.2, $IdP.1, ~IdPKey
                          ) @ #y.2 )
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.2),
                                         <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                       ) @ #vk.27 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              qed
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_4
            solve( !KU( browserForward(~sess.8, cert(~signalClient.2),
                                       <'code', ~code, ~n.11>)
                   ) @ #vk.15 )
              case LinkClick
              by contradiction
            next
              case OIDCIdPIssueCode
              solve( !KU( ~IdPKey ) @ #vk.16 )
                case DomainCompromise
                by contradiction
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.2, $IdP.1, ~IdPKey
                          ) @ #y.1 )
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.2),
                                         <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                       ) @ #vk.28 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              qed
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientLogin
            by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~code ) @ #y.1 )
          next
            case OIDCIdPIssueCode_case_1
            solve( !KU( tlsClientMsg(~code, cert(~IdPKey.3),
                                     <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                   ) @ #vk.17 )
              case c_tlsClientMsg
              by contradiction
            qed
          next
            case OIDCIdPIssueCode_case_2
            solve( !KU( ~signalClient ) @ #vk.15 )
              case DomainCompromise
              by contradiction
            next
              case OIDCClientLogin
              by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~signalClient
                        ) @ #y.1 )
            next
              case OIDCIdPIssueCode
              solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.2),
                                       <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                     ) @ #vk.19 )
                case c_tlsClientMsg
                by contradiction
              qed
            qed
          next
            case OIDCTokenForward_case_1
            solve( (∃ #x.
                     (UseCode( ~code ) @ #x)
                    ∧
                     (¬(last(#x))) ∧
                     (#a < #x) ∧
                     (#x < #vr.20) ∧
                     (∀ #y. (UseCode( ~code ) @ #y) ⇒ ((last(#y)) ∨ (#x = #y))))  ∥
                   (∃ domain #x.
                     (CompromisedDomain( $IdP, domain ) @ #x) ∧ ¬(last(#x)))  ∥
                   (∃ signalClient domain #x #y.
                     (IsSignalClientFor( $IdP, signalClient ) @ #x) ∧
                     (CompromisedDomain( signalClient, domain ) @ #y)
                    ∧
                     (¬(last(#y))) ∧ (¬(last(#x)))) )
              case case_1
              by contradiction
            next
              case case_2
              by contradiction
            next
              case case_3
              by contradiction
            qed
          next
            case OIDCTokenForward_case_2
            solve( (∃ #x.
                     (UseCode( ~code ) @ #x)
                    ∧
                     (¬(last(#x))) ∧
                     (#a < #x) ∧
                     (#x < #vr.20) ∧
                     (∀ #y. (UseCode( ~code ) @ #y) ⇒ ((last(#y)) ∨ (#x = #y))))  ∥
                   (∃ domain #x.
                     (CompromisedDomain( $IdP, domain ) @ #x) ∧ ¬(last(#x)))  ∥
                   (∃ signalClient domain #x #y.
                     (IsSignalClientFor( $IdP, signalClient ) @ #x) ∧
                     (CompromisedDomain( signalClient, domain ) @ #y)
                    ∧
                     (¬(last(#y))) ∧ (¬(last(#x)))) )
              case case_1
              by contradiction
            next
              case case_2
              by contradiction
            next
              case case_3
              by contradiction
            qed
          next
            case OIDCTokenForward_case_3
            solve( (∃ #x.
                     (UseCode( ~code ) @ #x)
                    ∧
                     (¬(last(#x))) ∧
                     (#a < #x) ∧
                     (#x < #vr.20) ∧
                     (∀ #y. (UseCode( ~code ) @ #y) ⇒ ((last(#y)) ∨ (#x = #y))))  ∥
                   (∃ domain #x.
                     (CompromisedDomain( $IdP, domain ) @ #x) ∧ ¬(last(#x)))  ∥
                   (∃ signalClient domain #x #y.
                     (IsSignalClientFor( $IdP, signalClient ) @ #x) ∧
                     (CompromisedDomain( signalClient, domain ) @ #y)
                    ∧
                     (¬(last(#y))) ∧ (¬(last(#x)))) )
              case case_1
              by contradiction
            next
              case case_2
              by contradiction
            next
              case case_3
              by contradiction
            qed
          next
            case OIDCTokenForward_case_4
            solve( (∃ #x.
                     (UseCode( ~code ) @ #x)
                    ∧
                     (¬(last(#x))) ∧
                     (#a < #x) ∧
                     (#x < #vr.20) ∧
                     (∀ #y. (UseCode( ~code ) @ #y) ⇒ ((last(#y)) ∨ (#x = #y))))  ∥
                   (∃ domain #x.
                     (CompromisedDomain( $IdP, domain ) @ #x) ∧ ¬(last(#x)))  ∥
                   (∃ signalClient domain #x #y.
                     (IsSignalClientFor( $IdP, signalClient ) @ #x) ∧
                     (CompromisedDomain( signalClient, domain ) @ #y)
                    ∧
                     (¬(last(#y))) ∧ (¬(last(#x)))) )
              case case_1
              by contradiction
            next
              case case_2
              by contradiction
            next
              case case_3
              by contradiction
            qed
          qed
        next
          case OIDCIdPIssueCode
          solve( !KU( tlsServerMsg(~sessPost, ~IdPKey.1,
                                   <'token', 
                                    <$IdP, username, nonce, 
                                     h(<trim(pk(~n.2)), trim(pkVerifier)>, ~n.3)>, 
                                    sign(<$IdP, username, nonce, 
                                          h(<trim(pk(~n.2)), trim(pkVerifier)>, ~n.3)>,
                                         x)
                                   >)
                 ) @ #vk.3 )
            case OIDCIdPTokenIssue
            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                     <'token_req', ~code.1, code_verifier>)
                   ) @ #vk.13 )
              case OIDCClientCodeRedirect
              solve( St_OIDCIdP_Code( $IdP.1, $Username.3, ~code, hash, nonce,
                                      s256(code_verifier)
                     ) ▶₃ #y )
                case OIDCIdPIssueCode
                by contradiction
              qed
            next
              case c_tlsClientMsg
              solve( !KU( ~sessPost ) @ #vk.17 )
                case OIDCClientCodeRedirect
                solve( !KU( ~IdPKey ) @ #vk.24 )
                  case DomainCompromise
                  by contradiction
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~IdPKey
                            ) @ #y.1 )
                next
                  case OIDCIdPIssueCode
                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                           <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                         ) @ #vk.27 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                qed
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~sessPost
                          ) @ #y.1 )
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey.1),
                                         <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                       ) @ #vk.26 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              qed
            qed
          next
            case c_tlsServerMsg
            solve( !KU( ~sessPost ) @ #vk.13 )
              case OIDCClientCodeRedirect
              solve( !KU( ~IdPKey ) @ #vk.26 )
                case DomainCompromise
                by contradiction
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~IdPKey
                          ) @ #y.1 )
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.2),
                                         <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                       ) @ #vk.29 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              qed
            next
              case OIDCClientLogin
              by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~sessPost
                        ) @ #y.1 )
            next
              case OIDCIdPIssueCode
              solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey.2),
                                       <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                     ) @ #vk.28 )
                case c_tlsClientMsg
                by contradiction
              qed
            qed
          qed
        next
          case c_browserForward
          solve( !KU( ~code ) @ #vk.17 )
            case OIDCClientCodeRedirect_case_1
            solve( !KU( browserForward(~sess.8, cert(~signalClient.2),
                                       <'code', ~code, ~n.11>)
                   ) @ #vk.19 )
              case OIDCIdPIssueCode
              solve( !KU( ~IdPKey ) @ #vk.20 )
                case DomainCompromise
                by contradiction
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.2, $IdP.2, ~IdPKey
                          ) @ #y.1 )
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.3),
                                         <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                       ) @ #vk.34 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              qed
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_2
            solve( !KU( browserForward(~sess.8, cert(~signalClient.2),
                                       <'code', ~code, ~n.11>)
                   ) @ #vk.19 )
              case OIDCIdPIssueCode
              solve( !KU( ~IdPKey ) @ #vk.20 )
                case DomainCompromise
                by contradiction
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.2, $IdP.2, ~IdPKey
                          ) @ #y.1 )
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.3),
                                         <'oidc_req', hash.2, nonce.2, code_challenge.2>)
                       ) @ #vk.38 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              qed
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_3
            solve( !KU( browserForward(~sess.8, cert(~signalClient.2),
                                       <'code', ~code, ~n.11>)
                   ) @ #vk.19 )
              case LinkClick
              by contradiction
            next
              case OIDCIdPIssueCode
              solve( !KU( ~IdPKey ) @ #vk.20 )
                case DomainCompromise
                by contradiction
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.2, $IdP.2, ~IdPKey
                          ) @ #y.2 )
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.3),
                                         <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                       ) @ #vk.31 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              qed
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_4
            solve( !KU( browserForward(~sess.8, cert(~signalClient.2),
                                       <'code', ~code, ~n.11>)
                   ) @ #vk.19 )
              case LinkClick
              by contradiction
            next
              case OIDCIdPIssueCode
              solve( !KU( ~IdPKey ) @ #vk.20 )
                case DomainCompromise
                by contradiction
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.2, $IdP.2, ~IdPKey
                          ) @ #y.1 )
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.3),
                                         <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                       ) @ #vk.32 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              qed
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientLogin
            by solve( GenBrowserSession( $Initiator.1, $IdP.2, ~code ) @ #y.1 )
          next
            case OIDCIdPIssueCode_case_1
            solve( !KU( tlsClientMsg(~code, cert(~IdPKey.4),
                                     <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                   ) @ #vk.21 )
              case c_tlsClientMsg
              by contradiction
            qed
          next
            case OIDCIdPIssueCode_case_2
            solve( !KU( ~signalClient ) @ #vk.19 )
              case DomainCompromise
              by contradiction
            next
              case OIDCClientLogin
              by solve( GenBrowserSession( $Initiator.1, $IdP.2, ~signalClient
                        ) @ #y.1 )
            next
              case OIDCIdPIssueCode
              solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.3),
                                       <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                     ) @ #vk.23 )
                case c_tlsClientMsg
                by contradiction
              qed
            qed
          next
            case OIDCTokenForward_case_1
            solve( (∃ #x.
                     (UseCode( ~code ) @ #x)
                    ∧
                     (¬(last(#x))) ∧
                     (#a < #x) ∧
                     (#x < #vr.21) ∧
                     (∀ #y. (UseCode( ~code ) @ #y) ⇒ ((last(#y)) ∨ (#x = #y))))  ∥
                   (∃ domain #x.
                     (CompromisedDomain( $IdP, domain ) @ #x) ∧ ¬(last(#x)))  ∥
                   (∃ signalClient domain #x #y.
                     (IsSignalClientFor( $IdP, signalClient ) @ #x) ∧
                     (CompromisedDomain( signalClient, domain ) @ #y)
                    ∧
                     (¬(last(#y))) ∧ (¬(last(#x)))) )
              case case_1
              by contradiction
            next
              case case_2
              by contradiction
            next
              case case_3
              by contradiction
            qed
          next
            case OIDCTokenForward_case_2
            solve( (∃ #x.
                     (UseCode( ~code ) @ #x)
                    ∧
                     (¬(last(#x))) ∧
                     (#a < #x) ∧
                     (#x < #vr.21) ∧
                     (∀ #y. (UseCode( ~code ) @ #y) ⇒ ((last(#y)) ∨ (#x = #y))))  ∥
                   (∃ domain #x.
                     (CompromisedDomain( $IdP, domain ) @ #x) ∧ ¬(last(#x)))  ∥
                   (∃ signalClient domain #x #y.
                     (IsSignalClientFor( $IdP, signalClient ) @ #x) ∧
                     (CompromisedDomain( signalClient, domain ) @ #y)
                    ∧
                     (¬(last(#y))) ∧ (¬(last(#x)))) )
              case case_1
              by contradiction
            next
              case case_2
              by contradiction
            next
              case case_3
              by contradiction
            qed
          next
            case OIDCTokenForward_case_3
            solve( (∃ #x.
                     (UseCode( ~code ) @ #x)
                    ∧
                     (¬(last(#x))) ∧
                     (#a < #x) ∧
                     (#x < #vr.21) ∧
                     (∀ #y. (UseCode( ~code ) @ #y) ⇒ ((last(#y)) ∨ (#x = #y))))  ∥
                   (∃ domain #x.
                     (CompromisedDomain( $IdP, domain ) @ #x) ∧ ¬(last(#x)))  ∥
                   (∃ signalClient domain #x #y.
                     (IsSignalClientFor( $IdP, signalClient ) @ #x) ∧
                     (CompromisedDomain( signalClient, domain ) @ #y)
                    ∧
                     (¬(last(#y))) ∧ (¬(last(#x)))) )
              case case_1
              by contradiction
            next
              case case_2
              by contradiction
            next
              case case_3
              by contradiction
            qed
          next
            case OIDCTokenForward_case_4
            solve( (∃ #x.
                     (UseCode( ~code ) @ #x)
                    ∧
                     (¬(last(#x))) ∧
                     (#a < #x) ∧
                     (#x < #vr.21) ∧
                     (∀ #y. (UseCode( ~code ) @ #y) ⇒ ((last(#y)) ∨ (#x = #y))))  ∥
                   (∃ domain #x.
                     (CompromisedDomain( $IdP, domain ) @ #x) ∧ ¬(last(#x)))  ∥
                   (∃ signalClient domain #x #y.
                     (IsSignalClientFor( $IdP, signalClient ) @ #x) ∧
                     (CompromisedDomain( signalClient, domain ) @ #y)
                    ∧
                     (¬(last(#y))) ∧ (¬(last(#x)))) )
              case case_1
              by contradiction
            next
              case case_2
              by contradiction
            next
              case case_3
              by contradiction
            qed
          qed
        qed
      next
        case case_2
        solve( !KU( browserForward(~sess.2, cert(~signalClient.1),
                                   <'code', ~code, ~n.2>)
               ) @ #vk.4 )
          case LinkClick
          solve( !KU( ~code ) @ #vk.13 )
            case OIDCClientCodeRedirect_case_1
            solve( !KU( browserForward(~sess.8, cert(~signalClient.2),
                                       <'code', ~code, ~n.11>)
                   ) @ #vk.15 )
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_2
            solve( !KU( browserForward(~sess.8, cert(~signalClient.2),
                                       <'code', ~code, ~n.11>)
                   ) @ #vk.15 )
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_3
            solve( !KU( browserForward(~sess.8, cert(~signalClient.2),
                                       <'code', ~code, ~n.11>)
                   ) @ #vk.15 )
              case LinkClick
              by contradiction
            next
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_4
            solve( !KU( browserForward(~sess.8, cert(~signalClient.2),
                                       <'code', ~code, ~n.11>)
                   ) @ #vk.15 )
              case LinkClick
              by contradiction
            next
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientLogin
            by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~code ) @ #y.1 )
          next
            case OIDCIdPIssueCode_case_1
            solve( !KU( tlsClientMsg(~code, cert(~IdPKey.3),
                                     <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                   ) @ #vk.17 )
              case c_tlsClientMsg
              by contradiction
            qed
          next
            case OIDCIdPIssueCode_case_2
            by contradiction
          next
            case OIDCTokenForward_case_1
            solve( !KU( browserForward(~sess.9, cert(~signalClient.2),
                                       <'code', ~code, ~n.12>)
                   ) @ #vk.17 )
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCTokenForward_case_2
            solve( !KU( browserForward(~sess.9, cert(~signalClient.2),
                                       <'code', ~code, ~n.12>)
                   ) @ #vk.17 )
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCTokenForward_case_3
            solve( !KU( browserForward(~sess.9, cert(~signalClient.2),
                                       <'code', ~code, ~n.12>)
                   ) @ #vk.17 )
              case LinkClick
              by contradiction
            next
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCTokenForward_case_4
            solve( !KU( browserForward(~sess.9, cert(~signalClient.2),
                                       <'code', ~code, ~n.12>)
                   ) @ #vk.17 )
              case LinkClick
              by contradiction
            next
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          qed
        next
          case OIDCIdPIssueCode
          by contradiction
        next
          case c_browserForward
          solve( !KU( ~code ) @ #vk.17 )
            case OIDCClientCodeRedirect_case_1
            solve( !KU( browserForward(~sess.8, cert(~signalClient.2),
                                       <'code', ~code, ~n.11>)
                   ) @ #vk.19 )
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_2
            solve( !KU( browserForward(~sess.8, cert(~signalClient.2),
                                       <'code', ~code, ~n.11>)
                   ) @ #vk.19 )
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_3
            solve( !KU( browserForward(~sess.8, cert(~signalClient.2),
                                       <'code', ~code, ~n.11>)
                   ) @ #vk.19 )
              case LinkClick
              by contradiction
            next
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_4
            solve( !KU( browserForward(~sess.8, cert(~signalClient.2),
                                       <'code', ~code, ~n.11>)
                   ) @ #vk.19 )
              case LinkClick
              by contradiction
            next
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientLogin
            by solve( GenBrowserSession( $Initiator.1, $IdP.2, ~code ) @ #y.1 )
          next
            case OIDCIdPIssueCode_case_1
            solve( !KU( tlsClientMsg(~code, cert(~IdPKey.4),
                                     <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                   ) @ #vk.21 )
              case c_tlsClientMsg
              by contradiction
            qed
          next
            case OIDCIdPIssueCode_case_2
            by contradiction
          next
            case OIDCTokenForward_case_1
            solve( !KU( browserForward(~sess.9, cert(~signalClient.2),
                                       <'code', ~code, ~n.12>)
                   ) @ #vk.21 )
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCTokenForward_case_2
            solve( !KU( browserForward(~sess.9, cert(~signalClient.2),
                                       <'code', ~code, ~n.12>)
                   ) @ #vk.21 )
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCTokenForward_case_3
            solve( !KU( browserForward(~sess.9, cert(~signalClient.2),
                                       <'code', ~code, ~n.12>)
                   ) @ #vk.21 )
              case LinkClick
              by contradiction
            next
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCTokenForward_case_4
            solve( !KU( browserForward(~sess.9, cert(~signalClient.2),
                                       <'code', ~code, ~n.12>)
                   ) @ #vk.21 )
              case LinkClick
              by contradiction
            next
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          qed
        qed
      next
        case case_3
        solve( St_OIDCIdP_Code( $IdP.2, $Username.3, ~code, hash.1,
                                nonce.2, s256(code_verifier)
               ) ▶₃ #x.1 )
          case OIDCIdPIssueCode
          solve( St_OIDCIdP_Code( $IdP.2, $Username.1, ~code, hash.1,
                                  nonce.2, s256(code_verifier.1)
                 ) ▶₃ #y )
            case OIDCIdPIssueCode
            by contradiction
          qed
        qed
      next
        case case_4
        by contradiction
      next
        case case_5
        by contradiction
      qed
    next
      case OIDCClientCodeRedirect_case_4
      solve( (last(#b))  ∥ (last(#a))  ∥
             (∃ #x.
               (UseCode( ~code ) @ #x)
              ∧
               (¬(last(#x))) ∧
               (#a < #x) ∧
               (#x < #b) ∧
               (∀ #y. (UseCode( ~code ) @ #y) ⇒ ((last(#y)) ∨ (#x = #y))))  ∥
             (∃ domain #x.
               (CompromisedDomain( $IdP, domain ) @ #x) ∧ ¬(last(#x)))  ∥
             (∃ signalClient domain #x #y.
               (IsSignalClientFor( $IdP, signalClient ) @ #x) ∧
               (CompromisedDomain( signalClient, domain ) @ #y)
              ∧
               (¬(last(#y))) ∧ (¬(last(#x)))) )
        case case_1
        solve( !KU( browserForward(~sess.2, cert(~signalClient.1),
                                   <'code', ~code, ~n.2>)
               ) @ #vk.4 )
          case LinkClick
          solve( !KU( ~code ) @ #vk.6 )
            case OIDCClientCodeRedirect_case_1
            solve( !KU( browserForward(~sess.7, cert(~signalClient.2),
                                       <'code', ~code, ~n.10>)
                   ) @ #vk.13 )
              case OIDCIdPIssueCode
              solve( !KU( ~IdPKey ) @ #vk.14 )
                case DomainCompromise
                by contradiction
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.2, $IdP.1, ~IdPKey ) @ #y )
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.2),
                                         <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                       ) @ #vk.28 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              qed
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_2
            solve( !KU( browserForward(~sess.7, cert(~signalClient.2),
                                       <'code', ~code, ~n.10>)
                   ) @ #vk.13 )
              case OIDCIdPIssueCode
              solve( !KU( ~IdPKey ) @ #vk.14 )
                case DomainCompromise
                by contradiction
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.2, $IdP.1, ~IdPKey ) @ #y )
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.2),
                                         <'oidc_req', hash.2, nonce.2, code_challenge.2>)
                       ) @ #vk.32 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              qed
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_3
            solve( !KU( browserForward(~sess.7, cert(~signalClient.2),
                                       <'code', ~code, ~n.10>)
                   ) @ #vk.13 )
              case LinkClick
              by contradiction
            next
              case OIDCIdPIssueCode
              solve( !KU( ~IdPKey ) @ #vk.14 )
                case DomainCompromise
                by contradiction
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.2, $IdP.1, ~IdPKey
                          ) @ #y.1 )
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.2),
                                         <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                       ) @ #vk.25 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              qed
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_4
            solve( !KU( browserForward(~sess.7, cert(~signalClient.2),
                                       <'code', ~code, ~n.10>)
                   ) @ #vk.13 )
              case LinkClick
              by contradiction
            next
              case OIDCIdPIssueCode
              solve( !KU( ~IdPKey ) @ #vk.14 )
                case DomainCompromise
                by contradiction
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.2, $IdP.1, ~IdPKey ) @ #y )
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.2),
                                         <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                       ) @ #vk.26 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              qed
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientLogin
            by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~code ) @ #y )
          next
            case OIDCIdPIssueCode_case_1
            solve( !KU( tlsClientMsg(~code, cert(~IdPKey.3),
                                     <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                   ) @ #vk.15 )
              case c_tlsClientMsg
              by contradiction
            qed
          next
            case OIDCIdPIssueCode_case_2
            solve( !KU( ~signalClient ) @ #vk.13 )
              case DomainCompromise
              by contradiction
            next
              case OIDCClientLogin
              by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~signalClient
                        ) @ #y )
            next
              case OIDCIdPIssueCode
              solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.2),
                                       <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                     ) @ #vk.17 )
                case c_tlsClientMsg
                by contradiction
              qed
            qed
          next
            case OIDCTokenForward_case_1
            solve( (∃ #x.
                     (UseCode( ~code ) @ #x)
                    ∧
                     (¬(last(#x))) ∧
                     (#a < #x) ∧
                     (#x < #vr.18) ∧
                     (∀ #y. (UseCode( ~code ) @ #y) ⇒ ((last(#y)) ∨ (#x = #y))))  ∥
                   (∃ domain #x.
                     (CompromisedDomain( $IdP, domain ) @ #x) ∧ ¬(last(#x)))  ∥
                   (∃ signalClient domain #x #y.
                     (IsSignalClientFor( $IdP, signalClient ) @ #x) ∧
                     (CompromisedDomain( signalClient, domain ) @ #y)
                    ∧
                     (¬(last(#y))) ∧ (¬(last(#x)))) )
              case case_1
              by contradiction
            next
              case case_2
              by contradiction
            next
              case case_3
              by contradiction
            qed
          next
            case OIDCTokenForward_case_2
            solve( (∃ #x.
                     (UseCode( ~code ) @ #x)
                    ∧
                     (¬(last(#x))) ∧
                     (#a < #x) ∧
                     (#x < #vr.18) ∧
                     (∀ #y. (UseCode( ~code ) @ #y) ⇒ ((last(#y)) ∨ (#x = #y))))  ∥
                   (∃ domain #x.
                     (CompromisedDomain( $IdP, domain ) @ #x) ∧ ¬(last(#x)))  ∥
                   (∃ signalClient domain #x #y.
                     (IsSignalClientFor( $IdP, signalClient ) @ #x) ∧
                     (CompromisedDomain( signalClient, domain ) @ #y)
                    ∧
                     (¬(last(#y))) ∧ (¬(last(#x)))) )
              case case_1
              by contradiction
            next
              case case_2
              by contradiction
            next
              case case_3
              by contradiction
            qed
          next
            case OIDCTokenForward_case_3
            solve( (∃ #x.
                     (UseCode( ~code ) @ #x)
                    ∧
                     (¬(last(#x))) ∧
                     (#a < #x) ∧
                     (#x < #vr.18) ∧
                     (∀ #y. (UseCode( ~code ) @ #y) ⇒ ((last(#y)) ∨ (#x = #y))))  ∥
                   (∃ domain #x.
                     (CompromisedDomain( $IdP, domain ) @ #x) ∧ ¬(last(#x)))  ∥
                   (∃ signalClient domain #x #y.
                     (IsSignalClientFor( $IdP, signalClient ) @ #x) ∧
                     (CompromisedDomain( signalClient, domain ) @ #y)
                    ∧
                     (¬(last(#y))) ∧ (¬(last(#x)))) )
              case case_1
              by contradiction
            next
              case case_2
              by contradiction
            next
              case case_3
              by contradiction
            qed
          next
            case OIDCTokenForward_case_4
            solve( (∃ #x.
                     (UseCode( ~code ) @ #x)
                    ∧
                     (¬(last(#x))) ∧
                     (#a < #x) ∧
                     (#x < #vr.18) ∧
                     (∀ #y. (UseCode( ~code ) @ #y) ⇒ ((last(#y)) ∨ (#x = #y))))  ∥
                   (∃ domain #x.
                     (CompromisedDomain( $IdP, domain ) @ #x) ∧ ¬(last(#x)))  ∥
                   (∃ signalClient domain #x #y.
                     (IsSignalClientFor( $IdP, signalClient ) @ #x) ∧
                     (CompromisedDomain( signalClient, domain ) @ #y)
                    ∧
                     (¬(last(#y))) ∧ (¬(last(#x)))) )
              case case_1
              by contradiction
            next
              case case_2
              by contradiction
            next
              case case_3
              by contradiction
            qed
          qed
        next
          case OIDCIdPIssueCode
          solve( !KU( tlsServerMsg(~sessPost, ~IdPKey.1,
                                   <'token', 
                                    <$IdP, username, nonce, 
                                     h(<trim(pk(~n.2)), trim(pkVerifier)>, ~n.3)>, 
                                    sign(<$IdP, username, nonce, 
                                          h(<trim(pk(~n.2)), trim(pkVerifier)>, ~n.3)>,
                                         x)
                                   >)
                 ) @ #vk.3 )
            case OIDCIdPTokenIssue
            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                     <'token_req', ~code.2, code_verifier>)
                   ) @ #vk.14 )
              case OIDCClientCodeRedirect
              solve( St_OIDCIdP_Code( $IdP.1, $Username.2, ~code, hash, nonce.1,
                                      s256(code_verifier)
                     ) ▶₃ #y )
                case OIDCIdPIssueCode
                by contradiction
              qed
            next
              case c_tlsClientMsg
              solve( !KU( ~sessPost ) @ #vk.18 )
                case OIDCClientCodeRedirect
                solve( !KU( ~IdPKey ) @ #vk.25 )
                  case DomainCompromise
                  by contradiction
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~IdPKey ) @ #y )
                next
                  case OIDCIdPIssueCode
                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                           <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                         ) @ #vk.28 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                qed
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~sessPost
                          ) @ #y )
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey.1),
                                         <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                       ) @ #vk.27 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              qed
            qed
          next
            case c_tlsServerMsg
            solve( !KU( ~sessPost ) @ #vk.14 )
              case OIDCClientCodeRedirect
              solve( !KU( ~IdPKey ) @ #vk.27 )
                case DomainCompromise
                by contradiction
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~IdPKey ) @ #y )
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.2),
                                         <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                       ) @ #vk.30 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              qed
            next
              case OIDCClientLogin
              by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~sessPost
                        ) @ #y )
            next
              case OIDCIdPIssueCode
              solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey.2),
                                       <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                     ) @ #vk.29 )
                case c_tlsClientMsg
                by contradiction
              qed
            qed
          qed
        next
          case c_browserForward
          solve( !KU( ~code ) @ #vk.18 )
            case OIDCClientCodeRedirect_case_1
            solve( !KU( browserForward(~sess.7, cert(~signalClient.2),
                                       <'code', ~code, ~n.10>)
                   ) @ #vk.20 )
              case OIDCIdPIssueCode
              solve( !KU( ~IdPKey ) @ #vk.21 )
                case DomainCompromise
                by contradiction
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.2, $IdP.2, ~IdPKey ) @ #y )
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.3),
                                         <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                       ) @ #vk.35 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              qed
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_2
            solve( !KU( browserForward(~sess.7, cert(~signalClient.2),
                                       <'code', ~code, ~n.10>)
                   ) @ #vk.20 )
              case OIDCIdPIssueCode
              solve( !KU( ~IdPKey ) @ #vk.21 )
                case DomainCompromise
                by contradiction
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.2, $IdP.2, ~IdPKey ) @ #y )
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.3),
                                         <'oidc_req', hash.2, nonce.3, code_challenge.2>)
                       ) @ #vk.39 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              qed
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_3
            solve( !KU( browserForward(~sess.7, cert(~signalClient.2),
                                       <'code', ~code, ~n.10>)
                   ) @ #vk.20 )
              case LinkClick
              by contradiction
            next
              case OIDCIdPIssueCode
              solve( !KU( ~IdPKey ) @ #vk.21 )
                case DomainCompromise
                by contradiction
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.2, $IdP.2, ~IdPKey
                          ) @ #y.1 )
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.3),
                                         <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                       ) @ #vk.32 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              qed
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_4
            solve( !KU( browserForward(~sess.7, cert(~signalClient.2),
                                       <'code', ~code, ~n.10>)
                   ) @ #vk.20 )
              case LinkClick
              by contradiction
            next
              case OIDCIdPIssueCode
              solve( !KU( ~IdPKey ) @ #vk.21 )
                case DomainCompromise
                by contradiction
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.2, $IdP.2, ~IdPKey ) @ #y )
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.3),
                                         <'oidc_req', hash.1, nonce.3, code_challenge.1>)
                       ) @ #vk.33 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              qed
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientLogin
            by solve( GenBrowserSession( $Initiator.1, $IdP.2, ~code ) @ #y )
          next
            case OIDCIdPIssueCode_case_1
            solve( !KU( tlsClientMsg(~code, cert(~IdPKey.4),
                                     <'oidc_req', hash.1, nonce.3, code_challenge.1>)
                   ) @ #vk.22 )
              case c_tlsClientMsg
              by contradiction
            qed
          next
            case OIDCIdPIssueCode_case_2
            solve( !KU( ~signalClient ) @ #vk.20 )
              case DomainCompromise
              by contradiction
            next
              case OIDCClientLogin
              by solve( GenBrowserSession( $Initiator.1, $IdP.2, ~signalClient
                        ) @ #y )
            next
              case OIDCIdPIssueCode
              solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.3),
                                       <'oidc_req', hash.1, nonce.3, code_challenge.1>)
                     ) @ #vk.24 )
                case c_tlsClientMsg
                by contradiction
              qed
            qed
          next
            case OIDCTokenForward_case_1
            solve( (∃ #x.
                     (UseCode( ~code ) @ #x)
                    ∧
                     (¬(last(#x))) ∧
                     (#a < #x) ∧
                     (#x < #vr.19) ∧
                     (∀ #y. (UseCode( ~code ) @ #y) ⇒ ((last(#y)) ∨ (#x = #y))))  ∥
                   (∃ domain #x.
                     (CompromisedDomain( $IdP, domain ) @ #x) ∧ ¬(last(#x)))  ∥
                   (∃ signalClient domain #x #y.
                     (IsSignalClientFor( $IdP, signalClient ) @ #x) ∧
                     (CompromisedDomain( signalClient, domain ) @ #y)
                    ∧
                     (¬(last(#y))) ∧ (¬(last(#x)))) )
              case case_1
              by contradiction
            next
              case case_2
              by contradiction
            next
              case case_3
              by contradiction
            qed
          next
            case OIDCTokenForward_case_2
            solve( (∃ #x.
                     (UseCode( ~code ) @ #x)
                    ∧
                     (¬(last(#x))) ∧
                     (#a < #x) ∧
                     (#x < #vr.19) ∧
                     (∀ #y. (UseCode( ~code ) @ #y) ⇒ ((last(#y)) ∨ (#x = #y))))  ∥
                   (∃ domain #x.
                     (CompromisedDomain( $IdP, domain ) @ #x) ∧ ¬(last(#x)))  ∥
                   (∃ signalClient domain #x #y.
                     (IsSignalClientFor( $IdP, signalClient ) @ #x) ∧
                     (CompromisedDomain( signalClient, domain ) @ #y)
                    ∧
                     (¬(last(#y))) ∧ (¬(last(#x)))) )
              case case_1
              by contradiction
            next
              case case_2
              by contradiction
            next
              case case_3
              by contradiction
            qed
          next
            case OIDCTokenForward_case_3
            solve( (∃ #x.
                     (UseCode( ~code ) @ #x)
                    ∧
                     (¬(last(#x))) ∧
                     (#a < #x) ∧
                     (#x < #vr.19) ∧
                     (∀ #y. (UseCode( ~code ) @ #y) ⇒ ((last(#y)) ∨ (#x = #y))))  ∥
                   (∃ domain #x.
                     (CompromisedDomain( $IdP, domain ) @ #x) ∧ ¬(last(#x)))  ∥
                   (∃ signalClient domain #x #y.
                     (IsSignalClientFor( $IdP, signalClient ) @ #x) ∧
                     (CompromisedDomain( signalClient, domain ) @ #y)
                    ∧
                     (¬(last(#y))) ∧ (¬(last(#x)))) )
              case case_1
              by contradiction
            next
              case case_2
              by contradiction
            next
              case case_3
              by contradiction
            qed
          next
            case OIDCTokenForward_case_4
            solve( (∃ #x.
                     (UseCode( ~code ) @ #x)
                    ∧
                     (¬(last(#x))) ∧
                     (#a < #x) ∧
                     (#x < #vr.19) ∧
                     (∀ #y. (UseCode( ~code ) @ #y) ⇒ ((last(#y)) ∨ (#x = #y))))  ∥
                   (∃ domain #x.
                     (CompromisedDomain( $IdP, domain ) @ #x) ∧ ¬(last(#x)))  ∥
                   (∃ signalClient domain #x #y.
                     (IsSignalClientFor( $IdP, signalClient ) @ #x) ∧
                     (CompromisedDomain( signalClient, domain ) @ #y)
                    ∧
                     (¬(last(#y))) ∧ (¬(last(#x)))) )
              case case_1
              by contradiction
            next
              case case_2
              by contradiction
            next
              case case_3
              by contradiction
            qed
          qed
        qed
      next
        case case_2
        solve( !KU( browserForward(~sess.2, cert(~signalClient.1),
                                   <'code', ~code, ~n.2>)
               ) @ #vk.4 )
          case LinkClick
          solve( !KU( ~code ) @ #vk.6 )
            case OIDCClientCodeRedirect_case_1
            solve( !KU( browserForward(~sess.7, cert(~signalClient.2),
                                       <'code', ~code, ~n.10>)
                   ) @ #vk.13 )
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_2
            solve( !KU( browserForward(~sess.7, cert(~signalClient.2),
                                       <'code', ~code, ~n.10>)
                   ) @ #vk.13 )
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_3
            solve( !KU( browserForward(~sess.7, cert(~signalClient.2),
                                       <'code', ~code, ~n.10>)
                   ) @ #vk.13 )
              case LinkClick
              by contradiction
            next
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_4
            solve( !KU( browserForward(~sess.7, cert(~signalClient.2),
                                       <'code', ~code, ~n.10>)
                   ) @ #vk.13 )
              case LinkClick
              by contradiction
            next
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientLogin
            by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~code ) @ #y )
          next
            case OIDCIdPIssueCode_case_1
            solve( !KU( tlsClientMsg(~code, cert(~IdPKey.3),
                                     <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                   ) @ #vk.15 )
              case c_tlsClientMsg
              by contradiction
            qed
          next
            case OIDCIdPIssueCode_case_2
            by contradiction
          next
            case OIDCTokenForward_case_1
            solve( !KU( browserForward(~sess.8, cert(~signalClient.2),
                                       <'code', ~code, ~n.11>)
                   ) @ #vk.15 )
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCTokenForward_case_2
            solve( !KU( browserForward(~sess.8, cert(~signalClient.2),
                                       <'code', ~code, ~n.11>)
                   ) @ #vk.15 )
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCTokenForward_case_3
            solve( !KU( browserForward(~sess.8, cert(~signalClient.2),
                                       <'code', ~code, ~n.11>)
                   ) @ #vk.15 )
              case LinkClick
              by contradiction
            next
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCTokenForward_case_4
            solve( !KU( browserForward(~sess.8, cert(~signalClient.2),
                                       <'code', ~code, ~n.11>)
                   ) @ #vk.15 )
              case LinkClick
              by contradiction
            next
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          qed
        next
          case OIDCIdPIssueCode
          by contradiction
        next
          case c_browserForward
          solve( !KU( ~code ) @ #vk.18 )
            case OIDCClientCodeRedirect_case_1
            solve( !KU( browserForward(~sess.7, cert(~signalClient.2),
                                       <'code', ~code, ~n.10>)
                   ) @ #vk.20 )
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_2
            solve( !KU( browserForward(~sess.7, cert(~signalClient.2),
                                       <'code', ~code, ~n.10>)
                   ) @ #vk.20 )
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_3
            solve( !KU( browserForward(~sess.7, cert(~signalClient.2),
                                       <'code', ~code, ~n.10>)
                   ) @ #vk.20 )
              case LinkClick
              by contradiction
            next
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_4
            solve( !KU( browserForward(~sess.7, cert(~signalClient.2),
                                       <'code', ~code, ~n.10>)
                   ) @ #vk.20 )
              case LinkClick
              by contradiction
            next
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCClientLogin
            by solve( GenBrowserSession( $Initiator.1, $IdP.2, ~code ) @ #y )
          next
            case OIDCIdPIssueCode_case_1
            solve( !KU( tlsClientMsg(~code, cert(~IdPKey.4),
                                     <'oidc_req', hash.1, nonce.3, code_challenge.1>)
                   ) @ #vk.22 )
              case c_tlsClientMsg
              by contradiction
            qed
          next
            case OIDCIdPIssueCode_case_2
            by contradiction
          next
            case OIDCTokenForward_case_1
            solve( !KU( browserForward(~sess.8, cert(~signalClient.2),
                                       <'code', ~code, ~n.11>)
                   ) @ #vk.22 )
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCTokenForward_case_2
            solve( !KU( browserForward(~sess.8, cert(~signalClient.2),
                                       <'code', ~code, ~n.11>)
                   ) @ #vk.22 )
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCTokenForward_case_3
            solve( !KU( browserForward(~sess.8, cert(~signalClient.2),
                                       <'code', ~code, ~n.11>)
                   ) @ #vk.22 )
              case LinkClick
              by contradiction
            next
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          next
            case OIDCTokenForward_case_4
            solve( !KU( browserForward(~sess.8, cert(~signalClient.2),
                                       <'code', ~code, ~n.11>)
                   ) @ #vk.22 )
              case LinkClick
              by contradiction
            next
              case OIDCIdPIssueCode
              by contradiction
            next
              case c_browserForward
              by contradiction
            qed
          qed
        qed
      next
        case case_3
        solve( St_OIDCIdP_Code( $IdP.2, $Username.2, ~code, hash.1,
                                nonce.3, s256(code_verifier)
               ) ▶₃ #x.1 )
          case OIDCIdPIssueCode
          solve( St_OIDCIdP_Code( $IdP.2, $Username.1, ~code, hash.1,
                                  nonce.2, s256(code_verifier.1)
                 ) ▶₃ #y )
            case OIDCIdPIssueCode
            by contradiction
          qed
        qed
      next
        case case_4
        by contradiction
      next
        case case_5
        by contradiction
      qed
    qed
  qed
qed

rule (modulo E) OIDCTokenReceive:
   [
   !SignalLtkClient( $Verifier, skVerifier ),
   In( signalMsg(skSender, pk(skVerifier),
                 <'fwd_token', <<IdP, username, nonce, hash>, signature>, salt>)
   ),
   !Domain( IdP, ~IdPKey ), Fr( ~sess )
   ]
  -->
   [
   St_OIDCVerifier( ~sess, pk(skSender), skVerifier,
                    <<IdP, username, nonce, hash>, signature>, salt
   ),
   Out( tlsClientMsg(~sess, cert(~IdPKey), 'pk_req') )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) OIDCTokenVerify:
   [
   St_OIDCVerifier( ~sess, pkInitiator, skVerifier,
                    <<IdP, username, nonce, hash>, signature>, salt
   ),
   !Domain( IdP, ~IdPKey ),
   In( tlsServerMsg(~sess, ~IdPKey, <'pk_response', pkIdP>) )
   ]
  --[
  Eq( h(<trim(pkInitiator), trim(pk(skVerifier))>, salt), hash ),
  Eq( verify(signature, <IdP, username, nonce, hash>, pkIdP), true ),
  AssociateAs( pkInitiator, IdP, username, pk(skVerifier) )
  ]->
   [ ]

  /*
  rule (modulo AC) OIDCTokenVerify:
     [
     St_OIDCVerifier( ~sess, pkInitiator, skVerifier,
                      <<IdP, username, nonce, hash>, signature>, salt
     ),
     !Domain( IdP, ~IdPKey ),
     In( tlsServerMsg(~sess, ~IdPKey, <'pk_response', pkIdP>) )
     ]
    --[
    Eq( h(<trim(pkInitiator), trim(pk(skVerifier))>, salt), hash ),
    Eq( z, true ),
    AssociateAs( pkInitiator, IdP, username, pk(skVerifier) )
    ]->
     [ ]
    variants (modulo AC)
    1. IdP   = IdP.15
       hash  = hash.16
       nonce = nonce.17
       pkIdP = pkIdP.18
       signature
             = signature.21
       username
             = username.23
       z     = verify(signature.21,
                      <IdP.15, username.23, nonce.17, hash.16>, pkIdP.18)
    
    2. IdP   = IdP.21
       hash  = hash.22
       nonce = nonce.23
       pkIdP = pk(x.35)
       signature
             = sign(<IdP.21, username.29, nonce.23, hash.22>, x.35)
       username
             = username.29
       z     = true
  */

restriction Equality:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

lemma NonInjectiveAgreement:
  all-traces
  "∀ pkI idp username pkV initiator skI #i #j.
    (((AssociateAs( pkI, idp, username, pkV ) @ #i) ∧
      (SignalKeyClient( initiator, skI ) @ #j)) ∧
     (pkI = pk(skI))) ⇒
    ((((∃ salt hash nonce code_challenge sess #k #l #m.
         (((((OIDCRequest( initiator, idp, pkV, salt, hash, nonce,
                           code_challenge
              ) @ #k) ∧
             (#k < #i)) ∧
            (AuthenticationRequest( sess, idp, hash, nonce, code_challenge
             ) @ #l)) ∧
           (#l < #i)) ∧
          (AuthenticationResponse( sess, initiator, idp, username ) @ #m)) ∧
         (#m < #i)) ∨
       (∃ domain #k. CompromisedDomain( idp, domain ) @ #k)) ∨
      (∃ signalClient domain #k #l.
        (IsSignalClientFor( idp, signalClient ) @ #k) ∧
        (CompromisedDomain( signalClient, domain ) @ #l))) ∨
     (∃ party #k. CompromisedAccount( party, idp, username ) @ #k))"
/*
guarded formula characterizing all counter-examples:
"∃ pkI idp username pkV initiator skI #i #j.
  (AssociateAs( pkI, idp, username, pkV ) @ #i) ∧
  (SignalKeyClient( initiator, skI ) @ #j) ∧
  (pkI = pk(skI))
 ∧
  (∀ salt hash nonce code_challenge sess #k #l #m.
    (OIDCRequest( initiator, idp, pkV, salt, hash, nonce,
                  code_challenge
     ) @ #k) ∧
    (AuthenticationRequest( sess, idp, hash, nonce, code_challenge
     ) @ #l) ∧
    (AuthenticationResponse( sess, initiator, idp, username ) @ #m)
   ⇒
    ((¬(#k < #i)) ∨ (¬(#l < #i)) ∨ (¬(#m < #i)))) ∧
  (∀ domain #k. (CompromisedDomain( idp, domain ) @ #k) ⇒ ⊥) ∧
  (∀ signalClient domain #k #l.
    (IsSignalClientFor( idp, signalClient ) @ #k) ∧
    (CompromisedDomain( signalClient, domain ) @ #l)
   ⇒
    ⊥) ∧
  (∀ party #k.
    (CompromisedAccount( party, idp, username ) @ #k) ⇒ ⊥)"
*/
simplify
solve( !Domain( idp, ~IdPKey ) ▶₁ #i )
  case TLSSetup
  solve( St_OIDCVerifier( ~sess, pk(~n), skVerifier,
                          <
                           <$A, username, nonce, h(<trim(pk(~n)), trim(pk(skVerifier))>, salt)
                           >, 
                           sign(<$A, username, nonce, 
                                 h(<trim(pk(~n)), trim(pk(skVerifier))>, salt)>,
                                x)
                          >,
                          salt
         ) ▶₀ #i )
    case OIDCTokenReceive
    solve( !KU( signalMsg(~n, pk(~n.1),
                          <'fwd_token', 
                           <<$A, username, nonce, h(<trim(pk(~n)), trim(pk(~n.1))>, salt)>, 
                            sign(<$A, username, nonce, h(<trim(pk(~n)), trim(pk(~n.1))>, salt)
                                 >,
                                 x)
                           >, 
                           salt>)
           ) @ #vk.1 )
      case OIDCTokenForward_case_1
      solve( !KU( browserForward(~sess.4, cert(~signalClient),
                                 <'code', code, ~n.6>)
             ) @ #vk.6 )
        case OIDCIdPIssueCode
        solve( (∃ #x.
                 (UseCode( ~code ) @ #x)
                ∧
                 (#vr.34 < #x) ∧
                 (#x < #vr.9) ∧
                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
               (∃ signalClient domain #x #y.
                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                 (CompromisedDomain( signalClient, domain ) @ #y)) )
          case case_1
          solve( !Domain( $IdP, ~IdPKey.1 ) ▶₁ #x.1 )
            case TLSSetup
            solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey),
                                     <'oidc_req', hash.1, ~n.4, code_challenge>)
                   ) @ #vk.20 )
              case OIDCClientInit
              solve( !KU( tlsClientMsg(~sess.3, cert(~IdPKey.1),
                                       <'token_req', ~code, code_verifier>)
                     ) @ #vk.17 )
                case OIDCClientCodeRedirect_case_1
                solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                  case case_1
                  solve( !KU( browserForward(~sess.10, cert(~signalClient.1),
                                             <'code', ~code, ~n.14>)
                         ) @ #vk.18 )
                    case OIDCIdPIssueCode
                    solve( St_OIDCIdP_Code( $A, $Username, ~code, hash, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( tlsServerMsg(~sessPost, ~IdPKey,
                                               <'token', 
                                                <$A, username, nonce, 
                                                 h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>, 
                                                sign(<$A, username, nonce, 
                                                      h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>,
                                                     x)
                                               >)
                             ) @ #vk.8 )
                        case OIDCIdPTokenIssue
                        solve( !KU( tlsClientMsg(~sess.9, cert(~IdPKey),
                                                 <'oidc_req', 
                                                  h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2), nonce, 
                                                  s256(code_verifier)>)
                               ) @ #vk.20 )
                          case OIDCAdversaryInit
                          solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                   <'token_req', ~code.1, code_verifier>)
                                 ) @ #vk.19 )
                            case c_tlsClientMsg
                            solve( !KU( ~code.1 ) @ #vk.36 )
                              case OIDCClientCodeRedirect_case_1
                              solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.16>)
                                     ) @ #vk.38 )
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientCodeRedirect_case_2
                              solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.16>)
                                     ) @ #vk.38 )
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.39 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash, nonce, code_challenge
                                                           >)
                                         ) @ #vk.47 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientCodeRedirect_case_3
                              solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.16>)
                                     ) @ #vk.38 )
                                case LinkClick
                                by contradiction
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.39 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                            ) @ #y.1 )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash, nonce, code_challenge
                                                           >)
                                         ) @ #vk.49 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientCodeRedirect_case_4
                              solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.16>)
                                     ) @ #vk.38 )
                                case LinkClick
                                by contradiction
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.2, $IdP, ~code.1 ) @ #y )
                            next
                              case OIDCIdPIssueCode_case_1
                              solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                                       <'oidc_req', hash, nonce.1, code_challenge>)
                                     ) @ #vk.40 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            next
                              case OIDCIdPIssueCode_case_2
                              solve( !KU( ~signalClient ) @ #vk.38 )
                                case DomainCompromise
                                by contradiction
                              next
                                case OIDCClientLogin
                                by solve( GenBrowserSession( $Initiator.2, $IdP, ~signalClient
                                          ) @ #y )
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                         <'oidc_req', hash, nonce.1, code_challenge
                                                         >)
                                       ) @ #vk.41 )
                                  case c_tlsClientMsg
                                  by contradiction
                                qed
                              qed
                            next
                              case OIDCTokenForward_case_1
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.30 < #x) ∧
                                       (#x < #vr.35) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            next
                              case OIDCTokenForward_case_2
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.30 < #x) ∧
                                       (#x < #vr.35) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            next
                              case OIDCTokenForward_case_3
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.30 < #x) ∧
                                       (#x < #vr.35) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            next
                              case OIDCTokenForward_case_4
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.30 < #x) ∧
                                       (#x < #vr.35) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            qed
                          qed
                        next
                          case OIDCClientInit
                          solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                   <'token_req', ~code.1, ~n.6>)
                                 ) @ #vk.18 )
                            case OIDCClientCodeRedirect
                            solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey),
                                                     <'login', $Username, pw>)
                                   ) @ #vk.16 )
                              case OIDCClientLogin
                              by contradiction
                            next
                              case c_tlsClientMsg
                              solve( !KU( ~sess.2 ) @ #vk.18 )
                                case OIDCClientInit
                                solve( !KU( ~IdPKey ) @ #vk.25 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash, nonce, code_challenge
                                                           >)
                                         ) @ #vk.28 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case OIDCClientLogin
                                solve( !KU( ~IdPKey ) @ #vk.26 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash, nonce, code_challenge
                                                           >)
                                         ) @ #vk.30 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( ~signalClient.1 ) @ #vk.26 )
                                  case DomainCompromise
                                  solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                                           <'oidc_req', hash, nonce, code_challenge
                                                           >)
                                         ) @ #vk.27 )
                                    case OIDCClientInit
                                    by contradiction
                                  next
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~signalClient.1
                                            ) @ #y )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                                           <'oidc_req', hash.1, nonce.1, 
                                                            code_challenge.1>)
                                         ) @ #vk.31 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              qed
                            qed
                          next
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case c_tlsClientMsg
                          solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                   <'token_req', ~code.1, code_verifier>)
                                 ) @ #vk.19 )
                            case c_tlsClientMsg
                            solve( !KU( ~code.1 ) @ #vk.35 )
                              case OIDCClientCodeRedirect_case_1
                              solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.16>)
                                     ) @ #vk.37 )
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.38 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash, nonce, code_challenge
                                                           >)
                                         ) @ #vk.51 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientCodeRedirect_case_2
                              solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.16>)
                                     ) @ #vk.37 )
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.38 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce.1, 
                                                            code_challenge.1>)
                                         ) @ #vk.55 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientCodeRedirect_case_3
                              solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.16>)
                                     ) @ #vk.37 )
                                case LinkClick
                                by contradiction
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.38 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                            ) @ #y.1 )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash, nonce, code_challenge
                                                           >)
                                         ) @ #vk.48 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientCodeRedirect_case_4
                              solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.16>)
                                     ) @ #vk.37 )
                                case LinkClick
                                by contradiction
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.38 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash, nonce.1, 
                                                            code_challenge>)
                                         ) @ #vk.49 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~code.1 ) @ #y )
                            next
                              case OIDCIdPIssueCode_case_1
                              solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                                       <'oidc_req', hash, nonce.1, code_challenge>)
                                     ) @ #vk.39 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            next
                              case OIDCIdPIssueCode_case_2
                              solve( !KU( ~signalClient ) @ #vk.37 )
                                case DomainCompromise
                                by contradiction
                              next
                                case OIDCClientLogin
                                by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                          ) @ #y )
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                         <'oidc_req', hash, nonce.1, code_challenge
                                                         >)
                                       ) @ #vk.40 )
                                  case c_tlsClientMsg
                                  by contradiction
                                qed
                              qed
                            next
                              case OIDCTokenForward_case_1
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.30 < #x) ∧
                                       (#x < #vr.34) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            next
                              case OIDCTokenForward_case_2
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.30 < #x) ∧
                                       (#x < #vr.34) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            next
                              case OIDCTokenForward_case_3
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.30 < #x) ∧
                                       (#x < #vr.34) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            next
                              case OIDCTokenForward_case_4
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.30 < #x) ∧
                                       (#x < #vr.34) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            qed
                          qed
                        qed
                      next
                        case c_tlsServerMsg
                        solve( !KU( ~IdPKey ) @ #vk.19 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash, nonce.1, code_challenge>)
                                 ) @ #vk.33 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      qed
                    qed
                  next
                    case c_browserForward
                    by solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                               s256(~n.5)
                              ) ▶₃ #x.1 )
                  qed
                next
                  case case_2
                  solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                    case TLSSetup
                    solve( !KU( browserForward(~sess.10, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.18 )
                      case OIDCIdPIssueCode
                      by contradiction
                    next
                      case c_browserForward
                      by solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                 s256(~n.5)
                                ) ▶₃ #x.1 )
                    qed
                  qed
                qed
              next
                case OIDCClientCodeRedirect_case_2
                solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                  case case_1
                  solve( !KU( browserForward(~sess.10, cert(~signalClient.1),
                                             <'code', ~code, ~n.14>)
                         ) @ #vk.18 )
                    case c_browserForward
                    by solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                               s256(~n.5)
                              ) ▶₃ #x.1 )
                  qed
                next
                  case case_2
                  solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                    case TLSSetup
                    solve( !KU( browserForward(~sess.10, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.18 )
                      case c_browserForward
                      by solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                 s256(~n.5)
                                ) ▶₃ #x.1 )
                    qed
                  qed
                qed
              next
                case OIDCClientCodeRedirect_case_3
                solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                  case case_1
                  solve( !KU( browserForward(~sess.10, cert(~signalClient.1),
                                             <'code', ~code, ~n.14>)
                         ) @ #vk.18 )
                    case LinkClick
                    by solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                               s256(~n.6)
                              ) ▶₃ #x.1 )
                  next
                    case c_browserForward
                    by solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                               s256(~n.5)
                              ) ▶₃ #x.1 )
                  qed
                next
                  case case_2
                  solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                    case TLSSetup
                    solve( !KU( browserForward(~sess.10, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.18 )
                      case LinkClick
                      by solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                 s256(~n.6)
                                ) ▶₃ #x.1 )
                    next
                      case c_browserForward
                      by solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                 s256(~n.5)
                                ) ▶₃ #x.1 )
                    qed
                  qed
                qed
              next
                case OIDCClientCodeRedirect_case_4
                solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                  case case_1
                  solve( !KU( browserForward(~sess.10, cert(~signalClient.1),
                                             <'code', ~code, ~n.14>)
                         ) @ #vk.18 )
                    case LinkClick
                    by solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                               s256(~n.5)
                              ) ▶₃ #x.1 )
                  next
                    case c_browserForward
                    by solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                               s256(~n.5)
                              ) ▶₃ #x.1 )
                  qed
                next
                  case case_2
                  solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                    case TLSSetup
                    solve( !KU( browserForward(~sess.10, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.18 )
                      case LinkClick
                      by solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                 s256(~n.5)
                                ) ▶₃ #x.1 )
                    next
                      case c_browserForward
                      by solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                 s256(~n.5)
                                ) ▶₃ #x.1 )
                    qed
                  qed
                qed
              next
                case c_tlsClientMsg
                solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                        s256(code_verifier)
                       ) ▶₃ #x.1 )
                  case OIDCIdPIssueCode
                  solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  qed
                qed
              qed
            next
              case c_tlsClientMsg
              solve( !KU( tlsClientMsg(~sess.3, cert(~IdPKey.1),
                                       <'token_req', ~code, code_verifier>)
                     ) @ #vk.22 )
                case OIDCClientCodeRedirect_case_1
                solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                  case case_1
                  solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                             <'code', ~code, ~n.22>)
                         ) @ #vk.32 )
                    case OIDCIdPIssueCode
                    solve( St_OIDCIdP_Code( $A, $Username, ~code, hash, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( tlsServerMsg(~sessPost, ~IdPKey,
                                               <'token', 
                                                <$A, username, nonce, 
                                                 h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>, 
                                                sign(<$A, username, nonce, 
                                                      h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>,
                                                     x)
                                               >)
                             ) @ #vk.8 )
                        case OIDCIdPTokenIssue
                        solve( !KU( tlsClientMsg(~sess.13, cert(~IdPKey),
                                                 <'oidc_req', 
                                                  h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2), nonce, 
                                                  s256(code_verifier)>)
                               ) @ #vk.34 )
                          case OIDCAdversaryInit
                          solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                   <'token_req', ~code.1, code_verifier>)
                                 ) @ #vk.33 )
                            case c_tlsClientMsg
                            solve( !KU( ~code.1 ) @ #vk.49 )
                              case OIDCClientCodeRedirect_case_1
                              solve( !KU( browserForward(~sess.15, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.24>)
                                     ) @ #vk.51 )
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientCodeRedirect_case_2
                              solve( !KU( browserForward(~sess.15, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.24>)
                                     ) @ #vk.51 )
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.52 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce, 
                                                            code_challenge>)
                                         ) @ #vk.60 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientCodeRedirect_case_3
                              solve( !KU( browserForward(~sess.15, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.24>)
                                     ) @ #vk.51 )
                                case LinkClick
                                by contradiction
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.52 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                            ) @ #y.1 )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce, 
                                                            code_challenge>)
                                         ) @ #vk.62 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientCodeRedirect_case_4
                              solve( !KU( browserForward(~sess.15, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.24>)
                                     ) @ #vk.51 )
                                case LinkClick
                                by contradiction
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.2, $IdP, ~code.1 ) @ #y )
                            next
                              case OIDCIdPIssueCode_case_1
                              solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                                       <'oidc_req', hash.1, nonce.1, code_challenge
                                                       >)
                                     ) @ #vk.53 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            next
                              case OIDCIdPIssueCode_case_2
                              solve( !KU( ~signalClient ) @ #vk.51 )
                                case DomainCompromise
                                by contradiction
                              next
                                case OIDCClientLogin
                                by solve( GenBrowserSession( $Initiator.2, $IdP, ~signalClient
                                          ) @ #y )
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                         <'oidc_req', hash.1, nonce.1, 
                                                          code_challenge>)
                                       ) @ #vk.54 )
                                  case c_tlsClientMsg
                                  by contradiction
                                qed
                              qed
                            next
                              case OIDCTokenForward_case_1
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.40 < #x) ∧
                                       (#x < #vr.45) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            next
                              case OIDCTokenForward_case_2
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.40 < #x) ∧
                                       (#x < #vr.45) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            next
                              case OIDCTokenForward_case_3
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.40 < #x) ∧
                                       (#x < #vr.45) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            next
                              case OIDCTokenForward_case_4
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.40 < #x) ∧
                                       (#x < #vr.45) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            qed
                          qed
                        next
                          case OIDCClientInit
                          solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                   <'token_req', ~code.1, ~n.6>)
                                 ) @ #vk.33 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case c_tlsClientMsg
                          solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                   <'token_req', ~code.1, code_verifier>)
                                 ) @ #vk.34 )
                            case OIDCClientCodeRedirect
                            solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey),
                                                     <'login', $Username, pw>)
                                   ) @ #vk.21 )
                              case OIDCClientLogin
                              by contradiction
                            next
                              case c_tlsClientMsg
                              solve( !KU( s256(~n.6) ) @ #vk.31 )
                                case OIDCClientInit_case_1
                                solve( !KU( ~IdPKey ) @ #vk.37 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash, nonce, code_challenge
                                                           >)
                                         ) @ #vk.40 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case OIDCClientInit_case_2
                                solve( !KU( ~sess.2 ) @ #vk.24 )
                                  case OIDCClientInit
                                  solve( !KU( ~IdPKey ) @ #vk.37 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.40 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case OIDCClientLogin
                                  solve( !KU( ~IdPKey ) @ #vk.38 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.42 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~signalClient.1 ) @ #vk.38 )
                                    case DomainCompromise
                                    solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                                             <'oidc_req', hash, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.39 )
                                      case OIDCClientInit
                                      by contradiction
                                    next
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.1, $IdP.1,
                                                                 ~signalClient.1
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                                             <'oidc_req', hash.1, nonce.1, 
                                                              code_challenge.1>)
                                           ) @ #vk.43 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                qed
                              next
                                case c_s256
                                by contradiction
                              qed
                            qed
                          next
                            case c_tlsClientMsg
                            solve( !KU( ~code.1 ) @ #vk.47 )
                              case OIDCClientCodeRedirect_case_1
                              solve( !KU( browserForward(~sess.15, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.24>)
                                     ) @ #vk.49 )
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.50 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce, 
                                                            code_challenge>)
                                         ) @ #vk.63 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientCodeRedirect_case_2
                              solve( !KU( browserForward(~sess.15, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.24>)
                                     ) @ #vk.49 )
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.50 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.2, nonce.1, 
                                                            code_challenge.1>)
                                         ) @ #vk.67 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientCodeRedirect_case_3
                              solve( !KU( browserForward(~sess.15, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.24>)
                                     ) @ #vk.49 )
                                case LinkClick
                                by contradiction
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.50 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                            ) @ #y.1 )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce, 
                                                            code_challenge>)
                                         ) @ #vk.60 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientCodeRedirect_case_4
                              solve( !KU( browserForward(~sess.15, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.24>)
                                     ) @ #vk.49 )
                                case LinkClick
                                by contradiction
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.50 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce.1, 
                                                            code_challenge>)
                                         ) @ #vk.61 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~code.1 ) @ #y )
                            next
                              case OIDCIdPIssueCode_case_1
                              solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                                       <'oidc_req', hash.1, nonce.1, code_challenge
                                                       >)
                                     ) @ #vk.51 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            next
                              case OIDCIdPIssueCode_case_2
                              solve( !KU( ~signalClient ) @ #vk.49 )
                                case DomainCompromise
                                by contradiction
                              next
                                case OIDCClientLogin
                                by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                          ) @ #y )
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                         <'oidc_req', hash.1, nonce.1, 
                                                          code_challenge>)
                                       ) @ #vk.52 )
                                  case c_tlsClientMsg
                                  by contradiction
                                qed
                              qed
                            next
                              case OIDCTokenForward_case_1
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.40 < #x) ∧
                                       (#x < #vr.44) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            next
                              case OIDCTokenForward_case_2
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.40 < #x) ∧
                                       (#x < #vr.44) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            next
                              case OIDCTokenForward_case_3
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.40 < #x) ∧
                                       (#x < #vr.44) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            next
                              case OIDCTokenForward_case_4
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.40 < #x) ∧
                                       (#x < #vr.44) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            qed
                          qed
                        qed
                      next
                        case c_tlsServerMsg
                        solve( !KU( ~IdPKey ) @ #vk.33 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.47 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      qed
                    qed
                  next
                    case c_browserForward
                    solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~code ) @ #vk.48 )
                        case OIDCClientCodeRedirect_case_1
                        solve( !KU( browserForward(~sess.22, cert(~signalClient.1),
                                                   <'code', ~code, ~n.38>)
                               ) @ #vk.50 )
                          case OIDCIdPIssueCode
                          solve( !KU( ~IdPKey ) @ #vk.50 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                                   ) @ #vk.53 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_2
                        solve( !KU( browserForward(~sess.22, cert(~signalClient.1),
                                                   <'code', ~code, ~n.38>)
                               ) @ #vk.50 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_3
                        solve( !KU( browserForward(~sess.22, cert(~signalClient.1),
                                                   <'code', ~code, ~n.38>)
                               ) @ #vk.50 )
                          case LinkClick
                          by contradiction
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_4
                        solve( !KU( browserForward(~sess.22, cert(~signalClient.1),
                                                   <'code', ~code, ~n.38>)
                               ) @ #vk.50 )
                          case LinkClick
                          by contradiction
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                      next
                        case OIDCIdPIssueCode_case_1
                        solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge>)
                               ) @ #vk.52 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      next
                        case OIDCIdPIssueCode_case_2
                        solve( !KU( ~signalClient ) @ #vk.50 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                    ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.53 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case OIDCTokenForward_case_1
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.34 < #x) ∧
                                 (#x < #vr.59) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_2
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.34 < #x) ∧
                                 (#x < #vr.59) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_3
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.34 < #x) ∧
                                 (#x < #vr.59) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_4
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.34 < #x) ∧
                                 (#x < #vr.59) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                    case TLSSetup
                    solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                               <'code', ~code, ~n.22>)
                           ) @ #vk.32 )
                      case OIDCIdPIssueCode
                      by contradiction
                    next
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        by contradiction
                      qed
                    qed
                  qed
                qed
              next
                case OIDCClientCodeRedirect_case_2
                solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                  case case_1
                  solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                             <'code', ~code, ~n.22>)
                         ) @ #vk.32 )
                    case c_browserForward
                    solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~code ) @ #vk.52 )
                        case OIDCClientCodeRedirect_case_1
                        solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                   <'code', ~code, ~n.30>)
                               ) @ #vk.54 )
                          case OIDCIdPIssueCode
                          solve( !KU( ~IdPKey ) @ #vk.54 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.2, nonce.2, code_challenge.1
                                                     >)
                                   ) @ #vk.57 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_2
                        solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                   <'code', ~code, ~n.30>)
                               ) @ #vk.54 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_3
                        solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                   <'code', ~code, ~n.30>)
                               ) @ #vk.54 )
                          case LinkClick
                          by contradiction
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_4
                        solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                   <'code', ~code, ~n.30>)
                               ) @ #vk.54 )
                          case LinkClick
                          by contradiction
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                      next
                        case OIDCIdPIssueCode_case_1
                        solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                 <'oidc_req', hash.2, nonce.2, code_challenge.1>)
                               ) @ #vk.56 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      next
                        case OIDCIdPIssueCode_case_2
                        solve( !KU( ~signalClient ) @ #vk.54 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                    ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                   <'oidc_req', hash.2, nonce.2, code_challenge.1>)
                                 ) @ #vk.57 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case OIDCTokenForward_case_1
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.34 < #x) ∧
                                 (#x < #vr.50) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_2
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.34 < #x) ∧
                                 (#x < #vr.50) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_3
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.34 < #x) ∧
                                 (#x < #vr.50) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_4
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.34 < #x) ∧
                                 (#x < #vr.50) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                    case TLSSetup
                    solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                               <'code', ~code, ~n.22>)
                           ) @ #vk.32 )
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        by contradiction
                      qed
                    qed
                  qed
                qed
              next
                case OIDCClientCodeRedirect_case_3
                solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                  case case_1
                  solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                             <'code', ~code, ~n.22>)
                         ) @ #vk.32 )
                    case LinkClick
                    solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                            s256(~n.6)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~code ) @ #vk.41 )
                        case OIDCClientCodeRedirect_case_1
                        solve( !KU( browserForward(~sess.20, cert(~signalClient),
                                                   <'code', ~code, ~n.31>)
                               ) @ #vk.43 )
                          case OIDCIdPIssueCode
                          solve( !KU( ~IdPKey ) @ #vk.43 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                                   ) @ #vk.46 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_2
                        solve( !KU( browserForward(~sess.20, cert(~signalClient),
                                                   <'code', ~code, ~n.31>)
                               ) @ #vk.43 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_3
                        solve( !KU( browserForward(~sess.20, cert(~signalClient),
                                                   <'code', ~code, ~n.31>)
                               ) @ #vk.43 )
                          case LinkClick
                          by contradiction
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_4
                        solve( !KU( browserForward(~sess.20, cert(~signalClient),
                                                   <'code', ~code, ~n.31>)
                               ) @ #vk.43 )
                          case LinkClick
                          by contradiction
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode_case_1
                        solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge>)
                               ) @ #vk.45 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      next
                        case OIDCIdPIssueCode_case_2
                        solve( !KU( ~IdPKey ) @ #vk.43 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.46 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case OIDCTokenForward_case_1
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.33 < #x) ∧
                                 (#x < #vr.51) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_2
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.33 < #x) ∧
                                 (#x < #vr.51) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_3
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.33 < #x) ∧
                                 (#x < #vr.51) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_4
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.33 < #x) ∧
                                 (#x < #vr.51) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      qed
                    qed
                  next
                    case c_browserForward
                    solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~code ) @ #vk.45 )
                        case OIDCClientCodeRedirect_case_1
                        solve( !KU( browserForward(~sess.20, cert(~signalClient.1),
                                                   <'code', ~code, ~n.31>)
                               ) @ #vk.47 )
                          case OIDCIdPIssueCode
                          solve( !KU( ~IdPKey ) @ #vk.47 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                                   ) @ #vk.50 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_2
                        solve( !KU( browserForward(~sess.20, cert(~signalClient.1),
                                                   <'code', ~code, ~n.31>)
                               ) @ #vk.47 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_3
                        solve( !KU( browserForward(~sess.20, cert(~signalClient.1),
                                                   <'code', ~code, ~n.31>)
                               ) @ #vk.47 )
                          case LinkClick
                          by contradiction
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_4
                        solve( !KU( browserForward(~sess.20, cert(~signalClient.1),
                                                   <'code', ~code, ~n.31>)
                               ) @ #vk.47 )
                          case LinkClick
                          by contradiction
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode_case_1
                        solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge>)
                               ) @ #vk.49 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      next
                        case OIDCIdPIssueCode_case_2
                        solve( !KU( ~signalClient ) @ #vk.47 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                    ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.50 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case OIDCTokenForward_case_1
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.34 < #x) ∧
                                 (#x < #vr.52) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_2
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.34 < #x) ∧
                                 (#x < #vr.52) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_3
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.34 < #x) ∧
                                 (#x < #vr.52) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_4
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.34 < #x) ∧
                                 (#x < #vr.52) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                    case TLSSetup
                    solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                               <'code', ~code, ~n.22>)
                           ) @ #vk.32 )
                      case LinkClick
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.6)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        by contradiction
                      qed
                    next
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        by contradiction
                      qed
                    qed
                  qed
                qed
              next
                case OIDCClientCodeRedirect_case_4
                solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                  case case_1
                  solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                             <'code', ~code, ~n.22>)
                         ) @ #vk.32 )
                    case LinkClick
                    solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~code ) @ #vk.34 )
                        case OIDCClientCodeRedirect_case_1
                        solve( !KU( browserForward(~sess.19, cert(~signalClient),
                                                   <'code', ~code, ~n.30>)
                               ) @ #vk.41 )
                          case OIDCIdPIssueCode
                          solve( !KU( ~IdPKey ) @ #vk.41 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                                   ) @ #vk.44 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_2
                        solve( !KU( browserForward(~sess.19, cert(~signalClient),
                                                   <'code', ~code, ~n.30>)
                               ) @ #vk.41 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_3
                        solve( !KU( browserForward(~sess.19, cert(~signalClient),
                                                   <'code', ~code, ~n.30>)
                               ) @ #vk.41 )
                          case LinkClick
                          by contradiction
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_4
                        solve( !KU( browserForward(~sess.19, cert(~signalClient),
                                                   <'code', ~code, ~n.30>)
                               ) @ #vk.41 )
                          case LinkClick
                          by contradiction
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                      next
                        case OIDCIdPIssueCode_case_1
                        solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge>)
                               ) @ #vk.43 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      next
                        case OIDCIdPIssueCode_case_2
                        solve( !KU( ~IdPKey ) @ #vk.41 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.44 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case OIDCTokenForward_case_1
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.33 < #x) ∧
                                 (#x < #vr.49) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_2
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.33 < #x) ∧
                                 (#x < #vr.49) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_3
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.33 < #x) ∧
                                 (#x < #vr.49) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_4
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.33 < #x) ∧
                                 (#x < #vr.49) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      qed
                    qed
                  next
                    case c_browserForward
                    solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~code ) @ #vk.46 )
                        case OIDCClientCodeRedirect_case_1
                        solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                   <'code', ~code, ~n.30>)
                               ) @ #vk.48 )
                          case OIDCIdPIssueCode
                          solve( !KU( ~IdPKey ) @ #vk.48 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.2, code_challenge>)
                                   ) @ #vk.51 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_2
                        solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                   <'code', ~code, ~n.30>)
                               ) @ #vk.48 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_3
                        solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                   <'code', ~code, ~n.30>)
                               ) @ #vk.48 )
                          case LinkClick
                          by contradiction
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_4
                        solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                   <'code', ~code, ~n.30>)
                               ) @ #vk.48 )
                          case LinkClick
                          by contradiction
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                      next
                        case OIDCIdPIssueCode_case_1
                        solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.2, code_challenge>)
                               ) @ #vk.50 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      next
                        case OIDCIdPIssueCode_case_2
                        solve( !KU( ~signalClient ) @ #vk.48 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                    ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.2, code_challenge>)
                                 ) @ #vk.51 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case OIDCTokenForward_case_1
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.34 < #x) ∧
                                 (#x < #vr.50) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_2
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.34 < #x) ∧
                                 (#x < #vr.50) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_3
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.34 < #x) ∧
                                 (#x < #vr.50) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_4
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.34 < #x) ∧
                                 (#x < #vr.50) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                    case TLSSetup
                    solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                               <'code', ~code, ~n.22>)
                           ) @ #vk.32 )
                      case LinkClick
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        by contradiction
                      qed
                    next
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        by contradiction
                      qed
                    qed
                  qed
                qed
              next
                case c_tlsClientMsg
                solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                        s256(code_verifier)
                       ) ▶₃ #x.1 )
                  case OIDCIdPIssueCode
                  solve( !KU( ~code ) @ #vk.36 )
                    case OIDCClientCodeRedirect_case_1
                    solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                               <'code', ~code, ~n.22>)
                           ) @ #vk.38 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.38 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge>)
                               ) @ #vk.41 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_2
                    solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                               <'code', ~code, ~n.22>)
                           ) @ #vk.38 )
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_3
                    solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                               <'code', ~code, ~n.22>)
                           ) @ #vk.38 )
                      case LinkClick
                      by contradiction
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_4
                    solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                               <'code', ~code, ~n.22>)
                           ) @ #vk.38 )
                      case LinkClick
                      by contradiction
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y )
                  next
                    case OIDCIdPIssueCode_case_1
                    solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                             <'oidc_req', hash.1, nonce.1, code_challenge>)
                           ) @ #vk.40 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  next
                    case OIDCIdPIssueCode_case_2
                    solve( !KU( ~signalClient ) @ #vk.38 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                                ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.1, code_challenge>)
                             ) @ #vk.41 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_1
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.34 < #x) ∧
                             (#x < #vr.38) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_2
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.34 < #x) ∧
                             (#x < #vr.38) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_3
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.34 < #x) ∧
                             (#x < #vr.38) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_4
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.34 < #x) ∧
                             (#x < #vr.38) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case case_2
          by contradiction
        next
          case case_3
          by contradiction
        qed
      next
        case c_browserForward
        solve( !KU( tlsServerMsg(~sessPost, ~IdPKey,
                                 <'token', 
                                  <$A, username, nonce, h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>, 
                                  sign(<$A, username, nonce, h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)
                                       >,
                                       x)
                                 >)
               ) @ #vk.6 )
          case OIDCIdPTokenIssue
          solve( !KU( tlsClientMsg(~sess.12, cert(~IdPKey),
                                   <'oidc_req', h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2), nonce, 
                                    s256(code_verifier)>)
                 ) @ #vk.28 )
            case OIDCAdversaryInit
            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                     <'token_req', ~code.1, code_verifier>)
                   ) @ #vk.27 )
              case OIDCClientCodeRedirect
              solve( (∃ #x.
                       (UseCode( ~code ) @ #x)
                      ∧
                       (#vr.36 < #x) ∧
                       (#x < #vr.9) ∧
                       (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                     (∃ signalClient domain #x #y.
                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                case case_1
                solve( (∀ #z. (!KU( ~n.6 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
                  case case_1
                  solve( !KU( ~code ) @ #vk.26 )
                    case OIDCClientCodeRedirect_case_1
                    solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                               <'code', ~code, ~n.23>)
                           ) @ #vk.39 )
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_2
                    solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                               <'code', ~code, ~n.23>)
                           ) @ #vk.39 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.40 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce, code_challenge>)
                               ) @ #vk.48 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_3
                    solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                               <'code', ~code, ~n.23>)
                           ) @ #vk.39 )
                      case LinkClick
                      by contradiction
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.40 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce, code_challenge>)
                               ) @ #vk.50 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_4
                    solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                               <'code', ~code, ~n.23>)
                           ) @ #vk.39 )
                      case LinkClick
                      by contradiction
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                  next
                    case OIDCIdPIssueCode_case_1
                    solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.1, code_challenge>)
                           ) @ #vk.41 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  next
                    case OIDCIdPIssueCode_case_2
                    solve( !KU( ~signalClient ) @ #vk.39 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.1, code_challenge>)
                             ) @ #vk.42 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_1
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.36 < #x) ∧
                             (#x < #vr.41) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_2
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.36 < #x) ∧
                             (#x < #vr.41) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_3
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.36 < #x) ∧
                             (#x < #vr.41) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_4
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.36 < #x) ∧
                             (#x < #vr.41) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  qed
                next
                  case case_2
                  by contradiction
                qed
              next
                case case_2
                by contradiction
              next
                case case_3
                by contradiction
              qed
            next
              case c_tlsClientMsg
              solve( !KU( ~code.1 ) @ #vk.44 )
                case OIDCClientCodeRedirect_case_1
                solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                           <'code', ~code.1, ~n.23>)
                       ) @ #vk.46 )
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientCodeRedirect_case_2
                solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                           <'code', ~code.1, ~n.23>)
                       ) @ #vk.46 )
                  case OIDCIdPIssueCode
                  solve( !KU( ~IdPKey ) @ #vk.47 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce, code_challenge>)
                           ) @ #vk.55 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientCodeRedirect_case_3
                solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                           <'code', ~code.1, ~n.23>)
                       ) @ #vk.46 )
                  case LinkClick
                  by contradiction
                next
                  case OIDCIdPIssueCode
                  solve( !KU( ~IdPKey ) @ #vk.47 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce, code_challenge>)
                           ) @ #vk.57 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientCodeRedirect_case_4
                solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                           <'code', ~code.1, ~n.23>)
                       ) @ #vk.46 )
                  case LinkClick
                  by contradiction
                next
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.1, $IdP, ~code.1 ) @ #y )
              next
                case OIDCIdPIssueCode_case_1
                solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                         <'oidc_req', hash, nonce.1, code_challenge>)
                       ) @ #vk.48 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              next
                case OIDCIdPIssueCode_case_2
                solve( !KU( ~signalClient ) @ #vk.46 )
                  case DomainCompromise
                  by contradiction
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                            ) @ #y )
                next
                  case OIDCIdPIssueCode
                  solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce.1, code_challenge>)
                         ) @ #vk.49 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                qed
              next
                case OIDCTokenForward_case_1
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.36 < #x) ∧
                         (#x < #vr.41) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case OIDCTokenForward_case_2
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.36 < #x) ∧
                         (#x < #vr.41) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case OIDCTokenForward_case_3
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.36 < #x) ∧
                         (#x < #vr.41) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case OIDCTokenForward_case_4
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.36 < #x) ∧
                         (#x < #vr.41) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              qed
            qed
          next
            case OIDCClientInit
            solve( (∀ #z. (!KU( ~n.8 ) @ #z) ⇒ ⊥)  ∥
                   (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
              case case_1
              solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                       <'token_req', ~code.1, ~n.6>)
                     ) @ #vk.27 )
                case OIDCClientCodeRedirect
                solve( (∃ #x.
                         (UseCode( ~code ) @ #x)
                        ∧
                         (#vr.36 < #x) ∧
                         (#x < #vr.9) ∧
                         (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  solve( !KU( ~code ) @ #vk.26 )
                    case OIDCClientCodeRedirect_case_1
                    solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                               <'code', ~code, ~n.23>)
                           ) @ #vk.30 )
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_2
                    solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                               <'code', ~code, ~n.23>)
                           ) @ #vk.30 )
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_3
                    solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                               <'code', ~code, ~n.23>)
                           ) @ #vk.30 )
                      case LinkClick
                      by contradiction
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_4
                    solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                               <'code', ~code, ~n.23>)
                           ) @ #vk.30 )
                      case LinkClick
                      by contradiction
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y )
                  next
                    case OIDCIdPIssueCode_case_1
                    solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce, code_challenge>)
                           ) @ #vk.32 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  next
                    case OIDCIdPIssueCode_case_2
                    solve( !KU( ~signalClient ) @ #vk.30 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                                ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.33 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_1
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.36 < #x) ∧
                             (#x < #vr.40) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_2
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.36 < #x) ∧
                             (#x < #vr.40) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_3
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.36 < #x) ∧
                             (#x < #vr.40) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_4
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.36 < #x) ∧
                             (#x < #vr.40) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  qed
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case c_tlsClientMsg
                by contradiction
              qed
            next
              case case_2
              by contradiction
            qed
          next
            case c_tlsClientMsg
            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                     <'token_req', ~code.1, code_verifier>)
                   ) @ #vk.27 )
              case OIDCClientCodeRedirect
              solve( (∃ #x.
                       (UseCode( ~code ) @ #x)
                      ∧
                       (#vr.36 < #x) ∧
                       (#x < #vr.9) ∧
                       (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                     (∃ signalClient domain #x #y.
                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                case case_1
                solve( (∀ #z. (!KU( ~n.6 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
                  case case_1
                  solve( !KU( ~code ) @ #vk.26 )
                    case OIDCClientCodeRedirect_case_1
                    solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                               <'code', ~code, ~n.23>)
                           ) @ #vk.39 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.40 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce, code_challenge>)
                               ) @ #vk.53 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_2
                    solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                               <'code', ~code, ~n.23>)
                           ) @ #vk.39 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.40 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                               ) @ #vk.57 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_3
                    solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                               <'code', ~code, ~n.23>)
                           ) @ #vk.39 )
                      case LinkClick
                      by contradiction
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.40 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce, code_challenge>)
                               ) @ #vk.50 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_4
                    solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                               <'code', ~code, ~n.23>)
                           ) @ #vk.39 )
                      case LinkClick
                      by contradiction
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.40 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce.1, code_challenge>)
                               ) @ #vk.51 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y )
                  next
                    case OIDCIdPIssueCode_case_1
                    solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.1, code_challenge>)
                           ) @ #vk.41 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  next
                    case OIDCIdPIssueCode_case_2
                    solve( !KU( ~signalClient ) @ #vk.39 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                                ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.1, code_challenge>)
                             ) @ #vk.42 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_1
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.36 < #x) ∧
                             (#x < #vr.40) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_2
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.36 < #x) ∧
                             (#x < #vr.40) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_3
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.36 < #x) ∧
                             (#x < #vr.40) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_4
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.36 < #x) ∧
                             (#x < #vr.40) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  qed
                next
                  case case_2
                  by contradiction
                qed
              next
                case case_2
                by contradiction
              next
                case case_3
                by contradiction
              qed
            next
              case c_tlsClientMsg
              solve( !KU( ~code.1 ) @ #vk.43 )
                case OIDCClientCodeRedirect_case_1
                solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                           <'code', ~code.1, ~n.23>)
                       ) @ #vk.45 )
                  case OIDCIdPIssueCode
                  solve( !KU( ~IdPKey ) @ #vk.46 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce, code_challenge>)
                           ) @ #vk.59 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientCodeRedirect_case_2
                solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                           <'code', ~code.1, ~n.23>)
                       ) @ #vk.45 )
                  case OIDCIdPIssueCode
                  solve( !KU( ~IdPKey ) @ #vk.46 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                           ) @ #vk.63 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientCodeRedirect_case_3
                solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                           <'code', ~code.1, ~n.23>)
                       ) @ #vk.45 )
                  case LinkClick
                  by contradiction
                next
                  case OIDCIdPIssueCode
                  solve( !KU( ~IdPKey ) @ #vk.46 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce, code_challenge>)
                           ) @ #vk.56 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientCodeRedirect_case_4
                solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                           <'code', ~code.1, ~n.23>)
                       ) @ #vk.45 )
                  case LinkClick
                  by contradiction
                next
                  case OIDCIdPIssueCode
                  solve( !KU( ~IdPKey ) @ #vk.46 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.1, code_challenge>)
                           ) @ #vk.57 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator, $IdP, ~code.1 ) @ #y )
              next
                case OIDCIdPIssueCode_case_1
                solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                         <'oidc_req', hash, nonce.1, code_challenge>)
                       ) @ #vk.47 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              next
                case OIDCIdPIssueCode_case_2
                solve( !KU( ~signalClient ) @ #vk.45 )
                  case DomainCompromise
                  by contradiction
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                            ) @ #y )
                next
                  case OIDCIdPIssueCode
                  solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce.1, code_challenge>)
                         ) @ #vk.48 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                qed
              next
                case OIDCTokenForward_case_1
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.36 < #x) ∧
                         (#x < #vr.40) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case OIDCTokenForward_case_2
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.36 < #x) ∧
                         (#x < #vr.40) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case OIDCTokenForward_case_3
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.36 < #x) ∧
                         (#x < #vr.40) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case OIDCTokenForward_case_4
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.36 < #x) ∧
                         (#x < #vr.40) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              qed
            qed
          qed
        next
          case c_tlsServerMsg
          solve( !KU( ~IdPKey ) @ #vk.27 )
            case DomainCompromise
            by contradiction
          next
            case OIDCClientLogin
            by solve( GenBrowserSession( $Initiator, $IdP, ~IdPKey ) @ #y )
          next
            case OIDCIdPIssueCode
            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                     <'oidc_req', hash, nonce.1, code_challenge>)
                   ) @ #vk.41 )
              case c_tlsClientMsg
              by contradiction
            qed
          qed
        qed
      qed
    next
      case OIDCTokenForward_case_2
      solve( !KU( browserForward(~sess.4, cert(~signalClient),
                                 <'code', code, ~n.6>)
             ) @ #vk.6 )
        case OIDCIdPIssueCode
        solve( (∃ #x.
                 (UseCode( ~code ) @ #x)
                ∧
                 (#vr.25 < #x) ∧
                 (#x < #vr.9) ∧
                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
               (∃ signalClient domain #x #y.
                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                 (CompromisedDomain( signalClient, domain ) @ #y)) )
          case case_1
          solve( !Domain( $IdP, ~IdPKey.1 ) ▶₁ #x.1 )
            case TLSSetup
            solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey),
                                     <'oidc_req', hash.2, ~n.4, code_challenge.1>)
                   ) @ #vk.24 )
              case OIDCAdversaryInit
              solve( !KU( tlsClientMsg(~sess.3, cert(~IdPKey.1),
                                       <'token_req', ~code, code_verifier>)
                     ) @ #vk.26 )
                case OIDCClientCodeRedirect_case_1
                solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                  case case_1
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code, ~n.14>)
                         ) @ #vk.27 )
                    case c_browserForward
                    solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~code ) @ #vk.43 )
                        case OIDCClientCodeRedirect_case_1
                        solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                   <'code', ~code, ~n.30>)
                               ) @ #vk.45 )
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientCodeRedirect_case_2
                        solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                   <'code', ~code, ~n.30>)
                               ) @ #vk.45 )
                          case OIDCIdPIssueCode
                          solve( !KU( ~IdPKey ) @ #vk.45 )
                            case DomainCompromise
                            by contradiction /* from formulas */
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                                   ) @ #vk.48 )
                              case c_tlsClientMsg
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientCodeRedirect_case_3
                        solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                   <'code', ~code, ~n.30>)
                               ) @ #vk.45 )
                          case LinkClick
                          by contradiction /* cyclic */
                        next
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientCodeRedirect_case_4
                        solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                   <'code', ~code, ~n.30>)
                               ) @ #vk.45 )
                          case LinkClick
                          by contradiction /* cyclic */
                        next
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                      next
                        case OIDCIdPIssueCode_case_1
                        solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge>)
                               ) @ #vk.47 )
                          case c_tlsClientMsg
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCIdPIssueCode_case_2
                        solve( !KU( ~signalClient ) @ #vk.45 )
                          case DomainCompromise
                          by contradiction /* from formulas */
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                    ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.48 )
                            case c_tlsClientMsg
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case OIDCTokenForward_case_1
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.50) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCTokenForward_case_2
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.50) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCTokenForward_case_3
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.50) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCTokenForward_case_4
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.50) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                    case TLSSetup
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.27 )
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              next
                case OIDCClientCodeRedirect_case_2
                solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                  case case_1
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code, ~n.14>)
                         ) @ #vk.27 )
                    case OIDCIdPIssueCode
                    solve( St_OIDCIdP_Code( $A, $Username, ~code, hash, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( tlsServerMsg(~sessPost, ~IdPKey,
                                               <'token', 
                                                <$A, username, nonce, 
                                                 h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>, 
                                                sign(<$A, username, nonce, 
                                                      h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>,
                                                     x)
                                               >)
                             ) @ #vk.8 )
                        case OIDCIdPTokenIssue
                        solve( !KU( tlsClientMsg(~sess.10, cert(~IdPKey),
                                                 <'oidc_req', 
                                                  h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2), nonce, 
                                                  s256(code_verifier)>)
                               ) @ #vk.29 )
                          case OIDCAdversaryInit
                          solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                   <'token_req', ~code.1, code_verifier>)
                                 ) @ #vk.29 )
                            case OIDCClientCodeRedirect
                            solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey),
                                                     <'login', $Username, pw>)
                                   ) @ #vk.25 )
                              case OIDCClientLogin
                              by contradiction /* from formulas */
                            next
                              case c_tlsClientMsg
                              solve( !KU( s256(~n.6) ) @ #vk.20 )
                                case OIDCClientInit_case_1
                                solve( !KU( ~IdPKey ) @ #vk.34 )
                                  case DomainCompromise
                                  by contradiction /* from formulas */
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash, nonce, code_challenge
                                                           >)
                                         ) @ #vk.37 )
                                    case c_tlsClientMsg
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              next
                                case OIDCClientInit_case_2
                                solve( !KU( ~sess.2 ) @ #vk.27 )
                                  case OIDCAdversaryInit
                                  solve( !KU( ~IdPKey ) @ #vk.34 )
                                    case DomainCompromise
                                    by contradiction /* from formulas */
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.37 )
                                      case c_tlsClientMsg
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                next
                                  case OIDCClientLogin
                                  solve( !KU( ~IdPKey ) @ #vk.35 )
                                    case DomainCompromise
                                    by contradiction /* from formulas */
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.39 )
                                      case c_tlsClientMsg
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~signalClient.1 ) @ #vk.35 )
                                    case DomainCompromise
                                    solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                                             <'oidc_req', hash, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.36 )
                                      case OIDCAdversaryInit
                                      by contradiction /* from formulas */
                                    next
                                      case c_tlsClientMsg
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.1, $IdP.1,
                                                                 ~signalClient.1
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                                             <'oidc_req', hash.1, nonce.1, 
                                                              code_challenge.1>)
                                           ) @ #vk.40 )
                                      case c_tlsClientMsg
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                qed
                              next
                                case c_s256
                                by contradiction /* from formulas */
                              qed
                            qed
                          next
                            case c_tlsClientMsg
                            solve( !KU( ~code.1 ) @ #vk.44 )
                              case OIDCClientCodeRedirect_case_1
                              solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.16>)
                                     ) @ #vk.46 )
                                case c_browserForward
                                by contradiction /* cyclic */
                              qed
                            next
                              case OIDCClientCodeRedirect_case_2
                              solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.16>)
                                     ) @ #vk.46 )
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.47 )
                                  case DomainCompromise
                                  by contradiction /* from formulas */
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce, 
                                                            code_challenge>)
                                         ) @ #vk.55 )
                                    case c_tlsClientMsg
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction /* cyclic */
                              qed
                            next
                              case OIDCClientCodeRedirect_case_3
                              solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.16>)
                                     ) @ #vk.46 )
                                case LinkClick
                                by contradiction /* cyclic */
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.47 )
                                  case DomainCompromise
                                  by contradiction /* from formulas */
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                            ) @ #y.1 )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce, 
                                                            code_challenge>)
                                         ) @ #vk.57 )
                                    case c_tlsClientMsg
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction /* cyclic */
                              qed
                            next
                              case OIDCClientCodeRedirect_case_4
                              solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.16>)
                                     ) @ #vk.46 )
                                case LinkClick
                                by contradiction /* cyclic */
                              next
                                case c_browserForward
                                by contradiction /* cyclic */
                              qed
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.2, $IdP, ~code.1 ) @ #y )
                            next
                              case OIDCIdPIssueCode_case_1
                              solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                                       <'oidc_req', hash.1, nonce.1, code_challenge
                                                       >)
                                     ) @ #vk.48 )
                                case c_tlsClientMsg
                                by contradiction /* cyclic */
                              qed
                            next
                              case OIDCIdPIssueCode_case_2
                              solve( !KU( ~signalClient ) @ #vk.46 )
                                case DomainCompromise
                                by contradiction /* from formulas */
                              next
                                case OIDCClientLogin
                                by solve( GenBrowserSession( $Initiator.2, $IdP, ~signalClient
                                          ) @ #y )
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                         <'oidc_req', hash.1, nonce.1, 
                                                          code_challenge>)
                                       ) @ #vk.49 )
                                  case c_tlsClientMsg
                                  by contradiction /* cyclic */
                                qed
                              qed
                            next
                              case OIDCTokenForward_case_1
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.31 < #x) ∧
                                       (#x < #vr.36) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              next
                                case case_3
                                by contradiction /* from formulas */
                              qed
                            next
                              case OIDCTokenForward_case_2
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.31 < #x) ∧
                                       (#x < #vr.36) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              next
                                case case_3
                                by contradiction /* from formulas */
                              qed
                            next
                              case OIDCTokenForward_case_3
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.31 < #x) ∧
                                       (#x < #vr.36) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              next
                                case case_3
                                by contradiction /* from formulas */
                              qed
                            next
                              case OIDCTokenForward_case_4
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.31 < #x) ∧
                                       (#x < #vr.36) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              next
                                case case_3
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        next
                          case OIDCClientInit
                          solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                   <'token_req', ~code.1, ~n.6>)
                                 ) @ #vk.28 )
                            case c_tlsClientMsg
                            by contradiction /* from formulas */
                          qed
                        next
                          case c_tlsClientMsg
                          solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                   <'token_req', ~code.1, code_verifier>)
                                 ) @ #vk.28 )
                            case c_tlsClientMsg
                            solve( !KU( ~code.1 ) @ #vk.44 )
                              case OIDCClientCodeRedirect_case_1
                              solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.16>)
                                     ) @ #vk.46 )
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.47 )
                                  case DomainCompromise
                                  by contradiction /* from formulas */
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce, 
                                                            code_challenge>)
                                         ) @ #vk.60 )
                                    case c_tlsClientMsg
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction /* cyclic */
                              qed
                            next
                              case OIDCClientCodeRedirect_case_2
                              solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.16>)
                                     ) @ #vk.46 )
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.48 )
                                  case DomainCompromise
                                  by contradiction /* from formulas */
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.2, nonce.1, 
                                                            code_challenge.1>)
                                         ) @ #vk.63 )
                                    case c_tlsClientMsg
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction /* cyclic */
                              qed
                            next
                              case OIDCClientCodeRedirect_case_3
                              solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.16>)
                                     ) @ #vk.46 )
                                case LinkClick
                                by contradiction /* cyclic */
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.47 )
                                  case DomainCompromise
                                  by contradiction /* from formulas */
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                            ) @ #y.1 )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce, 
                                                            code_challenge>)
                                         ) @ #vk.57 )
                                    case c_tlsClientMsg
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction /* cyclic */
                              qed
                            next
                              case OIDCClientCodeRedirect_case_4
                              solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.16>)
                                     ) @ #vk.46 )
                                case LinkClick
                                by contradiction /* cyclic */
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.47 )
                                  case DomainCompromise
                                  by contradiction /* from formulas */
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce.1, 
                                                            code_challenge>)
                                         ) @ #vk.58 )
                                    case c_tlsClientMsg
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction /* cyclic */
                              qed
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~code.1 ) @ #y )
                            next
                              case OIDCIdPIssueCode_case_1
                              solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                                       <'oidc_req', hash.1, nonce.1, code_challenge
                                                       >)
                                     ) @ #vk.48 )
                                case c_tlsClientMsg
                                by contradiction /* cyclic */
                              qed
                            next
                              case OIDCIdPIssueCode_case_2
                              solve( !KU( ~signalClient ) @ #vk.46 )
                                case DomainCompromise
                                by contradiction /* from formulas */
                              next
                                case OIDCClientLogin
                                by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                          ) @ #y )
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                         <'oidc_req', hash.1, nonce.1, 
                                                          code_challenge>)
                                       ) @ #vk.49 )
                                  case c_tlsClientMsg
                                  by contradiction /* cyclic */
                                qed
                              qed
                            next
                              case OIDCTokenForward_case_1
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.31 < #x) ∧
                                       (#x < #vr.35) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              next
                                case case_3
                                by contradiction /* from formulas */
                              qed
                            next
                              case OIDCTokenForward_case_2
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.31 < #x) ∧
                                       (#x < #vr.35) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              next
                                case case_3
                                by contradiction /* from formulas */
                              qed
                            next
                              case OIDCTokenForward_case_3
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.31 < #x) ∧
                                       (#x < #vr.35) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              next
                                case case_3
                                by contradiction /* from formulas */
                              qed
                            next
                              case OIDCTokenForward_case_4
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.31 < #x) ∧
                                       (#x < #vr.35) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              next
                                case case_3
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        qed
                      next
                        case c_tlsServerMsg
                        solve( !KU( ~IdPKey ) @ #vk.29 )
                          case DomainCompromise
                          by contradiction /* from formulas */
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.41 )
                            case c_tlsClientMsg
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    qed
                  next
                    case c_browserForward
                    solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~code ) @ #vk.46 )
                        case OIDCClientCodeRedirect_case_1
                        solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                   <'code', ~code, ~n.22>)
                               ) @ #vk.48 )
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientCodeRedirect_case_2
                        solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                   <'code', ~code, ~n.22>)
                               ) @ #vk.48 )
                          case OIDCIdPIssueCode
                          solve( !KU( ~IdPKey ) @ #vk.48 )
                            case DomainCompromise
                            by contradiction /* from formulas */
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.2, nonce.2, code_challenge.1
                                                     >)
                                   ) @ #vk.51 )
                              case c_tlsClientMsg
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientCodeRedirect_case_3
                        solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                   <'code', ~code, ~n.22>)
                               ) @ #vk.48 )
                          case LinkClick
                          by contradiction /* cyclic */
                        next
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientCodeRedirect_case_4
                        solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                   <'code', ~code, ~n.22>)
                               ) @ #vk.48 )
                          case LinkClick
                          by contradiction /* cyclic */
                        next
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                      next
                        case OIDCIdPIssueCode_case_1
                        solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                 <'oidc_req', hash.2, nonce.2, code_challenge.1>)
                               ) @ #vk.50 )
                          case c_tlsClientMsg
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCIdPIssueCode_case_2
                        solve( !KU( ~signalClient ) @ #vk.48 )
                          case DomainCompromise
                          by contradiction /* from formulas */
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                    ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                   <'oidc_req', hash.2, nonce.2, code_challenge.1>)
                                 ) @ #vk.51 )
                            case c_tlsClientMsg
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case OIDCTokenForward_case_1
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.41) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCTokenForward_case_2
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.41) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCTokenForward_case_3
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.41) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCTokenForward_case_4
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.41) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                    case TLSSetup
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.27 )
                      case OIDCIdPIssueCode
                      by contradiction /* from formulas */
                    next
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              next
                case OIDCClientCodeRedirect_case_3
                solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                  case case_1
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code, ~n.14>)
                         ) @ #vk.27 )
                    case LinkClick
                    solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                            s256(~n.6)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~code ) @ #vk.36 )
                        case OIDCClientCodeRedirect_case_1
                        solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.38 )
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientCodeRedirect_case_2
                        solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.38 )
                          case OIDCIdPIssueCode
                          solve( !KU( ~IdPKey ) @ #vk.38 )
                            case DomainCompromise
                            by contradiction /* from formulas */
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                                   ) @ #vk.41 )
                              case c_tlsClientMsg
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientCodeRedirect_case_3
                        solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.38 )
                          case LinkClick
                          by contradiction /* cyclic */
                        next
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientCodeRedirect_case_4
                        solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.38 )
                          case LinkClick
                          by contradiction /* cyclic */
                        next
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode_case_1
                        solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge>)
                               ) @ #vk.40 )
                          case c_tlsClientMsg
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCIdPIssueCode_case_2
                        solve( !KU( ~IdPKey ) @ #vk.38 )
                          case DomainCompromise
                          by contradiction /* from formulas */
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.41 )
                            case c_tlsClientMsg
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case OIDCTokenForward_case_1
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.24 < #x) ∧
                                 (#x < #vr.42) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCTokenForward_case_2
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.24 < #x) ∧
                                 (#x < #vr.42) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCTokenForward_case_3
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.24 < #x) ∧
                                 (#x < #vr.42) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCTokenForward_case_4
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.24 < #x) ∧
                                 (#x < #vr.42) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case c_browserForward
                    solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~code ) @ #vk.40 )
                        case OIDCClientCodeRedirect_case_1
                        solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.42 )
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientCodeRedirect_case_2
                        solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.42 )
                          case OIDCIdPIssueCode
                          solve( !KU( ~IdPKey ) @ #vk.42 )
                            case DomainCompromise
                            by contradiction /* from formulas */
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                                   ) @ #vk.45 )
                              case c_tlsClientMsg
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientCodeRedirect_case_3
                        solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.42 )
                          case LinkClick
                          by contradiction /* cyclic */
                        next
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientCodeRedirect_case_4
                        solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.42 )
                          case LinkClick
                          by contradiction /* cyclic */
                        next
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode_case_1
                        solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge>)
                               ) @ #vk.44 )
                          case c_tlsClientMsg
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCIdPIssueCode_case_2
                        solve( !KU( ~signalClient ) @ #vk.42 )
                          case DomainCompromise
                          by contradiction /* from formulas */
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                    ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.45 )
                            case c_tlsClientMsg
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case OIDCTokenForward_case_1
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.43) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCTokenForward_case_2
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.43) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCTokenForward_case_3
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.43) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCTokenForward_case_4
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.43) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                    case TLSSetup
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.27 )
                      case LinkClick
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.6)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              next
                case OIDCClientCodeRedirect_case_4
                solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                  case case_1
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code, ~n.14>)
                         ) @ #vk.27 )
                    case LinkClick
                    solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~code ) @ #vk.29 )
                        case OIDCClientCodeRedirect_case_1
                        solve( !KU( browserForward(~sess.16, cert(~signalClient),
                                                   <'code', ~code, ~n.22>)
                               ) @ #vk.36 )
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientCodeRedirect_case_2
                        solve( !KU( browserForward(~sess.16, cert(~signalClient),
                                                   <'code', ~code, ~n.22>)
                               ) @ #vk.36 )
                          case OIDCIdPIssueCode
                          solve( !KU( ~IdPKey ) @ #vk.36 )
                            case DomainCompromise
                            by contradiction /* from formulas */
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                                   ) @ #vk.39 )
                              case c_tlsClientMsg
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientCodeRedirect_case_3
                        solve( !KU( browserForward(~sess.16, cert(~signalClient),
                                                   <'code', ~code, ~n.22>)
                               ) @ #vk.36 )
                          case LinkClick
                          by contradiction /* cyclic */
                        next
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientCodeRedirect_case_4
                        solve( !KU( browserForward(~sess.16, cert(~signalClient),
                                                   <'code', ~code, ~n.22>)
                               ) @ #vk.36 )
                          case LinkClick
                          by contradiction /* cyclic */
                        next
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                      next
                        case OIDCIdPIssueCode_case_1
                        solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge>)
                               ) @ #vk.38 )
                          case c_tlsClientMsg
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCIdPIssueCode_case_2
                        solve( !KU( ~IdPKey ) @ #vk.36 )
                          case DomainCompromise
                          by contradiction /* from formulas */
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.39 )
                            case c_tlsClientMsg
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case OIDCTokenForward_case_1
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.24 < #x) ∧
                                 (#x < #vr.40) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCTokenForward_case_2
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.24 < #x) ∧
                                 (#x < #vr.40) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCTokenForward_case_3
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.24 < #x) ∧
                                 (#x < #vr.40) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCTokenForward_case_4
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.24 < #x) ∧
                                 (#x < #vr.40) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case c_browserForward
                    solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~code ) @ #vk.41 )
                        case OIDCClientCodeRedirect_case_1
                        solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                   <'code', ~code, ~n.22>)
                               ) @ #vk.43 )
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientCodeRedirect_case_2
                        solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                   <'code', ~code, ~n.22>)
                               ) @ #vk.43 )
                          case OIDCIdPIssueCode
                          solve( !KU( ~IdPKey ) @ #vk.43 )
                            case DomainCompromise
                            by contradiction /* from formulas */
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.2, code_challenge>)
                                   ) @ #vk.46 )
                              case c_tlsClientMsg
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientCodeRedirect_case_3
                        solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                   <'code', ~code, ~n.22>)
                               ) @ #vk.43 )
                          case LinkClick
                          by contradiction /* cyclic */
                        next
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientCodeRedirect_case_4
                        solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                   <'code', ~code, ~n.22>)
                               ) @ #vk.43 )
                          case LinkClick
                          by contradiction /* cyclic */
                        next
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                      next
                        case OIDCIdPIssueCode_case_1
                        solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.2, code_challenge>)
                               ) @ #vk.45 )
                          case c_tlsClientMsg
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCIdPIssueCode_case_2
                        solve( !KU( ~signalClient ) @ #vk.43 )
                          case DomainCompromise
                          by contradiction /* from formulas */
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                    ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.2, code_challenge>)
                                 ) @ #vk.46 )
                            case c_tlsClientMsg
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case OIDCTokenForward_case_1
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.41) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCTokenForward_case_2
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.41) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCTokenForward_case_3
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.41) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCTokenForward_case_4
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.41) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                    case TLSSetup
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.27 )
                      case LinkClick
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              next
                case c_tlsClientMsg
                solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                        s256(code_verifier)
                       ) ▶₃ #x.1 )
                  case OIDCIdPIssueCode
                  solve( !KU( ~code ) @ #vk.32 )
                    case OIDCClientCodeRedirect_case_1
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.34 )
                      case c_browserForward
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_2
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.34 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.34 )
                        case DomainCompromise
                        by contradiction /* from formulas */
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge>)
                               ) @ #vk.37 )
                          case c_tlsClientMsg
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_3
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.34 )
                      case LinkClick
                      by contradiction /* cyclic */
                    next
                      case c_browserForward
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_4
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.34 )
                      case LinkClick
                      by contradiction /* cyclic */
                    next
                      case c_browserForward
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y )
                  next
                    case OIDCIdPIssueCode_case_1
                    solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                             <'oidc_req', hash.1, nonce.1, code_challenge>)
                           ) @ #vk.36 )
                      case c_tlsClientMsg
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCIdPIssueCode_case_2
                    solve( !KU( ~signalClient ) @ #vk.34 )
                      case DomainCompromise
                      by contradiction /* from formulas */
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                                ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.1, code_challenge>)
                             ) @ #vk.37 )
                        case c_tlsClientMsg
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_1
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.25 < #x) ∧
                             (#x < #vr.29) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      by contradiction /* from formulas */
                    qed
                  next
                    case OIDCTokenForward_case_2
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.25 < #x) ∧
                             (#x < #vr.29) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      by contradiction /* from formulas */
                    qed
                  next
                    case OIDCTokenForward_case_3
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.25 < #x) ∧
                             (#x < #vr.29) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      by contradiction /* from formulas */
                    qed
                  next
                    case OIDCTokenForward_case_4
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.25 < #x) ∧
                             (#x < #vr.29) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case c_tlsClientMsg
              solve( !KU( tlsClientMsg(~sess.3, cert(~IdPKey.1),
                                       <'token_req', ~code, code_verifier>)
                     ) @ #vk.26 )
                case OIDCClientCodeRedirect_case_1
                solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                  case case_1
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code, ~n.14>)
                         ) @ #vk.36 )
                    case c_browserForward
                    solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~code ) @ #vk.52 )
                        case OIDCClientCodeRedirect_case_1
                        solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                   <'code', ~code, ~n.30>)
                               ) @ #vk.54 )
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientCodeRedirect_case_2
                        solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                   <'code', ~code, ~n.30>)
                               ) @ #vk.54 )
                          case OIDCIdPIssueCode
                          solve( !KU( ~IdPKey ) @ #vk.54 )
                            case DomainCompromise
                            by contradiction /* from formulas */
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.2, nonce.2, code_challenge.1
                                                     >)
                                   ) @ #vk.57 )
                              case c_tlsClientMsg
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientCodeRedirect_case_3
                        solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                   <'code', ~code, ~n.30>)
                               ) @ #vk.54 )
                          case LinkClick
                          by contradiction /* cyclic */
                        next
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientCodeRedirect_case_4
                        solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                   <'code', ~code, ~n.30>)
                               ) @ #vk.54 )
                          case LinkClick
                          by contradiction /* cyclic */
                        next
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                      next
                        case OIDCIdPIssueCode_case_1
                        solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                 <'oidc_req', hash.2, nonce.2, code_challenge.1>)
                               ) @ #vk.56 )
                          case c_tlsClientMsg
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCIdPIssueCode_case_2
                        solve( !KU( ~signalClient ) @ #vk.54 )
                          case DomainCompromise
                          by contradiction /* from formulas */
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                    ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                   <'oidc_req', hash.2, nonce.2, code_challenge.1>)
                                 ) @ #vk.57 )
                            case c_tlsClientMsg
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case OIDCTokenForward_case_1
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.50) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCTokenForward_case_2
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.50) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCTokenForward_case_3
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.50) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCTokenForward_case_4
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.50) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                    case TLSSetup
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.36 )
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              next
                case OIDCClientCodeRedirect_case_2
                solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                  case case_1
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code, ~n.14>)
                         ) @ #vk.36 )
                    case OIDCIdPIssueCode
                    solve( St_OIDCIdP_Code( $A, $Username, ~code, hash, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( tlsServerMsg(~sessPost, ~IdPKey,
                                               <'token', 
                                                <$A, username, nonce, 
                                                 h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>, 
                                                sign(<$A, username, nonce, 
                                                      h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>,
                                                     x)
                                               >)
                             ) @ #vk.8 )
                        case OIDCIdPTokenIssue
                        solve( !KU( tlsClientMsg(~sess.10, cert(~IdPKey),
                                                 <'oidc_req', 
                                                  h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2), nonce, 
                                                  s256(code_verifier)>)
                               ) @ #vk.38 )
                          case OIDCAdversaryInit
                          solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                   <'token_req', ~code.1, code_verifier>)
                                 ) @ #vk.38 )
                            case c_tlsClientMsg
                            solve( !KU( ~code.1 ) @ #vk.52 )
                              case OIDCClientCodeRedirect_case_1
                              solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.16>)
                                     ) @ #vk.54 )
                                case c_browserForward
                                by contradiction /* cyclic */
                              qed
                            next
                              case OIDCClientCodeRedirect_case_2
                              solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.16>)
                                     ) @ #vk.54 )
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.55 )
                                  case DomainCompromise
                                  by contradiction /* from formulas */
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.2, nonce.1, 
                                                            code_challenge.1>)
                                         ) @ #vk.63 )
                                    case c_tlsClientMsg
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction /* cyclic */
                              qed
                            next
                              case OIDCClientCodeRedirect_case_3
                              solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.16>)
                                     ) @ #vk.54 )
                                case LinkClick
                                by contradiction /* cyclic */
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.55 )
                                  case DomainCompromise
                                  by contradiction /* from formulas */
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                            ) @ #y.1 )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.2, nonce.1, 
                                                            code_challenge.1>)
                                         ) @ #vk.65 )
                                    case c_tlsClientMsg
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction /* cyclic */
                              qed
                            next
                              case OIDCClientCodeRedirect_case_4
                              solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.16>)
                                     ) @ #vk.54 )
                                case LinkClick
                                by contradiction /* cyclic */
                              next
                                case c_browserForward
                                by contradiction /* cyclic */
                              qed
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.2, $IdP, ~code.1 ) @ #y )
                            next
                              case OIDCIdPIssueCode_case_1
                              solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                                       <'oidc_req', hash.2, nonce.2, 
                                                        code_challenge.1>)
                                     ) @ #vk.56 )
                                case c_tlsClientMsg
                                by contradiction /* cyclic */
                              qed
                            next
                              case OIDCIdPIssueCode_case_2
                              solve( !KU( ~signalClient ) @ #vk.54 )
                                case DomainCompromise
                                by contradiction /* from formulas */
                              next
                                case OIDCClientLogin
                                by solve( GenBrowserSession( $Initiator.2, $IdP, ~signalClient
                                          ) @ #y )
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                         <'oidc_req', hash.2, nonce.2, 
                                                          code_challenge.1>)
                                       ) @ #vk.57 )
                                  case c_tlsClientMsg
                                  by contradiction /* cyclic */
                                qed
                              qed
                            next
                              case OIDCTokenForward_case_1
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.31 < #x) ∧
                                       (#x < #vr.36) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              next
                                case case_3
                                by contradiction /* from formulas */
                              qed
                            next
                              case OIDCTokenForward_case_2
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.31 < #x) ∧
                                       (#x < #vr.36) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              next
                                case case_3
                                by contradiction /* from formulas */
                              qed
                            next
                              case OIDCTokenForward_case_3
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.31 < #x) ∧
                                       (#x < #vr.36) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              next
                                case case_3
                                by contradiction /* from formulas */
                              qed
                            next
                              case OIDCTokenForward_case_4
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.31 < #x) ∧
                                       (#x < #vr.36) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              next
                                case case_3
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        next
                          case OIDCClientInit
                          solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                   <'token_req', ~code.1, ~n.6>)
                                 ) @ #vk.37 )
                            case c_tlsClientMsg
                            by contradiction /* from formulas */
                          qed
                        next
                          case c_tlsClientMsg
                          solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                   <'token_req', ~code.1, code_verifier>)
                                 ) @ #vk.38 )
                            case OIDCClientCodeRedirect
                            solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey),
                                                     <'login', $Username, pw>)
                                   ) @ #vk.25 )
                              case OIDCClientLogin
                              by contradiction /* from formulas */
                            next
                              case c_tlsClientMsg
                              solve( !KU( s256(~n.6) ) @ #vk.35 )
                                case OIDCClientInit_case_1
                                solve( !KU( ~IdPKey ) @ #vk.41 )
                                  case DomainCompromise
                                  by contradiction /* from formulas */
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce.1, 
                                                            code_challenge.1>)
                                         ) @ #vk.44 )
                                    case c_tlsClientMsg
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              next
                                case OIDCClientInit_case_2
                                solve( !KU( ~sess.2 ) @ #vk.28 )
                                  case OIDCAdversaryInit
                                  solve( !KU( ~IdPKey ) @ #vk.41 )
                                    case DomainCompromise
                                    by contradiction /* from formulas */
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.1, nonce.1, 
                                                              code_challenge.1>)
                                           ) @ #vk.44 )
                                      case c_tlsClientMsg
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                next
                                  case OIDCClientLogin
                                  solve( !KU( ~IdPKey ) @ #vk.42 )
                                    case DomainCompromise
                                    by contradiction /* from formulas */
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.1, nonce.1, 
                                                              code_challenge.1>)
                                           ) @ #vk.46 )
                                      case c_tlsClientMsg
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~signalClient.1 ) @ #vk.42 )
                                    case DomainCompromise
                                    solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                                             <'oidc_req', hash.1, nonce, 
                                                              code_challenge.1>)
                                           ) @ #vk.43 )
                                      case OIDCAdversaryInit
                                      by contradiction /* from formulas */
                                    next
                                      case c_tlsClientMsg
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.1, $IdP.1,
                                                                 ~signalClient.1
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                                             <'oidc_req', hash.2, nonce.2, 
                                                              code_challenge.2>)
                                           ) @ #vk.47 )
                                      case c_tlsClientMsg
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                qed
                              next
                                case c_s256
                                by contradiction /* from formulas */
                              qed
                            qed
                          next
                            case c_tlsClientMsg
                            solve( !KU( ~code.1 ) @ #vk.51 )
                              case OIDCClientCodeRedirect_case_1
                              solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.16>)
                                     ) @ #vk.53 )
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.54 )
                                  case DomainCompromise
                                  by contradiction /* from formulas */
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.2, nonce.1, 
                                                            code_challenge.1>)
                                         ) @ #vk.67 )
                                    case c_tlsClientMsg
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction /* cyclic */
                              qed
                            next
                              case OIDCClientCodeRedirect_case_2
                              solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.16>)
                                     ) @ #vk.53 )
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.55 )
                                  case DomainCompromise
                                  by contradiction /* from formulas */
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.3, nonce.2, 
                                                            code_challenge.2>)
                                         ) @ #vk.70 )
                                    case c_tlsClientMsg
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction /* cyclic */
                              qed
                            next
                              case OIDCClientCodeRedirect_case_3
                              solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.16>)
                                     ) @ #vk.53 )
                                case LinkClick
                                by contradiction /* cyclic */
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.54 )
                                  case DomainCompromise
                                  by contradiction /* from formulas */
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                            ) @ #y.1 )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.2, nonce.1, 
                                                            code_challenge.1>)
                                         ) @ #vk.64 )
                                    case c_tlsClientMsg
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction /* cyclic */
                              qed
                            next
                              case OIDCClientCodeRedirect_case_4
                              solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.16>)
                                     ) @ #vk.53 )
                                case LinkClick
                                by contradiction /* cyclic */
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.54 )
                                  case DomainCompromise
                                  by contradiction /* from formulas */
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.2, nonce.2, 
                                                            code_challenge.1>)
                                         ) @ #vk.65 )
                                    case c_tlsClientMsg
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction /* cyclic */
                              qed
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~code.1 ) @ #y )
                            next
                              case OIDCIdPIssueCode_case_1
                              solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                                       <'oidc_req', hash.2, nonce.2, 
                                                        code_challenge.1>)
                                     ) @ #vk.55 )
                                case c_tlsClientMsg
                                by contradiction /* cyclic */
                              qed
                            next
                              case OIDCIdPIssueCode_case_2
                              solve( !KU( ~signalClient ) @ #vk.53 )
                                case DomainCompromise
                                by contradiction /* from formulas */
                              next
                                case OIDCClientLogin
                                by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                          ) @ #y )
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                         <'oidc_req', hash.2, nonce.2, 
                                                          code_challenge.1>)
                                       ) @ #vk.56 )
                                  case c_tlsClientMsg
                                  by contradiction /* cyclic */
                                qed
                              qed
                            next
                              case OIDCTokenForward_case_1
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.31 < #x) ∧
                                       (#x < #vr.35) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              next
                                case case_3
                                by contradiction /* from formulas */
                              qed
                            next
                              case OIDCTokenForward_case_2
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.31 < #x) ∧
                                       (#x < #vr.35) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              next
                                case case_3
                                by contradiction /* from formulas */
                              qed
                            next
                              case OIDCTokenForward_case_3
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.31 < #x) ∧
                                       (#x < #vr.35) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              next
                                case case_3
                                by contradiction /* from formulas */
                              qed
                            next
                              case OIDCTokenForward_case_4
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.31 < #x) ∧
                                       (#x < #vr.35) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              next
                                case case_3
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        qed
                      next
                        case c_tlsServerMsg
                        solve( !KU( ~IdPKey ) @ #vk.38 )
                          case DomainCompromise
                          by contradiction /* from formulas */
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash.2, nonce.2, code_challenge.1>)
                                 ) @ #vk.50 )
                            case c_tlsClientMsg
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    qed
                  next
                    case c_browserForward
                    solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~code ) @ #vk.55 )
                        case OIDCClientCodeRedirect_case_1
                        solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                   <'code', ~code, ~n.22>)
                               ) @ #vk.57 )
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientCodeRedirect_case_2
                        solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                   <'code', ~code, ~n.22>)
                               ) @ #vk.57 )
                          case OIDCIdPIssueCode
                          solve( !KU( ~IdPKey ) @ #vk.57 )
                            case DomainCompromise
                            by contradiction /* from formulas */
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.3, nonce.3, code_challenge.2
                                                     >)
                                   ) @ #vk.60 )
                              case c_tlsClientMsg
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientCodeRedirect_case_3
                        solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                   <'code', ~code, ~n.22>)
                               ) @ #vk.57 )
                          case LinkClick
                          by contradiction /* cyclic */
                        next
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientCodeRedirect_case_4
                        solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                   <'code', ~code, ~n.22>)
                               ) @ #vk.57 )
                          case LinkClick
                          by contradiction /* cyclic */
                        next
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                      next
                        case OIDCIdPIssueCode_case_1
                        solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                 <'oidc_req', hash.3, nonce.3, code_challenge.2>)
                               ) @ #vk.59 )
                          case c_tlsClientMsg
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCIdPIssueCode_case_2
                        solve( !KU( ~signalClient ) @ #vk.57 )
                          case DomainCompromise
                          by contradiction /* from formulas */
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                    ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                   <'oidc_req', hash.3, nonce.3, code_challenge.2>)
                                 ) @ #vk.60 )
                            case c_tlsClientMsg
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case OIDCTokenForward_case_1
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.41) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCTokenForward_case_2
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.41) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCTokenForward_case_3
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.41) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCTokenForward_case_4
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.41) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                    case TLSSetup
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.36 )
                      case OIDCIdPIssueCode
                      by contradiction /* from formulas */
                    next
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              next
                case OIDCClientCodeRedirect_case_3
                solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                  case case_1
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code, ~n.14>)
                         ) @ #vk.36 )
                    case LinkClick
                    solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                            s256(~n.6)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~code ) @ #vk.45 )
                        case OIDCClientCodeRedirect_case_1
                        solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.47 )
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientCodeRedirect_case_2
                        solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.47 )
                          case OIDCIdPIssueCode
                          solve( !KU( ~IdPKey ) @ #vk.47 )
                            case DomainCompromise
                            by contradiction /* from formulas */
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.2, nonce.2, code_challenge.1
                                                     >)
                                   ) @ #vk.50 )
                              case c_tlsClientMsg
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientCodeRedirect_case_3
                        solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.47 )
                          case LinkClick
                          by contradiction /* cyclic */
                        next
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientCodeRedirect_case_4
                        solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.47 )
                          case LinkClick
                          by contradiction /* cyclic */
                        next
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode_case_1
                        solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                 <'oidc_req', hash.2, nonce.2, code_challenge.1>)
                               ) @ #vk.49 )
                          case c_tlsClientMsg
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCIdPIssueCode_case_2
                        solve( !KU( ~IdPKey ) @ #vk.47 )
                          case DomainCompromise
                          by contradiction /* from formulas */
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash.2, nonce.2, code_challenge.1>)
                                 ) @ #vk.50 )
                            case c_tlsClientMsg
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case OIDCTokenForward_case_1
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.24 < #x) ∧
                                 (#x < #vr.42) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCTokenForward_case_2
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.24 < #x) ∧
                                 (#x < #vr.42) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCTokenForward_case_3
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.24 < #x) ∧
                                 (#x < #vr.42) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCTokenForward_case_4
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.24 < #x) ∧
                                 (#x < #vr.42) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case c_browserForward
                    solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~code ) @ #vk.49 )
                        case OIDCClientCodeRedirect_case_1
                        solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.51 )
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientCodeRedirect_case_2
                        solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.51 )
                          case OIDCIdPIssueCode
                          solve( !KU( ~IdPKey ) @ #vk.51 )
                            case DomainCompromise
                            by contradiction /* from formulas */
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.2, nonce.2, code_challenge.1
                                                     >)
                                   ) @ #vk.54 )
                              case c_tlsClientMsg
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientCodeRedirect_case_3
                        solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.51 )
                          case LinkClick
                          by contradiction /* cyclic */
                        next
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientCodeRedirect_case_4
                        solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.51 )
                          case LinkClick
                          by contradiction /* cyclic */
                        next
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode_case_1
                        solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                 <'oidc_req', hash.2, nonce.2, code_challenge.1>)
                               ) @ #vk.53 )
                          case c_tlsClientMsg
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCIdPIssueCode_case_2
                        solve( !KU( ~signalClient ) @ #vk.51 )
                          case DomainCompromise
                          by contradiction /* from formulas */
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                    ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                   <'oidc_req', hash.2, nonce.2, code_challenge.1>)
                                 ) @ #vk.54 )
                            case c_tlsClientMsg
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case OIDCTokenForward_case_1
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.43) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCTokenForward_case_2
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.43) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCTokenForward_case_3
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.43) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCTokenForward_case_4
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.43) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                    case TLSSetup
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.36 )
                      case LinkClick
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.6)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              next
                case OIDCClientCodeRedirect_case_4
                solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                  case case_1
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code, ~n.14>)
                         ) @ #vk.36 )
                    case LinkClick
                    solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~code ) @ #vk.38 )
                        case OIDCClientCodeRedirect_case_1
                        solve( !KU( browserForward(~sess.16, cert(~signalClient),
                                                   <'code', ~code, ~n.22>)
                               ) @ #vk.45 )
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientCodeRedirect_case_2
                        solve( !KU( browserForward(~sess.16, cert(~signalClient),
                                                   <'code', ~code, ~n.22>)
                               ) @ #vk.45 )
                          case OIDCIdPIssueCode
                          solve( !KU( ~IdPKey ) @ #vk.45 )
                            case DomainCompromise
                            by contradiction /* from formulas */
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.2, nonce.2, code_challenge.1
                                                     >)
                                   ) @ #vk.48 )
                              case c_tlsClientMsg
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientCodeRedirect_case_3
                        solve( !KU( browserForward(~sess.16, cert(~signalClient),
                                                   <'code', ~code, ~n.22>)
                               ) @ #vk.45 )
                          case LinkClick
                          by contradiction /* cyclic */
                        next
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientCodeRedirect_case_4
                        solve( !KU( browserForward(~sess.16, cert(~signalClient),
                                                   <'code', ~code, ~n.22>)
                               ) @ #vk.45 )
                          case LinkClick
                          by contradiction /* cyclic */
                        next
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                      next
                        case OIDCIdPIssueCode_case_1
                        solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                 <'oidc_req', hash.2, nonce.2, code_challenge.1>)
                               ) @ #vk.47 )
                          case c_tlsClientMsg
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCIdPIssueCode_case_2
                        solve( !KU( ~IdPKey ) @ #vk.45 )
                          case DomainCompromise
                          by contradiction /* from formulas */
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash.2, nonce.2, code_challenge.1>)
                                 ) @ #vk.48 )
                            case c_tlsClientMsg
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case OIDCTokenForward_case_1
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.24 < #x) ∧
                                 (#x < #vr.40) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCTokenForward_case_2
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.24 < #x) ∧
                                 (#x < #vr.40) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCTokenForward_case_3
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.24 < #x) ∧
                                 (#x < #vr.40) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCTokenForward_case_4
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.24 < #x) ∧
                                 (#x < #vr.40) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case c_browserForward
                    solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~code ) @ #vk.50 )
                        case OIDCClientCodeRedirect_case_1
                        solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                   <'code', ~code, ~n.22>)
                               ) @ #vk.52 )
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientCodeRedirect_case_2
                        solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                   <'code', ~code, ~n.22>)
                               ) @ #vk.52 )
                          case OIDCIdPIssueCode
                          solve( !KU( ~IdPKey ) @ #vk.52 )
                            case DomainCompromise
                            by contradiction /* from formulas */
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.2, nonce.3, code_challenge.1
                                                     >)
                                   ) @ #vk.55 )
                              case c_tlsClientMsg
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientCodeRedirect_case_3
                        solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                   <'code', ~code, ~n.22>)
                               ) @ #vk.52 )
                          case LinkClick
                          by contradiction /* cyclic */
                        next
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientCodeRedirect_case_4
                        solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                   <'code', ~code, ~n.22>)
                               ) @ #vk.52 )
                          case LinkClick
                          by contradiction /* cyclic */
                        next
                          case c_browserForward
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                      next
                        case OIDCIdPIssueCode_case_1
                        solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                 <'oidc_req', hash.2, nonce.3, code_challenge.1>)
                               ) @ #vk.54 )
                          case c_tlsClientMsg
                          by contradiction /* cyclic */
                        qed
                      next
                        case OIDCIdPIssueCode_case_2
                        solve( !KU( ~signalClient ) @ #vk.52 )
                          case DomainCompromise
                          by contradiction /* from formulas */
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                    ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                   <'oidc_req', hash.2, nonce.3, code_challenge.1>)
                                 ) @ #vk.55 )
                            case c_tlsClientMsg
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case OIDCTokenForward_case_1
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.41) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCTokenForward_case_2
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.41) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCTokenForward_case_3
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.41) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCTokenForward_case_4
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.41) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                    case TLSSetup
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.36 )
                      case LinkClick
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              next
                case c_tlsClientMsg
                solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                        s256(code_verifier)
                       ) ▶₃ #x.1 )
                  case OIDCIdPIssueCode
                  solve( !KU( ~code ) @ #vk.40 )
                    case OIDCClientCodeRedirect_case_1
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.42 )
                      case c_browserForward
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_2
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.42 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.42 )
                        case DomainCompromise
                        by contradiction /* from formulas */
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash.2, nonce.2, code_challenge.1>)
                               ) @ #vk.45 )
                          case c_tlsClientMsg
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_3
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.42 )
                      case LinkClick
                      by contradiction /* cyclic */
                    next
                      case c_browserForward
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_4
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.42 )
                      case LinkClick
                      by contradiction /* cyclic */
                    next
                      case c_browserForward
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y )
                  next
                    case OIDCIdPIssueCode_case_1
                    solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                             <'oidc_req', hash.2, nonce.2, code_challenge.1>)
                           ) @ #vk.44 )
                      case c_tlsClientMsg
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCIdPIssueCode_case_2
                    solve( !KU( ~signalClient ) @ #vk.42 )
                      case DomainCompromise
                      by contradiction /* from formulas */
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                                ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                               <'oidc_req', hash.2, nonce.2, code_challenge.1>)
                             ) @ #vk.45 )
                        case c_tlsClientMsg
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_1
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.25 < #x) ∧
                             (#x < #vr.29) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      by contradiction /* from formulas */
                    qed
                  next
                    case OIDCTokenForward_case_2
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.25 < #x) ∧
                             (#x < #vr.29) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      by contradiction /* from formulas */
                    qed
                  next
                    case OIDCTokenForward_case_3
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.25 < #x) ∧
                             (#x < #vr.29) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      by contradiction /* from formulas */
                    qed
                  next
                    case OIDCTokenForward_case_4
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.25 < #x) ∧
                             (#x < #vr.29) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        next
          case case_3
          by contradiction /* from formulas */
        qed
      next
        case c_browserForward
        solve( !KU( tlsServerMsg(~sessPost, ~IdPKey,
                                 <'token', 
                                  <$A, username, nonce, h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>, 
                                  sign(<$A, username, nonce, h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)
                                       >,
                                       x)
                                 >)
               ) @ #vk.6 )
          case OIDCIdPTokenIssue
          solve( !KU( tlsClientMsg(~sess.9, cert(~IdPKey),
                                   <'oidc_req', h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2), nonce, 
                                    s256(code_verifier)>)
                 ) @ #vk.32 )
            case OIDCAdversaryInit
            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                     <'token_req', ~code.1, code_verifier>)
                   ) @ #vk.32 )
              case OIDCClientCodeRedirect
              solve( (∃ #x.
                       (UseCode( ~code ) @ #x)
                      ∧
                       (#vr.27 < #x) ∧
                       (#x < #vr.9) ∧
                       (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                     (∃ signalClient domain #x #y.
                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                case case_1
                solve( (∀ #z. (!KU( ~n.6 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
                  case case_1
                  solve( !KU( ~code ) @ #vk.31 )
                    case OIDCClientCodeRedirect_case_1
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.42 )
                      case c_browserForward
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_2
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.42 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.43 )
                        case DomainCompromise
                        by contradiction /* from formulas */
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                               ) @ #vk.51 )
                          case c_tlsClientMsg
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_3
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.42 )
                      case LinkClick
                      by contradiction /* cyclic */
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.43 )
                        case DomainCompromise
                        by contradiction /* from formulas */
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                               ) @ #vk.53 )
                          case c_tlsClientMsg
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_4
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.42 )
                      case LinkClick
                      by contradiction /* cyclic */
                    next
                      case c_browserForward
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                  next
                    case OIDCIdPIssueCode_case_1
                    solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                             <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                           ) @ #vk.44 )
                      case c_tlsClientMsg
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCIdPIssueCode_case_2
                    solve( !KU( ~signalClient ) @ #vk.42 )
                      case DomainCompromise
                      by contradiction /* from formulas */
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                             ) @ #vk.45 )
                        case c_tlsClientMsg
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_1
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.27 < #x) ∧
                             (#x < #vr.32) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      by contradiction /* from formulas */
                    qed
                  next
                    case OIDCTokenForward_case_2
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.27 < #x) ∧
                             (#x < #vr.32) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      by contradiction /* from formulas */
                    qed
                  next
                    case OIDCTokenForward_case_3
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.27 < #x) ∧
                             (#x < #vr.32) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      by contradiction /* from formulas */
                    qed
                  next
                    case OIDCTokenForward_case_4
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.27 < #x) ∧
                             (#x < #vr.32) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case case_2
                by contradiction /* from formulas */
              next
                case case_3
                by contradiction /* from formulas */
              qed
            next
              case c_tlsClientMsg
              solve( !KU( ~code.1 ) @ #vk.47 )
                case OIDCClientCodeRedirect_case_1
                solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                           <'code', ~code.1, ~n.15>)
                       ) @ #vk.49 )
                  case c_browserForward
                  by contradiction /* cyclic */
                qed
              next
                case OIDCClientCodeRedirect_case_2
                solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                           <'code', ~code.1, ~n.15>)
                       ) @ #vk.49 )
                  case OIDCIdPIssueCode
                  solve( !KU( ~IdPKey ) @ #vk.50 )
                    case DomainCompromise
                    by contradiction /* from formulas */
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                           ) @ #vk.58 )
                      case c_tlsClientMsg
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case c_browserForward
                  by contradiction /* cyclic */
                qed
              next
                case OIDCClientCodeRedirect_case_3
                solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                           <'code', ~code.1, ~n.15>)
                       ) @ #vk.49 )
                  case LinkClick
                  by contradiction /* cyclic */
                next
                  case OIDCIdPIssueCode
                  solve( !KU( ~IdPKey ) @ #vk.50 )
                    case DomainCompromise
                    by contradiction /* from formulas */
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                           ) @ #vk.60 )
                      case c_tlsClientMsg
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case c_browserForward
                  by contradiction /* cyclic */
                qed
              next
                case OIDCClientCodeRedirect_case_4
                solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                           <'code', ~code.1, ~n.15>)
                       ) @ #vk.49 )
                  case LinkClick
                  by contradiction /* cyclic */
                next
                  case c_browserForward
                  by contradiction /* cyclic */
                qed
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.1, $IdP, ~code.1 ) @ #y )
              next
                case OIDCIdPIssueCode_case_1
                solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                         <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                       ) @ #vk.51 )
                  case c_tlsClientMsg
                  by contradiction /* cyclic */
                qed
              next
                case OIDCIdPIssueCode_case_2
                solve( !KU( ~signalClient ) @ #vk.49 )
                  case DomainCompromise
                  by contradiction /* from formulas */
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                            ) @ #y )
                next
                  case OIDCIdPIssueCode
                  solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                           <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                         ) @ #vk.52 )
                    case c_tlsClientMsg
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case OIDCTokenForward_case_1
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.27 < #x) ∧
                         (#x < #vr.32) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                qed
              next
                case OIDCTokenForward_case_2
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.27 < #x) ∧
                         (#x < #vr.32) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                qed
              next
                case OIDCTokenForward_case_3
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.27 < #x) ∧
                         (#x < #vr.32) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                qed
              next
                case OIDCTokenForward_case_4
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.27 < #x) ∧
                         (#x < #vr.32) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case OIDCClientInit
            solve( (∀ #z. (!KU( ~n.8 ) @ #z) ⇒ ⊥)  ∥
                   (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
              case case_1
              solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                       <'token_req', ~code.1, ~n.6>)
                     ) @ #vk.31 )
                case OIDCClientCodeRedirect
                solve( (∃ #x.
                         (UseCode( ~code ) @ #x)
                        ∧
                         (#vr.27 < #x) ∧
                         (#x < #vr.9) ∧
                         (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  solve( !KU( ~code ) @ #vk.30 )
                    case OIDCClientCodeRedirect_case_1
                    solve( !KU( browserForward(~sess.10, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.34 )
                      case c_browserForward
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_2
                    solve( !KU( browserForward(~sess.10, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.34 )
                      case c_browserForward
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_3
                    solve( !KU( browserForward(~sess.10, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.34 )
                      case LinkClick
                      by contradiction /* cyclic */
                    next
                      case c_browserForward
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_4
                    solve( !KU( browserForward(~sess.10, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.34 )
                      case LinkClick
                      by contradiction /* cyclic */
                    next
                      case c_browserForward
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y )
                  next
                    case OIDCIdPIssueCode_case_1
                    solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                             <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                           ) @ #vk.36 )
                      case c_tlsClientMsg
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCIdPIssueCode_case_2
                    solve( !KU( ~signalClient ) @ #vk.34 )
                      case DomainCompromise
                      by contradiction /* from formulas */
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                                ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                             ) @ #vk.37 )
                        case c_tlsClientMsg
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_1
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.27 < #x) ∧
                             (#x < #vr.31) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      by contradiction /* from formulas */
                    qed
                  next
                    case OIDCTokenForward_case_2
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.27 < #x) ∧
                             (#x < #vr.31) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      by contradiction /* from formulas */
                    qed
                  next
                    case OIDCTokenForward_case_3
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.27 < #x) ∧
                             (#x < #vr.31) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      by contradiction /* from formulas */
                    qed
                  next
                    case OIDCTokenForward_case_4
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.27 < #x) ∧
                             (#x < #vr.31) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                qed
              next
                case c_tlsClientMsg
                by contradiction /* from formulas */
              qed
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case c_tlsClientMsg
            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                     <'token_req', ~code.1, code_verifier>)
                   ) @ #vk.31 )
              case OIDCClientCodeRedirect
              solve( (∃ #x.
                       (UseCode( ~code ) @ #x)
                      ∧
                       (#vr.27 < #x) ∧
                       (#x < #vr.9) ∧
                       (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                     (∃ signalClient domain #x #y.
                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                case case_1
                solve( (∀ #z. (!KU( ~n.6 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
                  case case_1
                  solve( !KU( ~code ) @ #vk.30 )
                    case OIDCClientCodeRedirect_case_1
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.43 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.44 )
                        case DomainCompromise
                        by contradiction /* from formulas */
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                               ) @ #vk.57 )
                          case c_tlsClientMsg
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_2
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.43 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.45 )
                        case DomainCompromise
                        by contradiction /* from formulas */
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash.2, nonce.2, code_challenge.2>)
                               ) @ #vk.60 )
                          case c_tlsClientMsg
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_3
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.43 )
                      case LinkClick
                      by contradiction /* cyclic */
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.44 )
                        case DomainCompromise
                        by contradiction /* from formulas */
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                               ) @ #vk.54 )
                          case c_tlsClientMsg
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_4
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.43 )
                      case LinkClick
                      by contradiction /* cyclic */
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.44 )
                        case DomainCompromise
                        by contradiction /* from formulas */
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                               ) @ #vk.55 )
                          case c_tlsClientMsg
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y )
                  next
                    case OIDCIdPIssueCode_case_1
                    solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                             <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                           ) @ #vk.45 )
                      case c_tlsClientMsg
                      by contradiction /* cyclic */
                    qed
                  next
                    case OIDCIdPIssueCode_case_2
                    solve( !KU( ~signalClient ) @ #vk.43 )
                      case DomainCompromise
                      by contradiction /* from formulas */
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                                ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                             ) @ #vk.46 )
                        case c_tlsClientMsg
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_1
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.27 < #x) ∧
                             (#x < #vr.31) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      by contradiction /* from formulas */
                    qed
                  next
                    case OIDCTokenForward_case_2
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.27 < #x) ∧
                             (#x < #vr.31) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      by contradiction /* from formulas */
                    qed
                  next
                    case OIDCTokenForward_case_3
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.27 < #x) ∧
                             (#x < #vr.31) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      by contradiction /* from formulas */
                    qed
                  next
                    case OIDCTokenForward_case_4
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.27 < #x) ∧
                             (#x < #vr.31) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case case_2
                by contradiction /* from formulas */
              next
                case case_3
                by contradiction /* from formulas */
              qed
            next
              case c_tlsClientMsg
              solve( !KU( ~code.1 ) @ #vk.47 )
                case OIDCClientCodeRedirect_case_1
                solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                           <'code', ~code.1, ~n.15>)
                       ) @ #vk.49 )
                  case OIDCIdPIssueCode
                  solve( !KU( ~IdPKey ) @ #vk.50 )
                    case DomainCompromise
                    by contradiction /* from formulas */
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                           ) @ #vk.63 )
                      case c_tlsClientMsg
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case c_browserForward
                  by contradiction /* cyclic */
                qed
              next
                case OIDCClientCodeRedirect_case_2
                solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                           <'code', ~code.1, ~n.15>)
                       ) @ #vk.49 )
                  case OIDCIdPIssueCode
                  solve( !KU( ~IdPKey ) @ #vk.51 )
                    case DomainCompromise
                    by contradiction /* from formulas */
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash.2, nonce.2, code_challenge.2>)
                           ) @ #vk.66 )
                      case c_tlsClientMsg
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case c_browserForward
                  by contradiction /* cyclic */
                qed
              next
                case OIDCClientCodeRedirect_case_3
                solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                           <'code', ~code.1, ~n.15>)
                       ) @ #vk.49 )
                  case LinkClick
                  by contradiction /* cyclic */
                next
                  case OIDCIdPIssueCode
                  solve( !KU( ~IdPKey ) @ #vk.50 )
                    case DomainCompromise
                    by contradiction /* from formulas */
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                           ) @ #vk.60 )
                      case c_tlsClientMsg
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case c_browserForward
                  by contradiction /* cyclic */
                qed
              next
                case OIDCClientCodeRedirect_case_4
                solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                           <'code', ~code.1, ~n.15>)
                       ) @ #vk.49 )
                  case LinkClick
                  by contradiction /* cyclic */
                next
                  case OIDCIdPIssueCode
                  solve( !KU( ~IdPKey ) @ #vk.50 )
                    case DomainCompromise
                    by contradiction /* from formulas */
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                           ) @ #vk.61 )
                      case c_tlsClientMsg
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case c_browserForward
                  by contradiction /* cyclic */
                qed
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator, $IdP, ~code.1 ) @ #y )
              next
                case OIDCIdPIssueCode_case_1
                solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                         <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                       ) @ #vk.51 )
                  case c_tlsClientMsg
                  by contradiction /* cyclic */
                qed
              next
                case OIDCIdPIssueCode_case_2
                solve( !KU( ~signalClient ) @ #vk.49 )
                  case DomainCompromise
                  by contradiction /* from formulas */
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                            ) @ #y )
                next
                  case OIDCIdPIssueCode
                  solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                           <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                         ) @ #vk.52 )
                    case c_tlsClientMsg
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case OIDCTokenForward_case_1
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.27 < #x) ∧
                         (#x < #vr.31) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                qed
              next
                case OIDCTokenForward_case_2
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.27 < #x) ∧
                         (#x < #vr.31) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                qed
              next
                case OIDCTokenForward_case_3
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.27 < #x) ∧
                         (#x < #vr.31) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                qed
              next
                case OIDCTokenForward_case_4
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.27 < #x) ∧
                         (#x < #vr.31) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        next
          case c_tlsServerMsg
          solve( !KU( ~IdPKey ) @ #vk.32 )
            case DomainCompromise
            by contradiction /* from formulas */
          next
            case OIDCClientLogin
            by solve( GenBrowserSession( $Initiator, $IdP, ~IdPKey ) @ #y )
          next
            case OIDCIdPIssueCode
            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                     <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                   ) @ #vk.44 )
              case c_tlsClientMsg
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    next
      case OIDCTokenForward_case_3
      solve( !KU( browserForward(~sess.4, cert(~signalClient),
                                 <'code', code, ~n.6>)
             ) @ #vk.6 )
        case LinkClick
        solve( !KU( tlsServerMsg(~sessPost, ~IdPKey,
                                 <'token', 
                                  <$A, username, nonce, h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>, 
                                  sign(<$A, username, nonce, h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)
                                       >,
                                       x)
                                 >)
               ) @ #vk.6 )
          case OIDCIdPTokenIssue
          solve( !KU( tlsClientMsg(~sess.10, cert(~IdPKey),
                                   <'oidc_req', h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2), nonce, 
                                    s256(code_verifier)>)
                 ) @ #vk.21 )
            case OIDCAdversaryInit
            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                     <'token_req', ~code.1, code_verifier>)
                   ) @ #vk.20 )
              case OIDCClientCodeRedirect
              solve( (∃ #x.
                       (UseCode( ~code ) @ #x)
                      ∧
                       (#vr.28 < #x) ∧
                       (#x < #vr.9) ∧
                       (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                     (∃ signalClient domain #x #y.
                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                case case_1
                solve( (∀ #z. (!KU( ~n.6 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
                  case case_1
                  solve( !KU( ~code ) @ #vk.19 )
                    case OIDCClientCodeRedirect_case_1
                    solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                               <'code', ~code, ~n.16>)
                           ) @ #vk.32 )
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_2
                    solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                               <'code', ~code, ~n.16>)
                           ) @ #vk.32 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.33 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce, code_challenge>)
                               ) @ #vk.41 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_3
                    solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                               <'code', ~code, ~n.16>)
                           ) @ #vk.32 )
                      case LinkClick
                      by contradiction
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.33 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.2 )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce, code_challenge>)
                               ) @ #vk.43 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_4
                    solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                               <'code', ~code, ~n.16>)
                           ) @ #vk.32 )
                      case LinkClick
                      by contradiction
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                  next
                    case OIDCIdPIssueCode_case_1
                    solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.1, code_challenge>)
                           ) @ #vk.34 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  next
                    case OIDCIdPIssueCode_case_2
                    solve( !KU( ~IdPKey ) @ #vk.32 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.1, code_challenge>)
                             ) @ #vk.35 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_1
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.28 < #x) ∧
                             (#x < #vr.33) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_2
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.28 < #x) ∧
                             (#x < #vr.33) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_3
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.28 < #x) ∧
                             (#x < #vr.33) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_4
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.28 < #x) ∧
                             (#x < #vr.33) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  qed
                next
                  case case_2
                  by contradiction
                qed
              next
                case case_2
                by contradiction
              next
                case case_3
                by contradiction
              qed
            next
              case c_tlsClientMsg
              solve( !KU( ~code.1 ) @ #vk.37 )
                case OIDCClientCodeRedirect_case_1
                solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                           <'code', ~code.1, ~n.16>)
                       ) @ #vk.39 )
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientCodeRedirect_case_2
                solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                           <'code', ~code.1, ~n.16>)
                       ) @ #vk.39 )
                  case OIDCIdPIssueCode
                  solve( !KU( ~IdPKey ) @ #vk.40 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce, code_challenge>)
                           ) @ #vk.48 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientCodeRedirect_case_3
                solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                           <'code', ~code.1, ~n.16>)
                       ) @ #vk.39 )
                  case LinkClick
                  by contradiction
                next
                  case OIDCIdPIssueCode
                  solve( !KU( ~IdPKey ) @ #vk.40 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.2 )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce, code_challenge>)
                           ) @ #vk.50 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientCodeRedirect_case_4
                solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                           <'code', ~code.1, ~n.16>)
                       ) @ #vk.39 )
                  case LinkClick
                  by contradiction
                next
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.1, $IdP, ~code.1 ) @ #y.1 )
              next
                case OIDCIdPIssueCode_case_1
                solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                         <'oidc_req', hash, nonce.1, code_challenge>)
                       ) @ #vk.41 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              next
                case OIDCIdPIssueCode_case_2
                solve( !KU( ~IdPKey ) @ #vk.39 )
                  case DomainCompromise
                  by contradiction
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                next
                  case OIDCIdPIssueCode
                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce.1, code_challenge>)
                         ) @ #vk.42 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                qed
              next
                case OIDCTokenForward_case_1
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.28 < #x) ∧
                         (#x < #vr.33) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case OIDCTokenForward_case_2
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.28 < #x) ∧
                         (#x < #vr.33) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case OIDCTokenForward_case_3
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.28 < #x) ∧
                         (#x < #vr.33) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case OIDCTokenForward_case_4
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.28 < #x) ∧
                         (#x < #vr.33) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              qed
            qed
          next
            case OIDCClientInit
            solve( (∀ #z. (!KU( ~n.8 ) @ #z) ⇒ ⊥)  ∥
                   (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
              case case_1
              solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                       <'token_req', ~code.1, ~n.6>)
                     ) @ #vk.20 )
                case OIDCClientCodeRedirect
                solve( (∃ #x.
                         (UseCode( ~code ) @ #x)
                        ∧
                         (#vr.28 < #x) ∧
                         (#x < #vr.9) ∧
                         (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  solve( !KU( ~code ) @ #vk.19 )
                    case OIDCClientCodeRedirect_case_1
                    solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                               <'code', ~code, ~n.16>)
                           ) @ #vk.23 )
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_2
                    solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                               <'code', ~code, ~n.16>)
                           ) @ #vk.23 )
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_3
                    solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                               <'code', ~code, ~n.16>)
                           ) @ #vk.23 )
                      case LinkClick
                      by contradiction
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_4
                    solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                               <'code', ~code, ~n.16>)
                           ) @ #vk.23 )
                      case LinkClick
                      by contradiction
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y.1 )
                  next
                    case OIDCIdPIssueCode_case_1
                    solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce, code_challenge>)
                           ) @ #vk.25 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  next
                    case OIDCIdPIssueCode_case_2
                    solve( !KU( ~IdPKey ) @ #vk.23 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.26 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_1
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.28 < #x) ∧
                             (#x < #vr.32) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_2
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.28 < #x) ∧
                             (#x < #vr.32) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_3
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.28 < #x) ∧
                             (#x < #vr.32) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_4
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.28 < #x) ∧
                             (#x < #vr.32) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  qed
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case c_tlsClientMsg
                by contradiction
              qed
            next
              case case_2
              by contradiction
            qed
          next
            case c_tlsClientMsg
            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                     <'token_req', ~code.1, code_verifier>)
                   ) @ #vk.20 )
              case OIDCClientCodeRedirect
              solve( (∃ #x.
                       (UseCode( ~code ) @ #x)
                      ∧
                       (#vr.28 < #x) ∧
                       (#x < #vr.9) ∧
                       (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                     (∃ signalClient domain #x #y.
                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                case case_1
                solve( (∀ #z. (!KU( ~n.6 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
                  case case_1
                  solve( !KU( ~code ) @ #vk.19 )
                    case OIDCClientCodeRedirect_case_1
                    solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                               <'code', ~code, ~n.16>)
                           ) @ #vk.32 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.33 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce, code_challenge>)
                               ) @ #vk.46 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_2
                    solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                               <'code', ~code, ~n.16>)
                           ) @ #vk.32 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.33 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                               ) @ #vk.50 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_3
                    solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                               <'code', ~code, ~n.16>)
                           ) @ #vk.32 )
                      case LinkClick
                      by contradiction
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.33 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.2 )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce, code_challenge>)
                               ) @ #vk.43 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_4
                    solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                               <'code', ~code, ~n.16>)
                           ) @ #vk.32 )
                      case LinkClick
                      by contradiction
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.33 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce.1, code_challenge>)
                               ) @ #vk.44 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y.1 )
                  next
                    case OIDCIdPIssueCode_case_1
                    solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.1, code_challenge>)
                           ) @ #vk.34 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  next
                    case OIDCIdPIssueCode_case_2
                    solve( !KU( ~IdPKey ) @ #vk.32 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.1, code_challenge>)
                             ) @ #vk.35 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_1
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.28 < #x) ∧
                             (#x < #vr.32) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_2
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.28 < #x) ∧
                             (#x < #vr.32) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_3
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.28 < #x) ∧
                             (#x < #vr.32) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_4
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.28 < #x) ∧
                             (#x < #vr.32) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  qed
                next
                  case case_2
                  by contradiction
                qed
              next
                case case_2
                by contradiction
              next
                case case_3
                by contradiction
              qed
            next
              case c_tlsClientMsg
              solve( !KU( ~code.1 ) @ #vk.36 )
                case OIDCClientCodeRedirect_case_1
                solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                           <'code', ~code.1, ~n.16>)
                       ) @ #vk.38 )
                  case OIDCIdPIssueCode
                  solve( !KU( ~IdPKey ) @ #vk.39 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce, code_challenge>)
                           ) @ #vk.52 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientCodeRedirect_case_2
                solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                           <'code', ~code.1, ~n.16>)
                       ) @ #vk.38 )
                  case OIDCIdPIssueCode
                  solve( !KU( ~IdPKey ) @ #vk.39 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                           ) @ #vk.56 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientCodeRedirect_case_3
                solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                           <'code', ~code.1, ~n.16>)
                       ) @ #vk.38 )
                  case LinkClick
                  by contradiction
                next
                  case OIDCIdPIssueCode
                  solve( !KU( ~IdPKey ) @ #vk.39 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.2 )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce, code_challenge>)
                           ) @ #vk.49 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientCodeRedirect_case_4
                solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                           <'code', ~code.1, ~n.16>)
                       ) @ #vk.38 )
                  case LinkClick
                  by contradiction
                next
                  case OIDCIdPIssueCode
                  solve( !KU( ~IdPKey ) @ #vk.39 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.1, code_challenge>)
                           ) @ #vk.50 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator, $IdP, ~code.1 ) @ #y.1 )
              next
                case OIDCIdPIssueCode_case_1
                solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                         <'oidc_req', hash, nonce.1, code_challenge>)
                       ) @ #vk.40 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              next
                case OIDCIdPIssueCode_case_2
                solve( !KU( ~IdPKey ) @ #vk.38 )
                  case DomainCompromise
                  by contradiction
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator, $IdP, ~IdPKey ) @ #y.1 )
                next
                  case OIDCIdPIssueCode
                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce.1, code_challenge>)
                         ) @ #vk.41 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                qed
              next
                case OIDCTokenForward_case_1
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.28 < #x) ∧
                         (#x < #vr.32) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case OIDCTokenForward_case_2
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.28 < #x) ∧
                         (#x < #vr.32) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case OIDCTokenForward_case_3
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.28 < #x) ∧
                         (#x < #vr.32) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case OIDCTokenForward_case_4
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.28 < #x) ∧
                         (#x < #vr.32) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              qed
            qed
          qed
        next
          case c_tlsServerMsg
          solve( !KU( ~IdPKey ) @ #vk.20 )
            case DomainCompromise
            by contradiction
          next
            case OIDCClientLogin
            by solve( GenBrowserSession( $Initiator, $IdP, ~IdPKey ) @ #y.1 )
          next
            case OIDCIdPIssueCode
            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                     <'oidc_req', hash, nonce.1, code_challenge>)
                   ) @ #vk.34 )
              case c_tlsClientMsg
              by contradiction
            qed
          qed
        qed
      next
        case OIDCIdPIssueCode
        solve( (∃ #x.
                 (UseCode( ~code ) @ #x)
                ∧
                 (#vr.27 < #x) ∧
                 (#x < #vr.9) ∧
                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
               (∃ signalClient domain #x #y.
                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                 (CompromisedDomain( signalClient, domain ) @ #y)) )
          case case_1
          solve( !Domain( $IdP, ~IdPKey.1 ) ▶₁ #x.1 )
            case TLSSetup
            solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey),
                                     <'oidc_req', hash.1, ~n.4, code_challenge>)
                   ) @ #vk.17 )
              case OIDCAdversaryInit
              solve( !KU( tlsClientMsg(~sess.3, cert(~IdPKey.1),
                                       <'token_req', ~code, code_verifier>)
                     ) @ #vk.19 )
                case OIDCClientCodeRedirect_case_1
                solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                  case case_1
                  solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.29 )
                    case c_browserForward
                    solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash.1, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~code ) @ #vk.45 )
                        case OIDCClientCodeRedirect_case_1
                        solve( !KU( browserForward(~sess.20, cert(~signalClient.1),
                                                   <'code', ~code, ~n.31>)
                               ) @ #vk.47 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_2
                        solve( !KU( browserForward(~sess.20, cert(~signalClient.1),
                                                   <'code', ~code, ~n.31>)
                               ) @ #vk.47 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_3
                        solve( !KU( browserForward(~sess.20, cert(~signalClient.1),
                                                   <'code', ~code, ~n.31>)
                               ) @ #vk.47 )
                          case LinkClick
                          by contradiction
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( ~IdPKey ) @ #vk.47 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                                   ) @ #vk.50 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_4
                        solve( !KU( browserForward(~sess.20, cert(~signalClient.1),
                                                   <'code', ~code, ~n.31>)
                               ) @ #vk.47 )
                          case LinkClick
                          by contradiction
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode_case_1
                        solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge>)
                               ) @ #vk.49 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      next
                        case OIDCIdPIssueCode_case_2
                        solve( !KU( ~signalClient ) @ #vk.47 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                    ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.50 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case OIDCTokenForward_case_1
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.27 < #x) ∧
                                 (#x < #vr.52) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_2
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.27 < #x) ∧
                                 (#x < #vr.52) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_3
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.27 < #x) ∧
                                 (#x < #vr.52) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_4
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.27 < #x) ∧
                                 (#x < #vr.52) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                    case TLSSetup
                    solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.29 )
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash.1, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        by contradiction
                      qed
                    qed
                  qed
                qed
              next
                case OIDCClientCodeRedirect_case_2
                solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                  case case_1
                  solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.29 )
                    case c_browserForward
                    solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash.1, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~code ) @ #vk.48 )
                        case OIDCClientCodeRedirect_case_1
                        solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.50 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_2
                        solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.50 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_3
                        solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.50 )
                          case LinkClick
                          by contradiction
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( ~IdPKey ) @ #vk.50 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.2, nonce.2, code_challenge.1
                                                     >)
                                   ) @ #vk.53 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_4
                        solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.50 )
                          case LinkClick
                          by contradiction
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode_case_1
                        solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                 <'oidc_req', hash.2, nonce.2, code_challenge.1>)
                               ) @ #vk.52 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      next
                        case OIDCIdPIssueCode_case_2
                        solve( !KU( ~signalClient ) @ #vk.50 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                    ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                   <'oidc_req', hash.2, nonce.2, code_challenge.1>)
                                 ) @ #vk.53 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case OIDCTokenForward_case_1
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.27 < #x) ∧
                                 (#x < #vr.43) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_2
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.27 < #x) ∧
                                 (#x < #vr.43) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_3
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.27 < #x) ∧
                                 (#x < #vr.43) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_4
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.27 < #x) ∧
                                 (#x < #vr.43) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                    case TLSSetup
                    solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.29 )
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash.1, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        by contradiction
                      qed
                    qed
                  qed
                qed
              next
                case OIDCClientCodeRedirect_case_3
                solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                  case case_1
                  solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.29 )
                    case LinkClick
                    solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash.1, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~code ) @ #vk.38 )
                        case OIDCClientCodeRedirect_case_1
                        solve( !KU( browserForward(~sess.18, cert(~signalClient),
                                                   <'code', ~code, ~n.24>)
                               ) @ #vk.40 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_2
                        solve( !KU( browserForward(~sess.18, cert(~signalClient),
                                                   <'code', ~code, ~n.24>)
                               ) @ #vk.40 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_3
                        solve( !KU( browserForward(~sess.18, cert(~signalClient),
                                                   <'code', ~code, ~n.24>)
                               ) @ #vk.40 )
                          case LinkClick
                          by contradiction
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( ~IdPKey ) @ #vk.40 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.2 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                                   ) @ #vk.43 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_4
                        solve( !KU( browserForward(~sess.18, cert(~signalClient),
                                                   <'code', ~code, ~n.24>)
                               ) @ #vk.40 )
                          case LinkClick
                          by contradiction
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.2 )
                      next
                        case OIDCIdPIssueCode_case_1
                        solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge>)
                               ) @ #vk.42 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      next
                        case OIDCIdPIssueCode_case_2
                        solve( !KU( ~IdPKey ) @ #vk.40 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.2 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.43 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case OIDCTokenForward_case_1
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.26 < #x) ∧
                                 (#x < #vr.44) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_2
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.26 < #x) ∧
                                 (#x < #vr.44) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_3
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.26 < #x) ∧
                                 (#x < #vr.44) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_4
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.26 < #x) ∧
                                 (#x < #vr.44) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      qed
                    qed
                  next
                    case OIDCIdPIssueCode
                    solve( St_OIDCIdP_Code( $A, $Username, ~code, hash.1, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( tlsServerMsg(~sessPost, ~IdPKey,
                                               <'token', 
                                                <$A, username, nonce, 
                                                 h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>, 
                                                sign(<$A, username, nonce, 
                                                      h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>,
                                                     x)
                                               >)
                             ) @ #vk.8 )
                        case OIDCIdPTokenIssue
                        solve( !KU( tlsClientMsg(~sess.11, cert(~IdPKey),
                                                 <'oidc_req', 
                                                  h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2), nonce, 
                                                  s256(code_verifier)>)
                               ) @ #vk.31 )
                          case OIDCAdversaryInit
                          solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                   <'token_req', ~code.1, code_verifier>)
                                 ) @ #vk.31 )
                            case OIDCClientCodeRedirect
                            solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey),
                                                     <'login', $Username, pw>)
                                   ) @ #vk.18 )
                              case OIDCClientLogin
                              by contradiction
                            next
                              case c_tlsClientMsg
                              solve( !KU( s256(~n.6) ) @ #vk.28 )
                                case OIDCClientInit_case_1
                                solve( !KU( ~IdPKey ) @ #vk.36 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                            ) @ #y.1 )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash, nonce, code_challenge
                                                           >)
                                         ) @ #vk.39 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case OIDCClientInit_case_2
                                solve( GenBrowserSession( $Initiator, $A, ~sess.2 ) @ #y )
                                  case OIDCAdversaryInit
                                  solve( !KU( ~sess.2 ) @ #vk.29 )
                                    case OIDCAdversaryInit
                                    solve( !KU( ~IdPKey ) @ #vk.36 )
                                      case DomainCompromise
                                      by contradiction
                                    next
                                      case OIDCClientLogin
                                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                                ) @ #y.1 )
                                    next
                                      case OIDCIdPIssueCode
                                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                               <'oidc_req', hash, nonce, 
                                                                code_challenge>)
                                             ) @ #vk.39 )
                                        case c_tlsClientMsg
                                        by contradiction
                                      qed
                                    qed
                                  next
                                    case OIDCClientLogin
                                    solve( !KU( ~IdPKey ) @ #vk.36 )
                                      case DomainCompromise
                                      by contradiction
                                    next
                                      case OIDCClientLogin
                                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                                ) @ #y.1 )
                                    next
                                      case OIDCIdPIssueCode
                                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                               <'oidc_req', hash, nonce, 
                                                                code_challenge>)
                                             ) @ #vk.40 )
                                        case c_tlsClientMsg
                                        by contradiction
                                      qed
                                    qed
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( ~signalClient.1 ) @ #vk.37 )
                                      case DomainCompromise
                                      solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                                               <'oidc_req', hash, nonce, 
                                                                code_challenge>)
                                             ) @ #vk.38 )
                                        case OIDCAdversaryInit
                                        by contradiction
                                      next
                                        case c_tlsClientMsg
                                        by contradiction
                                      qed
                                    next
                                      case OIDCClientLogin
                                      by solve( GenBrowserSession( $Initiator.1, $IdP.1,
                                                                   ~signalClient.1
                                                ) @ #y.1 )
                                    next
                                      case OIDCIdPIssueCode
                                      solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                                               <'oidc_req', hash.1, nonce.1, 
                                                                code_challenge.1>)
                                             ) @ #vk.42 )
                                        case c_tlsClientMsg
                                        by contradiction
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case c_s256
                                by contradiction
                              qed
                            qed
                          next
                            case c_tlsClientMsg
                            solve( !KU( ~code.1 ) @ #vk.46 )
                              case OIDCClientCodeRedirect_case_1
                              solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.17>)
                                     ) @ #vk.48 )
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientCodeRedirect_case_2
                              solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.17>)
                                     ) @ #vk.48 )
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.49 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                            ) @ #y.1 )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce, 
                                                            code_challenge>)
                                         ) @ #vk.57 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientCodeRedirect_case_3
                              solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.17>)
                                     ) @ #vk.48 )
                                case LinkClick
                                by contradiction
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.49 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                            ) @ #y.2 )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce, 
                                                            code_challenge>)
                                         ) @ #vk.59 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientCodeRedirect_case_4
                              solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.17>)
                                     ) @ #vk.48 )
                                case LinkClick
                                by contradiction
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.2, $IdP, ~code.1 ) @ #y.1 )
                            next
                              case OIDCIdPIssueCode_case_1
                              solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                                       <'oidc_req', hash.1, nonce.1, code_challenge
                                                       >)
                                     ) @ #vk.50 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            next
                              case OIDCIdPIssueCode_case_2
                              solve( !KU( ~signalClient ) @ #vk.48 )
                                case DomainCompromise
                                by contradiction
                              next
                                case OIDCClientLogin
                                by solve( GenBrowserSession( $Initiator.2, $IdP, ~signalClient
                                          ) @ #y.1 )
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                         <'oidc_req', hash.1, nonce.1, 
                                                          code_challenge>)
                                       ) @ #vk.51 )
                                  case c_tlsClientMsg
                                  by contradiction
                                qed
                              qed
                            next
                              case OIDCTokenForward_case_1
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.33 < #x) ∧
                                       (#x < #vr.38) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            next
                              case OIDCTokenForward_case_2
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.33 < #x) ∧
                                       (#x < #vr.38) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            next
                              case OIDCTokenForward_case_3
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.33 < #x) ∧
                                       (#x < #vr.38) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            next
                              case OIDCTokenForward_case_4
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.33 < #x) ∧
                                       (#x < #vr.38) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            qed
                          qed
                        next
                          case OIDCClientInit
                          solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                   <'token_req', ~code.1, ~n.6>)
                                 ) @ #vk.30 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case c_tlsClientMsg
                          solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                   <'token_req', ~code.1, code_verifier>)
                                 ) @ #vk.30 )
                            case c_tlsClientMsg
                            solve( !KU( ~code.1 ) @ #vk.46 )
                              case OIDCClientCodeRedirect_case_1
                              solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.17>)
                                     ) @ #vk.48 )
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.49 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                            ) @ #y.1 )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce, 
                                                            code_challenge>)
                                         ) @ #vk.62 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientCodeRedirect_case_2
                              solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.17>)
                                     ) @ #vk.48 )
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.50 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                            ) @ #y.1 )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.2, nonce.1, 
                                                            code_challenge.1>)
                                         ) @ #vk.65 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientCodeRedirect_case_3
                              solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.17>)
                                     ) @ #vk.48 )
                                case LinkClick
                                by contradiction
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.49 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                            ) @ #y.2 )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce, 
                                                            code_challenge>)
                                         ) @ #vk.59 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientCodeRedirect_case_4
                              solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.17>)
                                     ) @ #vk.48 )
                                case LinkClick
                                by contradiction
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.49 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                            ) @ #y.1 )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce.1, 
                                                            code_challenge>)
                                         ) @ #vk.60 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~code.1 ) @ #y.1 )
                            next
                              case OIDCIdPIssueCode_case_1
                              solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                                       <'oidc_req', hash.1, nonce.1, code_challenge
                                                       >)
                                     ) @ #vk.50 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            next
                              case OIDCIdPIssueCode_case_2
                              solve( !KU( ~signalClient ) @ #vk.48 )
                                case DomainCompromise
                                by contradiction
                              next
                                case OIDCClientLogin
                                by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                          ) @ #y.1 )
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                         <'oidc_req', hash.1, nonce.1, 
                                                          code_challenge>)
                                       ) @ #vk.51 )
                                  case c_tlsClientMsg
                                  by contradiction
                                qed
                              qed
                            next
                              case OIDCTokenForward_case_1
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.33 < #x) ∧
                                       (#x < #vr.37) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            next
                              case OIDCTokenForward_case_2
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.33 < #x) ∧
                                       (#x < #vr.37) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            next
                              case OIDCTokenForward_case_3
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.33 < #x) ∧
                                       (#x < #vr.37) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            next
                              case OIDCTokenForward_case_4
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.33 < #x) ∧
                                       (#x < #vr.37) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            qed
                          qed
                        qed
                      next
                        case c_tlsServerMsg
                        solve( !KU( ~IdPKey ) @ #vk.31 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.43 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      qed
                    qed
                  next
                    case c_browserForward
                    solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash.1, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~code ) @ #vk.42 )
                        case OIDCClientCodeRedirect_case_1
                        solve( !KU( browserForward(~sess.18, cert(~signalClient.1),
                                                   <'code', ~code, ~n.24>)
                               ) @ #vk.44 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_2
                        solve( !KU( browserForward(~sess.18, cert(~signalClient.1),
                                                   <'code', ~code, ~n.24>)
                               ) @ #vk.44 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_3
                        solve( !KU( browserForward(~sess.18, cert(~signalClient.1),
                                                   <'code', ~code, ~n.24>)
                               ) @ #vk.44 )
                          case LinkClick
                          by contradiction
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( ~IdPKey ) @ #vk.44 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.2 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                                   ) @ #vk.47 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_4
                        solve( !KU( browserForward(~sess.18, cert(~signalClient.1),
                                                   <'code', ~code, ~n.24>)
                               ) @ #vk.44 )
                          case LinkClick
                          by contradiction
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.2 )
                      next
                        case OIDCIdPIssueCode_case_1
                        solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge>)
                               ) @ #vk.46 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      next
                        case OIDCIdPIssueCode_case_2
                        solve( !KU( ~signalClient ) @ #vk.44 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                    ) @ #y.2 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.47 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case OIDCTokenForward_case_1
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.27 < #x) ∧
                                 (#x < #vr.45) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_2
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.27 < #x) ∧
                                 (#x < #vr.45) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_3
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.27 < #x) ∧
                                 (#x < #vr.45) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_4
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.27 < #x) ∧
                                 (#x < #vr.45) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                    case TLSSetup
                    solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.29 )
                      case LinkClick
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash.1, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        by contradiction
                      qed
                    next
                      case OIDCIdPIssueCode
                      by contradiction
                    next
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash.1, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        by contradiction
                      qed
                    qed
                  qed
                qed
              next
                case OIDCClientCodeRedirect_case_4
                solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                  case case_1
                  solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.29 )
                    case LinkClick
                    solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash.1, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~code ) @ #vk.31 )
                        case OIDCClientCodeRedirect_case_1
                        solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.38 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_2
                        solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.38 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_3
                        solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.38 )
                          case LinkClick
                          by contradiction
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( ~IdPKey ) @ #vk.38 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                                   ) @ #vk.41 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_4
                        solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.38 )
                          case LinkClick
                          by contradiction
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode_case_1
                        solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge>)
                               ) @ #vk.40 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      next
                        case OIDCIdPIssueCode_case_2
                        solve( !KU( ~IdPKey ) @ #vk.38 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.41 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case OIDCTokenForward_case_1
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.26 < #x) ∧
                                 (#x < #vr.42) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_2
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.26 < #x) ∧
                                 (#x < #vr.42) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_3
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.26 < #x) ∧
                                 (#x < #vr.42) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_4
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.26 < #x) ∧
                                 (#x < #vr.42) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      qed
                    qed
                  next
                    case c_browserForward
                    solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash.1, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~code ) @ #vk.43 )
                        case OIDCClientCodeRedirect_case_1
                        solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.45 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_2
                        solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.45 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_3
                        solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.45 )
                          case LinkClick
                          by contradiction
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( ~IdPKey ) @ #vk.45 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.2, code_challenge>)
                                   ) @ #vk.48 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_4
                        solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.45 )
                          case LinkClick
                          by contradiction
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode_case_1
                        solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.2, code_challenge>)
                               ) @ #vk.47 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      next
                        case OIDCIdPIssueCode_case_2
                        solve( !KU( ~signalClient ) @ #vk.45 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                    ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.2, code_challenge>)
                                 ) @ #vk.48 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case OIDCTokenForward_case_1
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.27 < #x) ∧
                                 (#x < #vr.43) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_2
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.27 < #x) ∧
                                 (#x < #vr.43) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_3
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.27 < #x) ∧
                                 (#x < #vr.43) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_4
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.27 < #x) ∧
                                 (#x < #vr.43) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                    case TLSSetup
                    solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.29 )
                      case LinkClick
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash.1, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        by contradiction
                      qed
                    next
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash.1, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        by contradiction
                      qed
                    qed
                  qed
                qed
              next
                case c_tlsClientMsg
                solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash.1, nonce.1,
                                        s256(code_verifier)
                       ) ▶₃ #x.1 )
                  case OIDCIdPIssueCode
                  solve( !KU( ~code ) @ #vk.34 )
                    case OIDCClientCodeRedirect_case_1
                    solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.36 )
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_2
                    solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.36 )
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_3
                    solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.36 )
                      case LinkClick
                      by contradiction
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.36 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge>)
                               ) @ #vk.39 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_4
                    solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.36 )
                      case LinkClick
                      by contradiction
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y.1 )
                  next
                    case OIDCIdPIssueCode_case_1
                    solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                             <'oidc_req', hash.1, nonce.1, code_challenge>)
                           ) @ #vk.38 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  next
                    case OIDCIdPIssueCode_case_2
                    solve( !KU( ~signalClient ) @ #vk.36 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                                ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.1, code_challenge>)
                             ) @ #vk.39 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_1
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.27 < #x) ∧
                             (#x < #vr.31) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_2
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.27 < #x) ∧
                             (#x < #vr.31) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_3
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.27 < #x) ∧
                             (#x < #vr.31) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_4
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.27 < #x) ∧
                             (#x < #vr.31) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  qed
                qed
              qed
            next
              case OIDCClientInit
              solve( !KU( tlsClientMsg(~sess.3, cert(~IdPKey.1),
                                       <'token_req', ~code, code_verifier>)
                     ) @ #vk.19 )
                case OIDCClientCodeRedirect_case_1
                solve( (∀ #z. (!KU( ~n.7 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                  case case_1
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.20 )
                    case c_browserForward
                    by solve( St_OIDCIdP_Code( $IdP, $Username.1, ~code, hash, nonce.1,
                                               s256(~n.7)
                              ) ▶₃ #x.1 )
                  qed
                next
                  case case_2
                  solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                    case TLSSetup
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.20 )
                      case c_browserForward
                      by solve( St_OIDCIdP_Code( $IdP, $Username.1, ~code, hash, nonce.1,
                                                 s256(~n.7)
                                ) ▶₃ #x.1 )
                    qed
                  qed
                qed
              next
                case OIDCClientCodeRedirect_case_2
                solve( (∀ #z. (!KU( ~n.7 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                  case case_1
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.20 )
                    case c_browserForward
                    by solve( St_OIDCIdP_Code( $IdP, $Username.1, ~code, hash, nonce.1,
                                               s256(~n.7)
                              ) ▶₃ #x.1 )
                  qed
                next
                  case case_2
                  solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                    case TLSSetup
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.20 )
                      case c_browserForward
                      by solve( St_OIDCIdP_Code( $IdP, $Username.1, ~code, hash, nonce.1,
                                                 s256(~n.7)
                                ) ▶₃ #x.1 )
                    qed
                  qed
                qed
              next
                case OIDCClientCodeRedirect_case_3
                solve( (∀ #z. (!KU( ~n.7 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                  case case_1
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.20 )
                    case LinkClick
                    by solve( St_OIDCIdP_Code( $IdP, $Username.1, ~code, hash, nonce.1,
                                               s256(~n.7)
                              ) ▶₃ #x.1 )
                  next
                    case OIDCIdPIssueCode
                    solve( St_OIDCIdP_Code( $A, $Username.1, ~code, hash, nonce.1,
                                            s256(~n.6)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( tlsServerMsg(~sessPost, ~IdPKey,
                                               <'token', 
                                                <$A, username, nonce, 
                                                 h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>, 
                                                sign(<$A, username, nonce, 
                                                      h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>,
                                                     x)
                                               >)
                             ) @ #vk.8 )
                        case OIDCIdPTokenIssue
                        solve( !KU( tlsClientMsg(~sess.10, cert(~IdPKey),
                                                 <'oidc_req', 
                                                  h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2), nonce, 
                                                  s256(code_verifier)>)
                               ) @ #vk.22 )
                          case OIDCAdversaryInit
                          solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                   <'token_req', ~code.1, code_verifier>)
                                 ) @ #vk.21 )
                            case c_tlsClientMsg
                            solve( !KU( ~code.1 ) @ #vk.38 )
                              case OIDCClientCodeRedirect_case_1
                              solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.17>)
                                     ) @ #vk.40 )
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientCodeRedirect_case_2
                              solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.17>)
                                     ) @ #vk.40 )
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.41 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                            ) @ #y.1 )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash, nonce, code_challenge
                                                           >)
                                         ) @ #vk.49 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientCodeRedirect_case_3
                              solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.17>)
                                     ) @ #vk.40 )
                                case LinkClick
                                by contradiction
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.41 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                            ) @ #y.2 )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash, nonce, code_challenge
                                                           >)
                                         ) @ #vk.51 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientCodeRedirect_case_4
                              solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.17>)
                                     ) @ #vk.40 )
                                case LinkClick
                                by contradiction
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.2, $IdP, ~code.1 ) @ #y.1 )
                            next
                              case OIDCIdPIssueCode_case_1
                              solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                                       <'oidc_req', hash, nonce.1, code_challenge>)
                                     ) @ #vk.42 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            next
                              case OIDCIdPIssueCode_case_2
                              solve( !KU( ~signalClient ) @ #vk.40 )
                                case DomainCompromise
                                by contradiction
                              next
                                case OIDCClientLogin
                                by solve( GenBrowserSession( $Initiator.2, $IdP, ~signalClient
                                          ) @ #y.1 )
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                         <'oidc_req', hash, nonce.1, code_challenge
                                                         >)
                                       ) @ #vk.43 )
                                  case c_tlsClientMsg
                                  by contradiction
                                qed
                              qed
                            next
                              case OIDCTokenForward_case_1
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.32 < #x) ∧
                                       (#x < #vr.37) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            next
                              case OIDCTokenForward_case_2
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.32 < #x) ∧
                                       (#x < #vr.37) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            next
                              case OIDCTokenForward_case_3
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.32 < #x) ∧
                                       (#x < #vr.37) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            next
                              case OIDCTokenForward_case_4
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.32 < #x) ∧
                                       (#x < #vr.37) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            qed
                          qed
                        next
                          case OIDCClientInit
                          solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                   <'token_req', ~code.1, ~n.6>)
                                 ) @ #vk.20 )
                            case OIDCClientCodeRedirect
                            solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey),
                                                     <'login', $Username, pw>)
                                   ) @ #vk.18 )
                              case OIDCClientLogin
                              by contradiction
                            next
                              case c_tlsClientMsg
                              solve( GenBrowserSession( $Initiator, $A, ~sess.2 ) @ #y )
                                case OIDCClientInit
                                solve( !KU( ~sess.2 ) @ #vk.20 )
                                  case OIDCClientInit
                                  solve( !KU( ~IdPKey ) @ #vk.27 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                              ) @ #y.1 )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.30 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case OIDCClientLogin
                                  solve( !KU( ~IdPKey ) @ #vk.27 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                              ) @ #y.1 )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.31 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~signalClient.1 ) @ #vk.28 )
                                    case DomainCompromise
                                    solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                                             <'oidc_req', hash, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.29 )
                                      case OIDCClientInit
                                      by contradiction
                                    next
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.1, $IdP.1,
                                                                 ~signalClient.1
                                              ) @ #y.1 )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                                             <'oidc_req', hash.1, nonce.1, 
                                                              code_challenge.1>)
                                           ) @ #vk.33 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case c_tlsClientMsg
                          solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                   <'token_req', ~code.1, code_verifier>)
                                 ) @ #vk.21 )
                            case c_tlsClientMsg
                            solve( !KU( ~code.1 ) @ #vk.37 )
                              case OIDCClientCodeRedirect_case_1
                              solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.17>)
                                     ) @ #vk.39 )
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.40 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                            ) @ #y.1 )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash, nonce, code_challenge
                                                           >)
                                         ) @ #vk.53 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientCodeRedirect_case_2
                              solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.17>)
                                     ) @ #vk.39 )
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.40 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                            ) @ #y.1 )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce.1, 
                                                            code_challenge.1>)
                                         ) @ #vk.57 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientCodeRedirect_case_3
                              solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.17>)
                                     ) @ #vk.39 )
                                case LinkClick
                                by contradiction
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.40 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                            ) @ #y.2 )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash, nonce, code_challenge
                                                           >)
                                         ) @ #vk.50 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientCodeRedirect_case_4
                              solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.17>)
                                     ) @ #vk.39 )
                                case LinkClick
                                by contradiction
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.40 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                            ) @ #y.1 )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash, nonce.1, 
                                                            code_challenge>)
                                         ) @ #vk.51 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~code.1 ) @ #y.1 )
                            next
                              case OIDCIdPIssueCode_case_1
                              solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                                       <'oidc_req', hash, nonce.1, code_challenge>)
                                     ) @ #vk.41 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            next
                              case OIDCIdPIssueCode_case_2
                              solve( !KU( ~signalClient ) @ #vk.39 )
                                case DomainCompromise
                                by contradiction
                              next
                                case OIDCClientLogin
                                by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                          ) @ #y.1 )
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                         <'oidc_req', hash, nonce.1, code_challenge
                                                         >)
                                       ) @ #vk.42 )
                                  case c_tlsClientMsg
                                  by contradiction
                                qed
                              qed
                            next
                              case OIDCTokenForward_case_1
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.32 < #x) ∧
                                       (#x < #vr.36) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            next
                              case OIDCTokenForward_case_2
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.32 < #x) ∧
                                       (#x < #vr.36) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            next
                              case OIDCTokenForward_case_3
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.32 < #x) ∧
                                       (#x < #vr.36) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            next
                              case OIDCTokenForward_case_4
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.32 < #x) ∧
                                       (#x < #vr.36) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            qed
                          qed
                        qed
                      next
                        case c_tlsServerMsg
                        solve( !KU( ~IdPKey ) @ #vk.21 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash, nonce.1, code_challenge>)
                                 ) @ #vk.35 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      qed
                    qed
                  next
                    case c_browserForward
                    by solve( St_OIDCIdP_Code( $IdP, $Username.1, ~code, hash, nonce.1,
                                               s256(~n.7)
                              ) ▶₃ #x.1 )
                  qed
                next
                  case case_2
                  solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                    case TLSSetup
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.20 )
                      case LinkClick
                      by solve( St_OIDCIdP_Code( $IdP, $Username.1, ~code, hash, nonce.1,
                                                 s256(~n.7)
                                ) ▶₃ #x.1 )
                    next
                      case OIDCIdPIssueCode
                      by contradiction
                    next
                      case c_browserForward
                      by solve( St_OIDCIdP_Code( $IdP, $Username.1, ~code, hash, nonce.1,
                                                 s256(~n.7)
                                ) ▶₃ #x.1 )
                    qed
                  qed
                qed
              next
                case OIDCClientCodeRedirect_case_4
                solve( (∀ #z. (!KU( ~n.7 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                  case case_1
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.20 )
                    case LinkClick
                    by solve( St_OIDCIdP_Code( $IdP, $Username.1, ~code, hash, nonce.1,
                                               s256(~n.7)
                              ) ▶₃ #x.1 )
                  next
                    case c_browserForward
                    by solve( St_OIDCIdP_Code( $IdP, $Username.1, ~code, hash, nonce.1,
                                               s256(~n.7)
                              ) ▶₃ #x.1 )
                  qed
                next
                  case case_2
                  solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                    case TLSSetup
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.20 )
                      case LinkClick
                      by solve( St_OIDCIdP_Code( $IdP, $Username.1, ~code, hash, nonce.1,
                                                 s256(~n.7)
                                ) ▶₃ #x.1 )
                    next
                      case c_browserForward
                      by solve( St_OIDCIdP_Code( $IdP, $Username.1, ~code, hash, nonce.1,
                                                 s256(~n.7)
                                ) ▶₃ #x.1 )
                    qed
                  qed
                qed
              next
                case c_tlsClientMsg
                solve( St_OIDCIdP_Code( $IdP, $Username.1, ~code, hash, nonce.1,
                                        s256(code_verifier)
                       ) ▶₃ #x.1 )
                  case OIDCIdPIssueCode
                  solve( (∀ #z. (!KU( ~n.6 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  qed
                qed
              qed
            next
              case c_tlsClientMsg
              solve( !KU( tlsClientMsg(~sess.3, cert(~IdPKey.1),
                                       <'token_req', ~code, code_verifier>)
                     ) @ #vk.19 )
                case OIDCClientCodeRedirect_case_1
                solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                  case case_1
                  solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.29 )
                    case c_browserForward
                    solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~code ) @ #vk.45 )
                        case OIDCClientCodeRedirect_case_1
                        solve( !KU( browserForward(~sess.20, cert(~signalClient.1),
                                                   <'code', ~code, ~n.31>)
                               ) @ #vk.47 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_2
                        solve( !KU( browserForward(~sess.20, cert(~signalClient.1),
                                                   <'code', ~code, ~n.31>)
                               ) @ #vk.47 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_3
                        solve( !KU( browserForward(~sess.20, cert(~signalClient.1),
                                                   <'code', ~code, ~n.31>)
                               ) @ #vk.47 )
                          case LinkClick
                          by contradiction
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( ~IdPKey ) @ #vk.47 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                                   ) @ #vk.50 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_4
                        solve( !KU( browserForward(~sess.20, cert(~signalClient.1),
                                                   <'code', ~code, ~n.31>)
                               ) @ #vk.47 )
                          case LinkClick
                          by contradiction
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode_case_1
                        solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge>)
                               ) @ #vk.49 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      next
                        case OIDCIdPIssueCode_case_2
                        solve( !KU( ~signalClient ) @ #vk.47 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                    ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.50 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case OIDCTokenForward_case_1
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.27 < #x) ∧
                                 (#x < #vr.52) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_2
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.27 < #x) ∧
                                 (#x < #vr.52) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_3
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.27 < #x) ∧
                                 (#x < #vr.52) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_4
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.27 < #x) ∧
                                 (#x < #vr.52) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                    case TLSSetup
                    solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.29 )
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        by contradiction
                      qed
                    qed
                  qed
                qed
              next
                case OIDCClientCodeRedirect_case_2
                solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                  case case_1
                  solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.29 )
                    case c_browserForward
                    solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~code ) @ #vk.49 )
                        case OIDCClientCodeRedirect_case_1
                        solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.51 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_2
                        solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.51 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_3
                        solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.51 )
                          case LinkClick
                          by contradiction
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( ~IdPKey ) @ #vk.51 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.2, nonce.2, code_challenge.1
                                                     >)
                                   ) @ #vk.54 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_4
                        solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.51 )
                          case LinkClick
                          by contradiction
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode_case_1
                        solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                 <'oidc_req', hash.2, nonce.2, code_challenge.1>)
                               ) @ #vk.53 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      next
                        case OIDCIdPIssueCode_case_2
                        solve( !KU( ~signalClient ) @ #vk.51 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                    ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                   <'oidc_req', hash.2, nonce.2, code_challenge.1>)
                                 ) @ #vk.54 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case OIDCTokenForward_case_1
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.27 < #x) ∧
                                 (#x < #vr.43) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_2
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.27 < #x) ∧
                                 (#x < #vr.43) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_3
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.27 < #x) ∧
                                 (#x < #vr.43) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_4
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.27 < #x) ∧
                                 (#x < #vr.43) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                    case TLSSetup
                    solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.29 )
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        by contradiction
                      qed
                    qed
                  qed
                qed
              next
                case OIDCClientCodeRedirect_case_3
                solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                  case case_1
                  solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.29 )
                    case LinkClick
                    solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~code ) @ #vk.38 )
                        case OIDCClientCodeRedirect_case_1
                        solve( !KU( browserForward(~sess.18, cert(~signalClient),
                                                   <'code', ~code, ~n.24>)
                               ) @ #vk.40 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_2
                        solve( !KU( browserForward(~sess.18, cert(~signalClient),
                                                   <'code', ~code, ~n.24>)
                               ) @ #vk.40 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_3
                        solve( !KU( browserForward(~sess.18, cert(~signalClient),
                                                   <'code', ~code, ~n.24>)
                               ) @ #vk.40 )
                          case LinkClick
                          by contradiction
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( ~IdPKey ) @ #vk.40 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.2 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                                   ) @ #vk.43 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_4
                        solve( !KU( browserForward(~sess.18, cert(~signalClient),
                                                   <'code', ~code, ~n.24>)
                               ) @ #vk.40 )
                          case LinkClick
                          by contradiction
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.2 )
                      next
                        case OIDCIdPIssueCode_case_1
                        solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge>)
                               ) @ #vk.42 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      next
                        case OIDCIdPIssueCode_case_2
                        solve( !KU( ~IdPKey ) @ #vk.40 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.2 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.43 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case OIDCTokenForward_case_1
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.26 < #x) ∧
                                 (#x < #vr.44) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_2
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.26 < #x) ∧
                                 (#x < #vr.44) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_3
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.26 < #x) ∧
                                 (#x < #vr.44) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_4
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.26 < #x) ∧
                                 (#x < #vr.44) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      qed
                    qed
                  next
                    case OIDCIdPIssueCode
                    solve( St_OIDCIdP_Code( $A, $Username, ~code, hash, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( tlsServerMsg(~sessPost, ~IdPKey,
                                               <'token', 
                                                <$A, username, nonce, 
                                                 h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>, 
                                                sign(<$A, username, nonce, 
                                                      h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>,
                                                     x)
                                               >)
                             ) @ #vk.8 )
                        case OIDCIdPTokenIssue
                        solve( !KU( tlsClientMsg(~sess.11, cert(~IdPKey),
                                                 <'oidc_req', 
                                                  h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2), nonce, 
                                                  s256(code_verifier)>)
                               ) @ #vk.31 )
                          case OIDCAdversaryInit
                          solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                   <'token_req', ~code.1, code_verifier>)
                                 ) @ #vk.30 )
                            case c_tlsClientMsg
                            solve( !KU( ~code.1 ) @ #vk.46 )
                              case OIDCClientCodeRedirect_case_1
                              solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.17>)
                                     ) @ #vk.48 )
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientCodeRedirect_case_2
                              solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.17>)
                                     ) @ #vk.48 )
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.49 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                            ) @ #y.1 )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce, 
                                                            code_challenge>)
                                         ) @ #vk.57 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientCodeRedirect_case_3
                              solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.17>)
                                     ) @ #vk.48 )
                                case LinkClick
                                by contradiction
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.49 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                            ) @ #y.2 )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce, 
                                                            code_challenge>)
                                         ) @ #vk.59 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientCodeRedirect_case_4
                              solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.17>)
                                     ) @ #vk.48 )
                                case LinkClick
                                by contradiction
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.2, $IdP, ~code.1 ) @ #y.1 )
                            next
                              case OIDCIdPIssueCode_case_1
                              solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                                       <'oidc_req', hash.1, nonce.1, code_challenge
                                                       >)
                                     ) @ #vk.50 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            next
                              case OIDCIdPIssueCode_case_2
                              solve( !KU( ~signalClient ) @ #vk.48 )
                                case DomainCompromise
                                by contradiction
                              next
                                case OIDCClientLogin
                                by solve( GenBrowserSession( $Initiator.2, $IdP, ~signalClient
                                          ) @ #y.1 )
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                         <'oidc_req', hash.1, nonce.1, 
                                                          code_challenge>)
                                       ) @ #vk.51 )
                                  case c_tlsClientMsg
                                  by contradiction
                                qed
                              qed
                            next
                              case OIDCTokenForward_case_1
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.33 < #x) ∧
                                       (#x < #vr.38) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            next
                              case OIDCTokenForward_case_2
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.33 < #x) ∧
                                       (#x < #vr.38) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            next
                              case OIDCTokenForward_case_3
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.33 < #x) ∧
                                       (#x < #vr.38) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            next
                              case OIDCTokenForward_case_4
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.33 < #x) ∧
                                       (#x < #vr.38) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            qed
                          qed
                        next
                          case OIDCClientInit
                          solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                   <'token_req', ~code.1, ~n.6>)
                                 ) @ #vk.30 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case c_tlsClientMsg
                          solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                   <'token_req', ~code.1, code_verifier>)
                                 ) @ #vk.31 )
                            case OIDCClientCodeRedirect
                            solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey),
                                                     <'login', $Username, pw>)
                                   ) @ #vk.18 )
                              case OIDCClientLogin
                              by contradiction
                            next
                              case c_tlsClientMsg
                              solve( !KU( s256(~n.6) ) @ #vk.28 )
                                case OIDCClientInit_case_1
                                solve( !KU( ~IdPKey ) @ #vk.34 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                            ) @ #y.1 )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash, nonce, code_challenge
                                                           >)
                                         ) @ #vk.37 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case OIDCClientInit_case_2
                                solve( GenBrowserSession( $Initiator, $A, ~sess.2 ) @ #y )
                                  case LinkClick
                                  solve( !Domain( $A, ~domain ) ▶₂ #y )
                                    case TLSSetup
                                    solve( !KU( ~sess.2 ) @ #vk.24 )
                                      case LinkClick
                                      solve( !KU( ~IdPKey ) @ #vk.37 )
                                        case DomainCompromise
                                        by contradiction
                                      next
                                        case OIDCClientLogin
                                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                                  ) @ #y.1 )
                                      next
                                        case OIDCIdPIssueCode
                                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                                 <'oidc_req', hash, nonce.1, 
                                                                  code_challenge>)
                                               ) @ #vk.40 )
                                          case c_tlsClientMsg
                                          by contradiction
                                        qed
                                      qed
                                    next
                                      case OIDCClientLogin
                                      solve( !KU( ~IdPKey ) @ #vk.37 )
                                        case DomainCompromise
                                        by contradiction
                                      next
                                        case OIDCClientLogin
                                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                                  ) @ #y.1 )
                                      next
                                        case OIDCIdPIssueCode
                                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                                 <'oidc_req', hash, nonce.1, 
                                                                  code_challenge>)
                                               ) @ #vk.41 )
                                          case c_tlsClientMsg
                                          by contradiction
                                        qed
                                      qed
                                    next
                                      case OIDCIdPIssueCode
                                      solve( !KU( ~signalClient.1 ) @ #vk.38 )
                                        case DomainCompromise
                                        solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                                                 <'oidc_req', hash, nonce.1, 
                                                                  code_challenge>)
                                               ) @ #vk.39 )
                                          case c_tlsClientMsg
                                          by contradiction
                                        qed
                                      next
                                        case OIDCClientLogin
                                        by solve( GenBrowserSession( $Initiator.1, $IdP.1,
                                                                     ~signalClient.1
                                                  ) @ #y.1 )
                                      next
                                        case OIDCIdPIssueCode
                                        solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                                                 <'oidc_req', hash.1, nonce.2, 
                                                                  code_challenge.1>)
                                               ) @ #vk.43 )
                                          case c_tlsClientMsg
                                          by contradiction
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case OIDCAdversaryInit
                                  solve( !Domain( $A, ~IdPKey.1 ) ▶₀ #y )
                                    case TLSSetup
                                    solve( !KU( ~sess.2 ) @ #vk.24 )
                                      case OIDCAdversaryInit
                                      solve( !KU( ~IdPKey ) @ #vk.43 )
                                        case DomainCompromise
                                        by contradiction
                                      next
                                        case OIDCClientLogin
                                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                                  ) @ #y.1 )
                                      next
                                        case OIDCIdPIssueCode
                                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                                 <'oidc_req', hash.1, nonce.1, 
                                                                  code_challenge.1>)
                                               ) @ #vk.46 )
                                          case c_tlsClientMsg
                                          by contradiction
                                        qed
                                      qed
                                    next
                                      case OIDCClientLogin
                                      solve( !KU( ~IdPKey ) @ #vk.43 )
                                        case DomainCompromise
                                        by contradiction
                                      next
                                        case OIDCClientLogin
                                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                                  ) @ #y.1 )
                                      next
                                        case OIDCIdPIssueCode
                                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                                 <'oidc_req', hash.1, nonce.1, 
                                                                  code_challenge.1>)
                                               ) @ #vk.47 )
                                          case c_tlsClientMsg
                                          by contradiction
                                        qed
                                      qed
                                    next
                                      case OIDCIdPIssueCode
                                      solve( !KU( ~signalClient.1 ) @ #vk.44 )
                                        case DomainCompromise
                                        solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                                                 <'oidc_req', hash.1, nonce.1, 
                                                                  code_challenge.1>)
                                               ) @ #vk.45 )
                                          case OIDCAdversaryInit
                                          by contradiction
                                        next
                                          case c_tlsClientMsg
                                          by contradiction
                                        qed
                                      next
                                        case OIDCClientLogin
                                        by solve( GenBrowserSession( $Initiator.1, $IdP.1,
                                                                     ~signalClient.1
                                                  ) @ #y.1 )
                                      next
                                        case OIDCIdPIssueCode
                                        solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                                                 <'oidc_req', hash.2, nonce.2, 
                                                                  code_challenge.2>)
                                               ) @ #vk.49 )
                                          case c_tlsClientMsg
                                          by contradiction
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case OIDCClientInit
                                  solve( !Domain( $A, ~IdPKey.1 ) ▶₀ #y )
                                    case TLSSetup
                                    solve( !KU( ~sess.2 ) @ #vk.24 )
                                      case OIDCClientInit
                                      solve( !KU( ~IdPKey ) @ #vk.34 )
                                        case DomainCompromise
                                        by contradiction
                                      next
                                        case OIDCClientLogin
                                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                                  ) @ #y.1 )
                                      next
                                        case OIDCIdPIssueCode
                                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                                 <'oidc_req', hash, nonce, 
                                                                  code_challenge>)
                                               ) @ #vk.42 )
                                          case c_tlsClientMsg
                                          by contradiction
                                        qed
                                      qed
                                    next
                                      case OIDCClientLogin
                                      solve( !KU( ~IdPKey ) @ #vk.34 )
                                        case DomainCompromise
                                        by contradiction
                                      next
                                        case OIDCClientLogin
                                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                                  ) @ #y.1 )
                                      next
                                        case OIDCIdPIssueCode
                                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                                 <'oidc_req', hash, nonce, 
                                                                  code_challenge>)
                                               ) @ #vk.38 )
                                          case c_tlsClientMsg
                                          by contradiction
                                        qed
                                      qed
                                    next
                                      case OIDCIdPIssueCode
                                      solve( !KU( ~signalClient.1 ) @ #vk.35 )
                                        case DomainCompromise
                                        solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                                                 <'oidc_req', hash, nonce, 
                                                                  code_challenge>)
                                               ) @ #vk.36 )
                                          case OIDCClientInit
                                          by contradiction
                                        next
                                          case c_tlsClientMsg
                                          by contradiction
                                        qed
                                      next
                                        case OIDCClientLogin
                                        by solve( GenBrowserSession( $Initiator.1, $IdP.1,
                                                                     ~signalClient.1
                                                  ) @ #y.1 )
                                      next
                                        case OIDCIdPIssueCode
                                        solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                                                 <'oidc_req', hash.1, nonce.1, 
                                                                  code_challenge.1>)
                                               ) @ #vk.40 )
                                          case c_tlsClientMsg
                                          by contradiction
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case c_s256
                                by contradiction
                              qed
                            qed
                          next
                            case c_tlsClientMsg
                            solve( !KU( ~code.1 ) @ #vk.44 )
                              case OIDCClientCodeRedirect_case_1
                              solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.17>)
                                     ) @ #vk.46 )
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.47 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                            ) @ #y.1 )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce, 
                                                            code_challenge>)
                                         ) @ #vk.60 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientCodeRedirect_case_2
                              solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.17>)
                                     ) @ #vk.46 )
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.47 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                            ) @ #y.1 )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.2, nonce.1, 
                                                            code_challenge.1>)
                                         ) @ #vk.64 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientCodeRedirect_case_3
                              solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.17>)
                                     ) @ #vk.46 )
                                case LinkClick
                                by contradiction
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.47 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                            ) @ #y.2 )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce, 
                                                            code_challenge>)
                                         ) @ #vk.57 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientCodeRedirect_case_4
                              solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.17>)
                                     ) @ #vk.46 )
                                case LinkClick
                                by contradiction
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.47 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                            ) @ #y.1 )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce.1, 
                                                            code_challenge>)
                                         ) @ #vk.58 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~code.1 ) @ #y.1 )
                            next
                              case OIDCIdPIssueCode_case_1
                              solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                                       <'oidc_req', hash.1, nonce.1, code_challenge
                                                       >)
                                     ) @ #vk.48 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            next
                              case OIDCIdPIssueCode_case_2
                              solve( !KU( ~signalClient ) @ #vk.46 )
                                case DomainCompromise
                                by contradiction
                              next
                                case OIDCClientLogin
                                by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                          ) @ #y.1 )
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                         <'oidc_req', hash.1, nonce.1, 
                                                          code_challenge>)
                                       ) @ #vk.49 )
                                  case c_tlsClientMsg
                                  by contradiction
                                qed
                              qed
                            next
                              case OIDCTokenForward_case_1
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.33 < #x) ∧
                                       (#x < #vr.37) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            next
                              case OIDCTokenForward_case_2
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.33 < #x) ∧
                                       (#x < #vr.37) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            next
                              case OIDCTokenForward_case_3
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.33 < #x) ∧
                                       (#x < #vr.37) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            next
                              case OIDCTokenForward_case_4
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.33 < #x) ∧
                                       (#x < #vr.37) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            qed
                          qed
                        qed
                      next
                        case c_tlsServerMsg
                        solve( !KU( ~IdPKey ) @ #vk.30 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.44 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      qed
                    qed
                  next
                    case c_browserForward
                    solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~code ) @ #vk.42 )
                        case OIDCClientCodeRedirect_case_1
                        solve( !KU( browserForward(~sess.18, cert(~signalClient.1),
                                                   <'code', ~code, ~n.24>)
                               ) @ #vk.44 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_2
                        solve( !KU( browserForward(~sess.18, cert(~signalClient.1),
                                                   <'code', ~code, ~n.24>)
                               ) @ #vk.44 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_3
                        solve( !KU( browserForward(~sess.18, cert(~signalClient.1),
                                                   <'code', ~code, ~n.24>)
                               ) @ #vk.44 )
                          case LinkClick
                          by contradiction
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( ~IdPKey ) @ #vk.44 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.2 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                                   ) @ #vk.47 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_4
                        solve( !KU( browserForward(~sess.18, cert(~signalClient.1),
                                                   <'code', ~code, ~n.24>)
                               ) @ #vk.44 )
                          case LinkClick
                          by contradiction
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.2 )
                      next
                        case OIDCIdPIssueCode_case_1
                        solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge>)
                               ) @ #vk.46 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      next
                        case OIDCIdPIssueCode_case_2
                        solve( !KU( ~signalClient ) @ #vk.44 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                    ) @ #y.2 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.47 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case OIDCTokenForward_case_1
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.27 < #x) ∧
                                 (#x < #vr.45) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_2
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.27 < #x) ∧
                                 (#x < #vr.45) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_3
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.27 < #x) ∧
                                 (#x < #vr.45) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_4
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.27 < #x) ∧
                                 (#x < #vr.45) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                    case TLSSetup
                    solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.29 )
                      case LinkClick
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        by contradiction
                      qed
                    next
                      case OIDCIdPIssueCode
                      by contradiction
                    next
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        by contradiction
                      qed
                    qed
                  qed
                qed
              next
                case OIDCClientCodeRedirect_case_4
                solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                  case case_1
                  solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.29 )
                    case LinkClick
                    solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~code ) @ #vk.31 )
                        case OIDCClientCodeRedirect_case_1
                        solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.38 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_2
                        solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.38 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_3
                        solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.38 )
                          case LinkClick
                          by contradiction
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( ~IdPKey ) @ #vk.38 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                                   ) @ #vk.41 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_4
                        solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.38 )
                          case LinkClick
                          by contradiction
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode_case_1
                        solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge>)
                               ) @ #vk.40 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      next
                        case OIDCIdPIssueCode_case_2
                        solve( !KU( ~IdPKey ) @ #vk.38 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.41 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case OIDCTokenForward_case_1
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.26 < #x) ∧
                                 (#x < #vr.42) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_2
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.26 < #x) ∧
                                 (#x < #vr.42) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_3
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.26 < #x) ∧
                                 (#x < #vr.42) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_4
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.26 < #x) ∧
                                 (#x < #vr.42) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      qed
                    qed
                  next
                    case c_browserForward
                    solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~code ) @ #vk.43 )
                        case OIDCClientCodeRedirect_case_1
                        solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.45 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_2
                        solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.45 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_3
                        solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.45 )
                          case LinkClick
                          by contradiction
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( ~IdPKey ) @ #vk.45 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.2, code_challenge>)
                                   ) @ #vk.48 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_4
                        solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.45 )
                          case LinkClick
                          by contradiction
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode_case_1
                        solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.2, code_challenge>)
                               ) @ #vk.47 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      next
                        case OIDCIdPIssueCode_case_2
                        solve( !KU( ~signalClient ) @ #vk.45 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                    ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.2, code_challenge>)
                                 ) @ #vk.48 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case OIDCTokenForward_case_1
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.27 < #x) ∧
                                 (#x < #vr.43) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_2
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.27 < #x) ∧
                                 (#x < #vr.43) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_3
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.27 < #x) ∧
                                 (#x < #vr.43) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_4
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.27 < #x) ∧
                                 (#x < #vr.43) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                    case TLSSetup
                    solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.29 )
                      case LinkClick
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        by contradiction
                      qed
                    next
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        by contradiction
                      qed
                    qed
                  qed
                qed
              next
                case c_tlsClientMsg
                solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                        s256(code_verifier)
                       ) ▶₃ #x.1 )
                  case OIDCIdPIssueCode
                  solve( !KU( ~code ) @ #vk.33 )
                    case OIDCClientCodeRedirect_case_1
                    solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.35 )
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_2
                    solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.35 )
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_3
                    solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.35 )
                      case LinkClick
                      by contradiction
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.35 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge>)
                               ) @ #vk.38 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_4
                    solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.35 )
                      case LinkClick
                      by contradiction
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y.1 )
                  next
                    case OIDCIdPIssueCode_case_1
                    solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                             <'oidc_req', hash.1, nonce.1, code_challenge>)
                           ) @ #vk.37 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  next
                    case OIDCIdPIssueCode_case_2
                    solve( !KU( ~signalClient ) @ #vk.35 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                                ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.1, code_challenge>)
                             ) @ #vk.38 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_1
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.27 < #x) ∧
                             (#x < #vr.31) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_2
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.27 < #x) ∧
                             (#x < #vr.31) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_3
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.27 < #x) ∧
                             (#x < #vr.31) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_4
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.27 < #x) ∧
                             (#x < #vr.31) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case case_2
          by contradiction
        next
          case case_3
          by contradiction
        qed
      next
        case c_browserForward
        solve( !KU( tlsServerMsg(~sessPost, ~IdPKey,
                                 <'token', 
                                  <$A, username, nonce, h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>, 
                                  sign(<$A, username, nonce, h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)
                                       >,
                                       x)
                                 >)
               ) @ #vk.6 )
          case OIDCIdPTokenIssue
          solve( !KU( tlsClientMsg(~sess.10, cert(~IdPKey),
                                   <'oidc_req', h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2), nonce, 
                                    s256(code_verifier)>)
                 ) @ #vk.25 )
            case OIDCAdversaryInit
            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                     <'token_req', ~code.1, code_verifier>)
                   ) @ #vk.24 )
              case OIDCClientCodeRedirect
              solve( (∃ #x.
                       (UseCode( ~code ) @ #x)
                      ∧
                       (#vr.29 < #x) ∧
                       (#x < #vr.9) ∧
                       (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                     (∃ signalClient domain #x #y.
                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                case case_1
                solve( (∀ #z. (!KU( ~n.6 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
                  case case_1
                  solve( !KU( ~code ) @ #vk.23 )
                    case OIDCClientCodeRedirect_case_1
                    solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                               <'code', ~code, ~n.16>)
                           ) @ #vk.36 )
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_2
                    solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                               <'code', ~code, ~n.16>)
                           ) @ #vk.36 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.37 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce, code_challenge>)
                               ) @ #vk.45 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_3
                    solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                               <'code', ~code, ~n.16>)
                           ) @ #vk.36 )
                      case LinkClick
                      by contradiction
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.37 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.2 )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce, code_challenge>)
                               ) @ #vk.47 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_4
                    solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                               <'code', ~code, ~n.16>)
                           ) @ #vk.36 )
                      case LinkClick
                      by contradiction
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                  next
                    case OIDCIdPIssueCode_case_1
                    solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.1, code_challenge>)
                           ) @ #vk.38 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  next
                    case OIDCIdPIssueCode_case_2
                    solve( !KU( ~signalClient ) @ #vk.36 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.1, code_challenge>)
                             ) @ #vk.39 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_1
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.29 < #x) ∧
                             (#x < #vr.34) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_2
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.29 < #x) ∧
                             (#x < #vr.34) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_3
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.29 < #x) ∧
                             (#x < #vr.34) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_4
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.29 < #x) ∧
                             (#x < #vr.34) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  qed
                next
                  case case_2
                  by contradiction
                qed
              next
                case case_2
                by contradiction
              next
                case case_3
                by contradiction
              qed
            next
              case c_tlsClientMsg
              solve( !KU( ~code.1 ) @ #vk.41 )
                case OIDCClientCodeRedirect_case_1
                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                           <'code', ~code.1, ~n.16>)
                       ) @ #vk.43 )
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientCodeRedirect_case_2
                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                           <'code', ~code.1, ~n.16>)
                       ) @ #vk.43 )
                  case OIDCIdPIssueCode
                  solve( !KU( ~IdPKey ) @ #vk.44 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce, code_challenge>)
                           ) @ #vk.52 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientCodeRedirect_case_3
                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                           <'code', ~code.1, ~n.16>)
                       ) @ #vk.43 )
                  case LinkClick
                  by contradiction
                next
                  case OIDCIdPIssueCode
                  solve( !KU( ~IdPKey ) @ #vk.44 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.2 )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce, code_challenge>)
                           ) @ #vk.54 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientCodeRedirect_case_4
                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                           <'code', ~code.1, ~n.16>)
                       ) @ #vk.43 )
                  case LinkClick
                  by contradiction
                next
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.1, $IdP, ~code.1 ) @ #y.1 )
              next
                case OIDCIdPIssueCode_case_1
                solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                         <'oidc_req', hash, nonce.1, code_challenge>)
                       ) @ #vk.45 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              next
                case OIDCIdPIssueCode_case_2
                solve( !KU( ~signalClient ) @ #vk.43 )
                  case DomainCompromise
                  by contradiction
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                            ) @ #y.1 )
                next
                  case OIDCIdPIssueCode
                  solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce.1, code_challenge>)
                         ) @ #vk.46 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                qed
              next
                case OIDCTokenForward_case_1
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.29 < #x) ∧
                         (#x < #vr.34) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case OIDCTokenForward_case_2
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.29 < #x) ∧
                         (#x < #vr.34) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case OIDCTokenForward_case_3
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.29 < #x) ∧
                         (#x < #vr.34) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case OIDCTokenForward_case_4
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.29 < #x) ∧
                         (#x < #vr.34) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              qed
            qed
          next
            case OIDCClientInit
            solve( (∀ #z. (!KU( ~n.8 ) @ #z) ⇒ ⊥)  ∥
                   (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
              case case_1
              solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                       <'token_req', ~code.1, ~n.6>)
                     ) @ #vk.24 )
                case OIDCClientCodeRedirect
                solve( (∃ #x.
                         (UseCode( ~code ) @ #x)
                        ∧
                         (#vr.29 < #x) ∧
                         (#x < #vr.9) ∧
                         (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  solve( !KU( ~code ) @ #vk.23 )
                    case OIDCClientCodeRedirect_case_1
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.16>)
                           ) @ #vk.27 )
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_2
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.16>)
                           ) @ #vk.27 )
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_3
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.16>)
                           ) @ #vk.27 )
                      case LinkClick
                      by contradiction
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_4
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.16>)
                           ) @ #vk.27 )
                      case LinkClick
                      by contradiction
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y.1 )
                  next
                    case OIDCIdPIssueCode_case_1
                    solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce, code_challenge>)
                           ) @ #vk.29 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  next
                    case OIDCIdPIssueCode_case_2
                    solve( !KU( ~signalClient ) @ #vk.27 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                                ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.30 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_1
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.29 < #x) ∧
                             (#x < #vr.33) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_2
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.29 < #x) ∧
                             (#x < #vr.33) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_3
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.29 < #x) ∧
                             (#x < #vr.33) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_4
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.29 < #x) ∧
                             (#x < #vr.33) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  qed
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case c_tlsClientMsg
                by contradiction
              qed
            next
              case case_2
              by contradiction
            qed
          next
            case c_tlsClientMsg
            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                     <'token_req', ~code.1, code_verifier>)
                   ) @ #vk.24 )
              case OIDCClientCodeRedirect
              solve( (∃ #x.
                       (UseCode( ~code ) @ #x)
                      ∧
                       (#vr.29 < #x) ∧
                       (#x < #vr.9) ∧
                       (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                     (∃ signalClient domain #x #y.
                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                case case_1
                solve( (∀ #z. (!KU( ~n.6 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
                  case case_1
                  solve( !KU( ~code ) @ #vk.23 )
                    case OIDCClientCodeRedirect_case_1
                    solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                               <'code', ~code, ~n.16>)
                           ) @ #vk.36 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.37 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce, code_challenge>)
                               ) @ #vk.50 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_2
                    solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                               <'code', ~code, ~n.16>)
                           ) @ #vk.36 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.37 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                               ) @ #vk.54 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_3
                    solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                               <'code', ~code, ~n.16>)
                           ) @ #vk.36 )
                      case LinkClick
                      by contradiction
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.37 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.2 )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce, code_challenge>)
                               ) @ #vk.47 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_4
                    solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                               <'code', ~code, ~n.16>)
                           ) @ #vk.36 )
                      case LinkClick
                      by contradiction
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.37 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce.1, code_challenge>)
                               ) @ #vk.48 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y.1 )
                  next
                    case OIDCIdPIssueCode_case_1
                    solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.1, code_challenge>)
                           ) @ #vk.38 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  next
                    case OIDCIdPIssueCode_case_2
                    solve( !KU( ~signalClient ) @ #vk.36 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                                ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.1, code_challenge>)
                             ) @ #vk.39 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_1
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.29 < #x) ∧
                             (#x < #vr.33) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_2
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.29 < #x) ∧
                             (#x < #vr.33) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_3
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.29 < #x) ∧
                             (#x < #vr.33) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_4
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.29 < #x) ∧
                             (#x < #vr.33) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  qed
                next
                  case case_2
                  by contradiction
                qed
              next
                case case_2
                by contradiction
              next
                case case_3
                by contradiction
              qed
            next
              case c_tlsClientMsg
              solve( !KU( ~code.1 ) @ #vk.40 )
                case OIDCClientCodeRedirect_case_1
                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                           <'code', ~code.1, ~n.16>)
                       ) @ #vk.42 )
                  case OIDCIdPIssueCode
                  solve( !KU( ~IdPKey ) @ #vk.43 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce, code_challenge>)
                           ) @ #vk.56 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientCodeRedirect_case_2
                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                           <'code', ~code.1, ~n.16>)
                       ) @ #vk.42 )
                  case OIDCIdPIssueCode
                  solve( !KU( ~IdPKey ) @ #vk.43 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                           ) @ #vk.60 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientCodeRedirect_case_3
                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                           <'code', ~code.1, ~n.16>)
                       ) @ #vk.42 )
                  case LinkClick
                  by contradiction
                next
                  case OIDCIdPIssueCode
                  solve( !KU( ~IdPKey ) @ #vk.43 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.2 )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce, code_challenge>)
                           ) @ #vk.53 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientCodeRedirect_case_4
                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                           <'code', ~code.1, ~n.16>)
                       ) @ #vk.42 )
                  case LinkClick
                  by contradiction
                next
                  case OIDCIdPIssueCode
                  solve( !KU( ~IdPKey ) @ #vk.43 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.1, code_challenge>)
                           ) @ #vk.54 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator, $IdP, ~code.1 ) @ #y.1 )
              next
                case OIDCIdPIssueCode_case_1
                solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                         <'oidc_req', hash, nonce.1, code_challenge>)
                       ) @ #vk.44 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              next
                case OIDCIdPIssueCode_case_2
                solve( !KU( ~signalClient ) @ #vk.42 )
                  case DomainCompromise
                  by contradiction
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                            ) @ #y.1 )
                next
                  case OIDCIdPIssueCode
                  solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce.1, code_challenge>)
                         ) @ #vk.45 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                qed
              next
                case OIDCTokenForward_case_1
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.29 < #x) ∧
                         (#x < #vr.33) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case OIDCTokenForward_case_2
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.29 < #x) ∧
                         (#x < #vr.33) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case OIDCTokenForward_case_3
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.29 < #x) ∧
                         (#x < #vr.33) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case OIDCTokenForward_case_4
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.29 < #x) ∧
                         (#x < #vr.33) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              qed
            qed
          qed
        next
          case c_tlsServerMsg
          solve( !KU( ~IdPKey ) @ #vk.24 )
            case DomainCompromise
            by contradiction
          next
            case OIDCClientLogin
            by solve( GenBrowserSession( $Initiator, $IdP, ~IdPKey ) @ #y.1 )
          next
            case OIDCIdPIssueCode
            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                     <'oidc_req', hash, nonce.1, code_challenge>)
                   ) @ #vk.38 )
              case c_tlsClientMsg
              by contradiction
            qed
          qed
        qed
      qed
    next
      case OIDCTokenForward_case_4
      solve( !KU( browserForward(~sess.4, cert(~signalClient),
                                 <'code', code, ~n.6>)
             ) @ #vk.6 )
        case LinkClick
        solve( !KU( tlsServerMsg(~sessPost, ~IdPKey,
                                 <'token', 
                                  <$A, username, nonce, h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>, 
                                  sign(<$A, username, nonce, h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)
                                       >,
                                       x)
                                 >)
               ) @ #vk.6 )
          case OIDCIdPTokenIssue
          solve( !KU( tlsClientMsg(~sess.9, cert(~IdPKey),
                                   <'oidc_req', h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2), nonce, 
                                    s256(code_verifier)>)
                 ) @ #vk.19 )
            case OIDCAdversaryInit
            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                     <'token_req', ~code.1, code_verifier>)
                   ) @ #vk.18 )
              case OIDCClientCodeRedirect
              solve( (∃ #x.
                       (UseCode( ~code ) @ #x)
                      ∧
                       (#vr.26 < #x) ∧
                       (#x < #vr.9) ∧
                       (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                     (∃ signalClient domain #x #y.
                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                case case_1
                solve( (∀ #z. (!KU( ~n.6 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
                  case case_1
                  solve( !KU( ~code ) @ #vk.12 )
                    case OIDCClientCodeRedirect_case_1
                    solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.30 )
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_2
                    solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.30 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.31 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce, code_challenge>)
                               ) @ #vk.39 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_3
                    solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.30 )
                      case LinkClick
                      by contradiction
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.31 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce, code_challenge>)
                               ) @ #vk.41 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_4
                    solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.30 )
                      case LinkClick
                      by contradiction
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                  next
                    case OIDCIdPIssueCode_case_1
                    solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.1, code_challenge>)
                           ) @ #vk.32 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  next
                    case OIDCIdPIssueCode_case_2
                    solve( !KU( ~IdPKey ) @ #vk.30 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.1, code_challenge>)
                             ) @ #vk.33 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_1
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.26 < #x) ∧
                             (#x < #vr.31) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_2
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.26 < #x) ∧
                             (#x < #vr.31) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_3
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.26 < #x) ∧
                             (#x < #vr.31) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_4
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.26 < #x) ∧
                             (#x < #vr.31) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  qed
                next
                  case case_2
                  by contradiction
                qed
              next
                case case_2
                by contradiction
              next
                case case_3
                by contradiction
              qed
            next
              case c_tlsClientMsg
              solve( !KU( ~code.1 ) @ #vk.35 )
                case OIDCClientCodeRedirect_case_1
                solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                           <'code', ~code.1, ~n.15>)
                       ) @ #vk.37 )
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientCodeRedirect_case_2
                solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                           <'code', ~code.1, ~n.15>)
                       ) @ #vk.37 )
                  case OIDCIdPIssueCode
                  solve( !KU( ~IdPKey ) @ #vk.38 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce, code_challenge>)
                           ) @ #vk.46 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientCodeRedirect_case_3
                solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                           <'code', ~code.1, ~n.15>)
                       ) @ #vk.37 )
                  case LinkClick
                  by contradiction
                next
                  case OIDCIdPIssueCode
                  solve( !KU( ~IdPKey ) @ #vk.38 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce, code_challenge>)
                           ) @ #vk.48 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientCodeRedirect_case_4
                solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                           <'code', ~code.1, ~n.15>)
                       ) @ #vk.37 )
                  case LinkClick
                  by contradiction
                next
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.1, $IdP, ~code.1 ) @ #y )
              next
                case OIDCIdPIssueCode_case_1
                solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                         <'oidc_req', hash, nonce.1, code_challenge>)
                       ) @ #vk.39 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              next
                case OIDCIdPIssueCode_case_2
                solve( !KU( ~IdPKey ) @ #vk.37 )
                  case DomainCompromise
                  by contradiction
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                next
                  case OIDCIdPIssueCode
                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce.1, code_challenge>)
                         ) @ #vk.40 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                qed
              next
                case OIDCTokenForward_case_1
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.26 < #x) ∧
                         (#x < #vr.31) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case OIDCTokenForward_case_2
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.26 < #x) ∧
                         (#x < #vr.31) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case OIDCTokenForward_case_3
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.26 < #x) ∧
                         (#x < #vr.31) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case OIDCTokenForward_case_4
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.26 < #x) ∧
                         (#x < #vr.31) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              qed
            qed
          next
            case OIDCClientInit
            solve( (∀ #z. (!KU( ~n.8 ) @ #z) ⇒ ⊥)  ∥
                   (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
              case case_1
              solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                       <'token_req', ~code.1, ~n.6>)
                     ) @ #vk.18 )
                case OIDCClientCodeRedirect
                solve( (∃ #x.
                         (UseCode( ~code ) @ #x)
                        ∧
                         (#vr.26 < #x) ∧
                         (#x < #vr.9) ∧
                         (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  solve( !KU( ~code ) @ #vk.12 )
                    case OIDCClientCodeRedirect_case_1
                    solve( !KU( browserForward(~sess.10, cert(~signalClient),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.21 )
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_2
                    solve( !KU( browserForward(~sess.10, cert(~signalClient),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.21 )
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_3
                    solve( !KU( browserForward(~sess.10, cert(~signalClient),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.21 )
                      case LinkClick
                      by contradiction
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_4
                    solve( !KU( browserForward(~sess.10, cert(~signalClient),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.21 )
                      case LinkClick
                      by contradiction
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y )
                  next
                    case OIDCIdPIssueCode_case_1
                    solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce, code_challenge>)
                           ) @ #vk.23 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  next
                    case OIDCIdPIssueCode_case_2
                    solve( !KU( ~IdPKey ) @ #vk.21 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.24 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_1
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.26 < #x) ∧
                             (#x < #vr.30) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_2
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.26 < #x) ∧
                             (#x < #vr.30) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_3
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.26 < #x) ∧
                             (#x < #vr.30) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_4
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.26 < #x) ∧
                             (#x < #vr.30) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  qed
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case c_tlsClientMsg
                by contradiction
              qed
            next
              case case_2
              by contradiction
            qed
          next
            case c_tlsClientMsg
            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                     <'token_req', ~code.1, code_verifier>)
                   ) @ #vk.18 )
              case OIDCClientCodeRedirect
              solve( (∃ #x.
                       (UseCode( ~code ) @ #x)
                      ∧
                       (#vr.26 < #x) ∧
                       (#x < #vr.9) ∧
                       (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                     (∃ signalClient domain #x #y.
                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                case case_1
                solve( (∀ #z. (!KU( ~n.6 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
                  case case_1
                  solve( !KU( ~code ) @ #vk.12 )
                    case OIDCClientCodeRedirect_case_1
                    solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.30 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.31 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce, code_challenge>)
                               ) @ #vk.44 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_2
                    solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.30 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.31 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                               ) @ #vk.48 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_3
                    solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.30 )
                      case LinkClick
                      by contradiction
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.31 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce, code_challenge>)
                               ) @ #vk.41 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_4
                    solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.30 )
                      case LinkClick
                      by contradiction
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.31 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce.1, code_challenge>)
                               ) @ #vk.42 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y )
                  next
                    case OIDCIdPIssueCode_case_1
                    solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.1, code_challenge>)
                           ) @ #vk.32 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  next
                    case OIDCIdPIssueCode_case_2
                    solve( !KU( ~IdPKey ) @ #vk.30 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.1, code_challenge>)
                             ) @ #vk.33 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_1
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.26 < #x) ∧
                             (#x < #vr.30) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_2
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.26 < #x) ∧
                             (#x < #vr.30) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_3
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.26 < #x) ∧
                             (#x < #vr.30) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_4
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.26 < #x) ∧
                             (#x < #vr.30) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  qed
                next
                  case case_2
                  by contradiction
                qed
              next
                case case_2
                by contradiction
              next
                case case_3
                by contradiction
              qed
            next
              case c_tlsClientMsg
              solve( !KU( ~code.1 ) @ #vk.34 )
                case OIDCClientCodeRedirect_case_1
                solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                           <'code', ~code.1, ~n.15>)
                       ) @ #vk.36 )
                  case OIDCIdPIssueCode
                  solve( !KU( ~IdPKey ) @ #vk.37 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce, code_challenge>)
                           ) @ #vk.50 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientCodeRedirect_case_2
                solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                           <'code', ~code.1, ~n.15>)
                       ) @ #vk.36 )
                  case OIDCIdPIssueCode
                  solve( !KU( ~IdPKey ) @ #vk.37 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                           ) @ #vk.54 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientCodeRedirect_case_3
                solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                           <'code', ~code.1, ~n.15>)
                       ) @ #vk.36 )
                  case LinkClick
                  by contradiction
                next
                  case OIDCIdPIssueCode
                  solve( !KU( ~IdPKey ) @ #vk.37 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce, code_challenge>)
                           ) @ #vk.47 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientCodeRedirect_case_4
                solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                           <'code', ~code.1, ~n.15>)
                       ) @ #vk.36 )
                  case LinkClick
                  by contradiction
                next
                  case OIDCIdPIssueCode
                  solve( !KU( ~IdPKey ) @ #vk.37 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.1, code_challenge>)
                           ) @ #vk.48 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator, $IdP, ~code.1 ) @ #y )
              next
                case OIDCIdPIssueCode_case_1
                solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                         <'oidc_req', hash, nonce.1, code_challenge>)
                       ) @ #vk.38 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              next
                case OIDCIdPIssueCode_case_2
                solve( !KU( ~IdPKey ) @ #vk.36 )
                  case DomainCompromise
                  by contradiction
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator, $IdP, ~IdPKey ) @ #y )
                next
                  case OIDCIdPIssueCode
                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce.1, code_challenge>)
                         ) @ #vk.39 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                qed
              next
                case OIDCTokenForward_case_1
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.26 < #x) ∧
                         (#x < #vr.30) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case OIDCTokenForward_case_2
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.26 < #x) ∧
                         (#x < #vr.30) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case OIDCTokenForward_case_3
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.26 < #x) ∧
                         (#x < #vr.30) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case OIDCTokenForward_case_4
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.26 < #x) ∧
                         (#x < #vr.30) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              qed
            qed
          qed
        next
          case c_tlsServerMsg
          solve( !KU( ~IdPKey ) @ #vk.18 )
            case DomainCompromise
            by contradiction
          next
            case OIDCClientLogin
            by solve( GenBrowserSession( $Initiator, $IdP, ~IdPKey ) @ #y )
          next
            case OIDCIdPIssueCode
            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                     <'oidc_req', hash, nonce.1, code_challenge>)
                   ) @ #vk.32 )
              case c_tlsClientMsg
              by contradiction
            qed
          qed
        qed
      next
        case OIDCIdPIssueCode
        solve( (∃ #x.
                 (UseCode( ~code ) @ #x)
                ∧
                 (#vr.25 < #x) ∧
                 (#x < #vr.9) ∧
                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
               (∃ signalClient domain #x #y.
                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                 (CompromisedDomain( signalClient, domain ) @ #y)) )
          case case_1
          solve( !Domain( $IdP, ~IdPKey.1 ) ▶₁ #x.1 )
            case TLSSetup
            solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey),
                                     <'oidc_req', hash.1, ~n.4, code_challenge>)
                   ) @ #vk.18 )
              case c_tlsClientMsg
              solve( !KU( tlsClientMsg(~sess.3, cert(~IdPKey.1),
                                       <'token_req', ~code, code_verifier>)
                     ) @ #vk.20 )
                case OIDCClientCodeRedirect_case_1
                solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                  case case_1
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code, ~n.14>)
                         ) @ #vk.30 )
                    case c_browserForward
                    solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~code ) @ #vk.46 )
                        case OIDCClientCodeRedirect_case_1
                        solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                   <'code', ~code, ~n.30>)
                               ) @ #vk.48 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_2
                        solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                   <'code', ~code, ~n.30>)
                               ) @ #vk.48 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_3
                        solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                   <'code', ~code, ~n.30>)
                               ) @ #vk.48 )
                          case LinkClick
                          by contradiction
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_4
                        solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                   <'code', ~code, ~n.30>)
                               ) @ #vk.48 )
                          case LinkClick
                          by contradiction
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( ~IdPKey ) @ #vk.48 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.2, code_challenge>)
                                   ) @ #vk.51 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                      next
                        case OIDCIdPIssueCode_case_1
                        solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.2, code_challenge>)
                               ) @ #vk.50 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      next
                        case OIDCIdPIssueCode_case_2
                        solve( !KU( ~signalClient ) @ #vk.48 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                    ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.2, code_challenge>)
                                 ) @ #vk.51 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case OIDCTokenForward_case_1
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.50) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_2
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.50) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_3
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.50) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_4
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.50) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                    case TLSSetup
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.30 )
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        by contradiction
                      qed
                    qed
                  qed
                qed
              next
                case OIDCClientCodeRedirect_case_2
                solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                  case case_1
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code, ~n.14>)
                         ) @ #vk.30 )
                    case c_browserForward
                    solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~code ) @ #vk.50 )
                        case OIDCClientCodeRedirect_case_1
                        solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                   <'code', ~code, ~n.22>)
                               ) @ #vk.52 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_2
                        solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                   <'code', ~code, ~n.22>)
                               ) @ #vk.52 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_3
                        solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                   <'code', ~code, ~n.22>)
                               ) @ #vk.52 )
                          case LinkClick
                          by contradiction
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_4
                        solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                   <'code', ~code, ~n.22>)
                               ) @ #vk.52 )
                          case LinkClick
                          by contradiction
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( ~IdPKey ) @ #vk.52 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.2, nonce.3, code_challenge.1
                                                     >)
                                   ) @ #vk.55 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                      next
                        case OIDCIdPIssueCode_case_1
                        solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                 <'oidc_req', hash.2, nonce.3, code_challenge.1>)
                               ) @ #vk.54 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      next
                        case OIDCIdPIssueCode_case_2
                        solve( !KU( ~signalClient ) @ #vk.52 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                    ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                   <'oidc_req', hash.2, nonce.3, code_challenge.1>)
                                 ) @ #vk.55 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case OIDCTokenForward_case_1
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.41) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_2
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.41) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_3
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.41) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_4
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.41) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                    case TLSSetup
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.30 )
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        by contradiction
                      qed
                    qed
                  qed
                qed
              next
                case OIDCClientCodeRedirect_case_3
                solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                  case case_1
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code, ~n.14>)
                         ) @ #vk.30 )
                    case LinkClick
                    solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                            s256(~n.6)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~code ) @ #vk.39 )
                        case OIDCClientCodeRedirect_case_1
                        solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.41 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_2
                        solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.41 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_3
                        solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.41 )
                          case LinkClick
                          by contradiction
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_4
                        solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.41 )
                          case LinkClick
                          by contradiction
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( ~IdPKey ) @ #vk.41 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.2, code_challenge>)
                                   ) @ #vk.44 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode_case_1
                        solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.2, code_challenge>)
                               ) @ #vk.43 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      next
                        case OIDCIdPIssueCode_case_2
                        solve( !KU( ~IdPKey ) @ #vk.41 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.2, code_challenge>)
                                 ) @ #vk.44 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case OIDCTokenForward_case_1
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.24 < #x) ∧
                                 (#x < #vr.42) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_2
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.24 < #x) ∧
                                 (#x < #vr.42) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_3
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.24 < #x) ∧
                                 (#x < #vr.42) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_4
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.24 < #x) ∧
                                 (#x < #vr.42) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      qed
                    qed
                  next
                    case c_browserForward
                    solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~code ) @ #vk.43 )
                        case OIDCClientCodeRedirect_case_1
                        solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.45 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_2
                        solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.45 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_3
                        solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.45 )
                          case LinkClick
                          by contradiction
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_4
                        solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                   <'code', ~code, ~n.23>)
                               ) @ #vk.45 )
                          case LinkClick
                          by contradiction
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( ~IdPKey ) @ #vk.45 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.2, code_challenge>)
                                   ) @ #vk.48 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode_case_1
                        solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.2, code_challenge>)
                               ) @ #vk.47 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      next
                        case OIDCIdPIssueCode_case_2
                        solve( !KU( ~signalClient ) @ #vk.45 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                    ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.2, code_challenge>)
                                 ) @ #vk.48 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case OIDCTokenForward_case_1
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.43) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_2
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.43) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_3
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.43) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_4
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.43) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                    case TLSSetup
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.30 )
                      case LinkClick
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.6)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        by contradiction
                      qed
                    next
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        by contradiction
                      qed
                    qed
                  qed
                qed
              next
                case OIDCClientCodeRedirect_case_4
                solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                  case case_1
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code, ~n.14>)
                         ) @ #vk.30 )
                    case LinkClick
                    solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~code ) @ #vk.32 )
                        case OIDCClientCodeRedirect_case_1
                        solve( !KU( browserForward(~sess.16, cert(~signalClient),
                                                   <'code', ~code, ~n.22>)
                               ) @ #vk.39 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_2
                        solve( !KU( browserForward(~sess.16, cert(~signalClient),
                                                   <'code', ~code, ~n.22>)
                               ) @ #vk.39 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_3
                        solve( !KU( browserForward(~sess.16, cert(~signalClient),
                                                   <'code', ~code, ~n.22>)
                               ) @ #vk.39 )
                          case LinkClick
                          by contradiction
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_4
                        solve( !KU( browserForward(~sess.16, cert(~signalClient),
                                                   <'code', ~code, ~n.22>)
                               ) @ #vk.39 )
                          case LinkClick
                          by contradiction
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( ~IdPKey ) @ #vk.39 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.2, code_challenge>)
                                   ) @ #vk.42 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                      next
                        case OIDCIdPIssueCode_case_1
                        solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.2, code_challenge>)
                               ) @ #vk.41 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      next
                        case OIDCIdPIssueCode_case_2
                        solve( !KU( ~IdPKey ) @ #vk.39 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.2, code_challenge>)
                                 ) @ #vk.42 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case OIDCTokenForward_case_1
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.24 < #x) ∧
                                 (#x < #vr.40) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_2
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.24 < #x) ∧
                                 (#x < #vr.40) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_3
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.24 < #x) ∧
                                 (#x < #vr.40) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_4
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.24 < #x) ∧
                                 (#x < #vr.40) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      qed
                    qed
                  next
                    case OIDCIdPIssueCode
                    solve( St_OIDCIdP_Code( $A, $Username, ~code, hash, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( tlsServerMsg(~sessPost, ~IdPKey,
                                               <'token', 
                                                <$A, username, nonce, 
                                                 h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>, 
                                                sign(<$A, username, nonce, 
                                                      h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>,
                                                     x)
                                               >)
                             ) @ #vk.8 )
                        case OIDCIdPTokenIssue
                        solve( !KU( tlsClientMsg(~sess.10, cert(~IdPKey),
                                                 <'oidc_req', 
                                                  h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2), nonce, 
                                                  s256(code_verifier)>)
                               ) @ #vk.32 )
                          case OIDCAdversaryInit
                          solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                   <'token_req', ~code.2, code_verifier>)
                                 ) @ #vk.31 )
                            case c_tlsClientMsg
                            solve( !KU( ~code.2 ) @ #vk.47 )
                              case OIDCClientCodeRedirect_case_1
                              solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.16>)
                                     ) @ #vk.49 )
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientCodeRedirect_case_2
                              solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.16>)
                                     ) @ #vk.49 )
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.50 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce.1, 
                                                            code_challenge>)
                                         ) @ #vk.58 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientCodeRedirect_case_3
                              solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.16>)
                                     ) @ #vk.49 )
                                case LinkClick
                                by contradiction
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.50 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                            ) @ #y.1 )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce.1, 
                                                            code_challenge>)
                                         ) @ #vk.60 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientCodeRedirect_case_4
                              solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.16>)
                                     ) @ #vk.49 )
                                case LinkClick
                                by contradiction
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.2, $IdP, ~code.1 ) @ #y )
                            next
                              case OIDCIdPIssueCode_case_1
                              solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                                       <'oidc_req', hash.1, nonce.2, code_challenge
                                                       >)
                                     ) @ #vk.51 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            next
                              case OIDCIdPIssueCode_case_2
                              solve( !KU( ~signalClient ) @ #vk.49 )
                                case DomainCompromise
                                by contradiction
                              next
                                case OIDCClientLogin
                                by solve( GenBrowserSession( $Initiator.2, $IdP, ~signalClient
                                          ) @ #y )
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                         <'oidc_req', hash.1, nonce.2, 
                                                          code_challenge>)
                                       ) @ #vk.52 )
                                  case c_tlsClientMsg
                                  by contradiction
                                qed
                              qed
                            next
                              case OIDCTokenForward_case_1
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.31 < #x) ∧
                                       (#x < #vr.36) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            next
                              case OIDCTokenForward_case_2
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.31 < #x) ∧
                                       (#x < #vr.36) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            next
                              case OIDCTokenForward_case_3
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.31 < #x) ∧
                                       (#x < #vr.36) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            next
                              case OIDCTokenForward_case_4
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.31 < #x) ∧
                                       (#x < #vr.36) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            qed
                          qed
                        next
                          case OIDCClientInit
                          solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                   <'token_req', ~code.2, ~n.6>)
                                 ) @ #vk.31 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case c_tlsClientMsg
                          solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                   <'token_req', ~code.2, code_verifier>)
                                 ) @ #vk.32 )
                            case OIDCClientCodeRedirect
                            solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey),
                                                     <'login', $Username, pw>)
                                   ) @ #vk.19 )
                              case OIDCClientLogin
                              by contradiction
                            next
                              case c_tlsClientMsg
                              solve( !KU( s256(~n.6) ) @ #vk.29 )
                                case OIDCClientInit_case_1
                                solve( !KU( ~IdPKey ) @ #vk.35 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash, nonce.1, 
                                                            code_challenge>)
                                         ) @ #vk.38 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case OIDCClientInit_case_2
                                solve( !KU( ~sess.2 ) @ #vk.22 )
                                  case LinkClick
                                  solve( !KU( ~IdPKey ) @ #vk.35 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash, nonce.1, 
                                                              code_challenge>)
                                           ) @ #vk.38 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case OIDCClientLogin
                                  solve( !KU( ~IdPKey ) @ #vk.36 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash, nonce.1, 
                                                              code_challenge>)
                                           ) @ #vk.40 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~signalClient.1 ) @ #vk.36 )
                                    case DomainCompromise
                                    solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                                             <'oidc_req', hash, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.37 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.1, $IdP.1,
                                                                 ~signalClient.1
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                                             <'oidc_req', hash.1, nonce.2, 
                                                              code_challenge.1>)
                                           ) @ #vk.41 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                qed
                              next
                                case c_s256
                                by contradiction
                              qed
                            qed
                          next
                            case c_tlsClientMsg
                            solve( !KU( ~code.2 ) @ #vk.45 )
                              case OIDCClientCodeRedirect_case_1
                              solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.16>)
                                     ) @ #vk.47 )
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.48 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce.1, 
                                                            code_challenge>)
                                         ) @ #vk.61 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientCodeRedirect_case_2
                              solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.16>)
                                     ) @ #vk.47 )
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.48 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.2, nonce.2, 
                                                            code_challenge.1>)
                                         ) @ #vk.65 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientCodeRedirect_case_3
                              solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.16>)
                                     ) @ #vk.47 )
                                case LinkClick
                                by contradiction
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.48 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                            ) @ #y.1 )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce.1, 
                                                            code_challenge>)
                                         ) @ #vk.58 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientCodeRedirect_case_4
                              solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                         <'code', ~code.1, ~n.16>)
                                     ) @ #vk.47 )
                                case LinkClick
                                by contradiction
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( ~IdPKey ) @ #vk.48 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce.2, 
                                                            code_challenge>)
                                         ) @ #vk.59 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case c_browserForward
                                by contradiction
                              qed
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~code.1 ) @ #y )
                            next
                              case OIDCIdPIssueCode_case_1
                              solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                                       <'oidc_req', hash.1, nonce.2, code_challenge
                                                       >)
                                     ) @ #vk.49 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            next
                              case OIDCIdPIssueCode_case_2
                              solve( !KU( ~signalClient ) @ #vk.47 )
                                case DomainCompromise
                                by contradiction
                              next
                                case OIDCClientLogin
                                by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                          ) @ #y )
                              next
                                case OIDCIdPIssueCode
                                solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                         <'oidc_req', hash.1, nonce.2, 
                                                          code_challenge>)
                                       ) @ #vk.50 )
                                  case c_tlsClientMsg
                                  by contradiction
                                qed
                              qed
                            next
                              case OIDCTokenForward_case_1
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.31 < #x) ∧
                                       (#x < #vr.35) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            next
                              case OIDCTokenForward_case_2
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.31 < #x) ∧
                                       (#x < #vr.35) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            next
                              case OIDCTokenForward_case_3
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.31 < #x) ∧
                                       (#x < #vr.35) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            next
                              case OIDCTokenForward_case_4
                              solve( (∃ #x.
                                       (UseCode( ~code.1 ) @ #x)
                                      ∧
                                       (#vr.31 < #x) ∧
                                       (#x < #vr.35) ∧
                                       (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                     (∃ signalClient domain #x #y.
                                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                                case case_1
                                by contradiction
                              next
                                case case_2
                                by contradiction
                              next
                                case case_3
                                by contradiction
                              qed
                            qed
                          qed
                        qed
                      next
                        case c_tlsServerMsg
                        solve( !KU( ~IdPKey ) @ #vk.31 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.2, code_challenge>)
                                 ) @ #vk.45 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      qed
                    qed
                  next
                    case c_browserForward
                    solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                            s256(~n.5)
                           ) ▶₃ #x.1 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~code ) @ #vk.44 )
                        case OIDCClientCodeRedirect_case_1
                        solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                   <'code', ~code, ~n.22>)
                               ) @ #vk.46 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_2
                        solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                   <'code', ~code, ~n.22>)
                               ) @ #vk.46 )
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_3
                        solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                   <'code', ~code, ~n.22>)
                               ) @ #vk.46 )
                          case LinkClick
                          by contradiction
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientCodeRedirect_case_4
                        solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                   <'code', ~code, ~n.22>)
                               ) @ #vk.46 )
                          case LinkClick
                          by contradiction
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( ~IdPKey ) @ #vk.46 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.3, code_challenge>)
                                   ) @ #vk.49 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case c_browserForward
                          by contradiction
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                      next
                        case OIDCIdPIssueCode_case_1
                        solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.3, code_challenge>)
                               ) @ #vk.48 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      next
                        case OIDCIdPIssueCode_case_2
                        solve( !KU( ~signalClient ) @ #vk.46 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                    ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.3, code_challenge>)
                                 ) @ #vk.49 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case OIDCTokenForward_case_1
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.41) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_2
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.41) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_3
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.41) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      next
                        case OIDCTokenForward_case_4
                        solve( (∃ #x.
                                 (UseCode( ~code ) @ #x)
                                ∧
                                 (#vr.25 < #x) ∧
                                 (#x < #vr.41) ∧
                                 (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                               (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                               (∃ signalClient domain #x #y.
                                 (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                 (CompromisedDomain( signalClient, domain ) @ #y)) )
                          case case_1
                          by contradiction
                        next
                          case case_2
                          by contradiction
                        next
                          case case_3
                          by contradiction
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                    case TLSSetup
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.30 )
                      case LinkClick
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        by contradiction
                      qed
                    next
                      case OIDCIdPIssueCode
                      by contradiction
                    next
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        by contradiction
                      qed
                    qed
                  qed
                qed
              next
                case c_tlsClientMsg
                solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                        s256(code_verifier)
                       ) ▶₃ #x.1 )
                  case OIDCIdPIssueCode
                  solve( !KU( ~code ) @ #vk.34 )
                    case OIDCClientCodeRedirect_case_1
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.36 )
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_2
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.36 )
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_3
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.36 )
                      case LinkClick
                      by contradiction
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_4
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.36 )
                      case LinkClick
                      by contradiction
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.36 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.2, code_challenge>)
                               ) @ #vk.39 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y )
                  next
                    case OIDCIdPIssueCode_case_1
                    solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                             <'oidc_req', hash.1, nonce.2, code_challenge>)
                           ) @ #vk.38 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  next
                    case OIDCIdPIssueCode_case_2
                    solve( !KU( ~signalClient ) @ #vk.36 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                                ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.2, code_challenge>)
                             ) @ #vk.39 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_1
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.25 < #x) ∧
                             (#x < #vr.29) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_2
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.25 < #x) ∧
                             (#x < #vr.29) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_3
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.25 < #x) ∧
                             (#x < #vr.29) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_4
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.25 < #x) ∧
                             (#x < #vr.29) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case case_2
          by contradiction
        next
          case case_3
          by contradiction
        qed
      next
        case c_browserForward
        solve( !KU( tlsServerMsg(~sessPost, ~IdPKey,
                                 <'token', 
                                  <$A, username, nonce, h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>, 
                                  sign(<$A, username, nonce, h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)
                                       >,
                                       x)
                                 >)
               ) @ #vk.6 )
          case OIDCIdPTokenIssue
          solve( !KU( tlsClientMsg(~sess.9, cert(~IdPKey),
                                   <'oidc_req', h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2), nonce, 
                                    s256(code_verifier)>)
                 ) @ #vk.26 )
            case OIDCAdversaryInit
            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                     <'token_req', ~code.2, code_verifier>)
                   ) @ #vk.25 )
              case OIDCClientCodeRedirect
              solve( (∃ #x.
                       (UseCode( ~code ) @ #x)
                      ∧
                       (#vr.27 < #x) ∧
                       (#x < #vr.9) ∧
                       (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                     (∃ signalClient domain #x #y.
                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                case case_1
                solve( (∀ #z. (!KU( ~n.6 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
                  case case_1
                  solve( !KU( ~code ) @ #vk.24 )
                    case OIDCClientCodeRedirect_case_1
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.37 )
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_2
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.37 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.38 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce.1, code_challenge>)
                               ) @ #vk.46 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_3
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.37 )
                      case LinkClick
                      by contradiction
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.38 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce.1, code_challenge>)
                               ) @ #vk.48 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_4
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.37 )
                      case LinkClick
                      by contradiction
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                  next
                    case OIDCIdPIssueCode_case_1
                    solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.2, code_challenge>)
                           ) @ #vk.39 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  next
                    case OIDCIdPIssueCode_case_2
                    solve( !KU( ~signalClient ) @ #vk.37 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.2, code_challenge>)
                             ) @ #vk.40 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_1
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.27 < #x) ∧
                             (#x < #vr.32) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_2
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.27 < #x) ∧
                             (#x < #vr.32) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_3
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.27 < #x) ∧
                             (#x < #vr.32) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_4
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.27 < #x) ∧
                             (#x < #vr.32) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  qed
                next
                  case case_2
                  by contradiction
                qed
              next
                case case_2
                by contradiction
              next
                case case_3
                by contradiction
              qed
            next
              case c_tlsClientMsg
              solve( !KU( ~code.2 ) @ #vk.42 )
                case OIDCClientCodeRedirect_case_1
                solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                           <'code', ~code.1, ~n.15>)
                       ) @ #vk.44 )
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientCodeRedirect_case_2
                solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                           <'code', ~code.1, ~n.15>)
                       ) @ #vk.44 )
                  case OIDCIdPIssueCode
                  solve( !KU( ~IdPKey ) @ #vk.45 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.1, code_challenge>)
                           ) @ #vk.53 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientCodeRedirect_case_3
                solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                           <'code', ~code.1, ~n.15>)
                       ) @ #vk.44 )
                  case LinkClick
                  by contradiction
                next
                  case OIDCIdPIssueCode
                  solve( !KU( ~IdPKey ) @ #vk.45 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.1, code_challenge>)
                           ) @ #vk.55 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientCodeRedirect_case_4
                solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                           <'code', ~code.1, ~n.15>)
                       ) @ #vk.44 )
                  case LinkClick
                  by contradiction
                next
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.1, $IdP, ~code.1 ) @ #y )
              next
                case OIDCIdPIssueCode_case_1
                solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                         <'oidc_req', hash, nonce.2, code_challenge>)
                       ) @ #vk.46 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              next
                case OIDCIdPIssueCode_case_2
                solve( !KU( ~signalClient ) @ #vk.44 )
                  case DomainCompromise
                  by contradiction
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                            ) @ #y )
                next
                  case OIDCIdPIssueCode
                  solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce.2, code_challenge>)
                         ) @ #vk.47 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                qed
              next
                case OIDCTokenForward_case_1
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.27 < #x) ∧
                         (#x < #vr.32) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case OIDCTokenForward_case_2
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.27 < #x) ∧
                         (#x < #vr.32) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case OIDCTokenForward_case_3
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.27 < #x) ∧
                         (#x < #vr.32) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case OIDCTokenForward_case_4
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.27 < #x) ∧
                         (#x < #vr.32) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              qed
            qed
          next
            case OIDCClientInit
            solve( (∀ #z. (!KU( ~n.8 ) @ #z) ⇒ ⊥)  ∥
                   (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
              case case_1
              solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                       <'token_req', ~code.2, ~n.6>)
                     ) @ #vk.25 )
                case OIDCClientCodeRedirect
                solve( (∃ #x.
                         (UseCode( ~code ) @ #x)
                        ∧
                         (#vr.27 < #x) ∧
                         (#x < #vr.9) ∧
                         (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  solve( !KU( ~code ) @ #vk.24 )
                    case OIDCClientCodeRedirect_case_1
                    solve( !KU( browserForward(~sess.10, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.28 )
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_2
                    solve( !KU( browserForward(~sess.10, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.28 )
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_3
                    solve( !KU( browserForward(~sess.10, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.28 )
                      case LinkClick
                      by contradiction
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_4
                    solve( !KU( browserForward(~sess.10, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.28 )
                      case LinkClick
                      by contradiction
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y )
                  next
                    case OIDCIdPIssueCode_case_1
                    solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.1, code_challenge>)
                           ) @ #vk.30 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  next
                    case OIDCIdPIssueCode_case_2
                    solve( !KU( ~signalClient ) @ #vk.28 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                                ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.1, code_challenge>)
                             ) @ #vk.31 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_1
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.27 < #x) ∧
                             (#x < #vr.31) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_2
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.27 < #x) ∧
                             (#x < #vr.31) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_3
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.27 < #x) ∧
                             (#x < #vr.31) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_4
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.27 < #x) ∧
                             (#x < #vr.31) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  qed
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case c_tlsClientMsg
                by contradiction
              qed
            next
              case case_2
              by contradiction
            qed
          next
            case c_tlsClientMsg
            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                     <'token_req', ~code.2, code_verifier>)
                   ) @ #vk.25 )
              case OIDCClientCodeRedirect
              solve( (∃ #x.
                       (UseCode( ~code ) @ #x)
                      ∧
                       (#vr.27 < #x) ∧
                       (#x < #vr.9) ∧
                       (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                     (∃ signalClient domain #x #y.
                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                case case_1
                solve( (∀ #z. (!KU( ~n.6 ) @ #z) ⇒ ⊥)  ∥
                       (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
                  case case_1
                  solve( !KU( ~code ) @ #vk.24 )
                    case OIDCClientCodeRedirect_case_1
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.37 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.38 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce.1, code_challenge>)
                               ) @ #vk.51 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_2
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.37 )
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.38 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                               ) @ #vk.55 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_3
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.37 )
                      case LinkClick
                      by contradiction
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.38 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce.1, code_challenge>)
                               ) @ #vk.48 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientCodeRedirect_case_4
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.37 )
                      case LinkClick
                      by contradiction
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( ~IdPKey ) @ #vk.38 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce.2, code_challenge>)
                               ) @ #vk.49 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      by contradiction
                    qed
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y )
                  next
                    case OIDCIdPIssueCode_case_1
                    solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.2, code_challenge>)
                           ) @ #vk.39 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  next
                    case OIDCIdPIssueCode_case_2
                    solve( !KU( ~signalClient ) @ #vk.37 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                                ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.2, code_challenge>)
                             ) @ #vk.40 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_1
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.27 < #x) ∧
                             (#x < #vr.31) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_2
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.27 < #x) ∧
                             (#x < #vr.31) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_3
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.27 < #x) ∧
                             (#x < #vr.31) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  next
                    case OIDCTokenForward_case_4
                    solve( (∃ #x.
                             (UseCode( ~code ) @ #x)
                            ∧
                             (#vr.27 < #x) ∧
                             (#x < #vr.31) ∧
                             (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                           (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                           (∃ signalClient domain #x #y.
                             (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                             (CompromisedDomain( signalClient, domain ) @ #y)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    next
                      case case_3
                      by contradiction
                    qed
                  qed
                next
                  case case_2
                  by contradiction
                qed
              next
                case case_2
                by contradiction
              next
                case case_3
                by contradiction
              qed
            next
              case c_tlsClientMsg
              solve( !KU( ~code.2 ) @ #vk.41 )
                case OIDCClientCodeRedirect_case_1
                solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                           <'code', ~code.1, ~n.15>)
                       ) @ #vk.43 )
                  case OIDCIdPIssueCode
                  solve( !KU( ~IdPKey ) @ #vk.44 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.1, code_challenge>)
                           ) @ #vk.57 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientCodeRedirect_case_2
                solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                           <'code', ~code.1, ~n.15>)
                       ) @ #vk.43 )
                  case OIDCIdPIssueCode
                  solve( !KU( ~IdPKey ) @ #vk.44 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                           ) @ #vk.61 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientCodeRedirect_case_3
                solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                           <'code', ~code.1, ~n.15>)
                       ) @ #vk.43 )
                  case LinkClick
                  by contradiction
                next
                  case OIDCIdPIssueCode
                  solve( !KU( ~IdPKey ) @ #vk.44 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.1, code_challenge>)
                           ) @ #vk.54 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientCodeRedirect_case_4
                solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                           <'code', ~code.1, ~n.15>)
                       ) @ #vk.43 )
                  case LinkClick
                  by contradiction
                next
                  case OIDCIdPIssueCode
                  solve( !KU( ~IdPKey ) @ #vk.44 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.2, code_challenge>)
                           ) @ #vk.55 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case c_browserForward
                  by contradiction
                qed
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator, $IdP, ~code.1 ) @ #y )
              next
                case OIDCIdPIssueCode_case_1
                solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                         <'oidc_req', hash, nonce.2, code_challenge>)
                       ) @ #vk.45 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              next
                case OIDCIdPIssueCode_case_2
                solve( !KU( ~signalClient ) @ #vk.43 )
                  case DomainCompromise
                  by contradiction
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                            ) @ #y )
                next
                  case OIDCIdPIssueCode
                  solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce.2, code_challenge>)
                         ) @ #vk.46 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                qed
              next
                case OIDCTokenForward_case_1
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.27 < #x) ∧
                         (#x < #vr.31) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case OIDCTokenForward_case_2
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.27 < #x) ∧
                         (#x < #vr.31) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case OIDCTokenForward_case_3
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.27 < #x) ∧
                         (#x < #vr.31) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case OIDCTokenForward_case_4
                solve( (∃ #x.
                         (UseCode( ~code.1 ) @ #x)
                        ∧
                         (#vr.27 < #x) ∧
                         (#x < #vr.31) ∧
                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  by contradiction
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              qed
            qed
          qed
        next
          case c_tlsServerMsg
          solve( !KU( ~IdPKey ) @ #vk.25 )
            case DomainCompromise
            by contradiction
          next
            case OIDCClientLogin
            by solve( GenBrowserSession( $Initiator, $IdP, ~IdPKey ) @ #y )
          next
            case OIDCIdPIssueCode
            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                     <'oidc_req', hash, nonce.2, code_challenge>)
                   ) @ #vk.39 )
              case c_tlsClientMsg
              by contradiction
            qed
          qed
        qed
      qed
    next
      case c_signalMsg
      solve( !KU( sign(<$A, username, nonce, 
                        h(<trim(pk(~n)), trim(pk(~n.1))>, salt)>,
                       x)
             ) @ #vk.17 )
        case OIDCIdPTokenIssue
        solve( !KU( tlsClientMsg(~sess.4, cert(~IdPKey),
                                 <'oidc_req', h(<trim(pk(~n)), trim(pk(~n.1))>, salt), nonce, 
                                  s256(code_verifier)>)
               ) @ #vk.22 )
          case OIDCAdversaryInit
          solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey),
                                   <'token_req', ~code, code_verifier>)
                 ) @ #vk.23 )
            case OIDCClientCodeRedirect_case_1
            solve( (∀ #z. (!KU( ~n.3 ) @ #z) ⇒ ⊥)  ∥
                   (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
              case case_1
              solve( !KU( browserForward(~sess.6, cert(~signalClient),
                                         <'code', ~code, ~n.7>)
                     ) @ #vk.30 )
                case c_browserForward
                solve( !KU( ~code ) @ #vk.46 )
                  case OIDCClientCodeRedirect_case_1
                  solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                             <'code', ~code, ~n.23>)
                         ) @ #vk.48 )
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                             <'code', ~code, ~n.23>)
                         ) @ #vk.48 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.49 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.57 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                             <'code', ~code, ~n.23>)
                         ) @ #vk.48 )
                    case LinkClick
                    by contradiction
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.49 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.59 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                             <'code', ~code, ~n.23>)
                         ) @ #vk.48 )
                    case LinkClick
                    by contradiction
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~code ) @ #y )
                next
                  case OIDCIdPIssueCode_case_1
                  solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce.1, code_challenge>)
                         ) @ #vk.50 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                next
                  case OIDCIdPIssueCode_case_2
                  solve( !KU( ~signalClient ) @ #vk.48 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~signalClient
                              ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.1, code_challenge>)
                           ) @ #vk.51 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case OIDCTokenForward_case_1
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.42) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_2
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.42) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_3
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.42) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_4
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.42) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                qed
              qed
            next
              case case_2
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_2
            solve( (∀ #z. (!KU( ~n.3 ) @ #z) ⇒ ⊥)  ∥
                   (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
              case case_1
              solve( !KU( browserForward(~sess.6, cert(~signalClient),
                                         <'code', ~code, ~n.7>)
                     ) @ #vk.31 )
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~sess.3, cert(~IdPKey),
                                         <'login', $Username, pw>)
                       ) @ #vk.27 )
                  case OIDCClientLogin
                  solve( !KU( s256(~n.4) ) @ #vk.30 )
                    case OIDCClientInit_case_1
                    solve( !KU( ~IdPKey ) @ #vk.38 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.41 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case OIDCClientInit_case_2
                    solve( GenBrowserSession( $Initiator, $A, ~sess.3 ) @ #vr.20 )
                      case OIDCAdversaryInit
                      solve( !KU( ~sess.2 ) @ #vk.28 )
                        case OIDCClientCodeRedirect
                        solve( !KU( ~IdPKey ) @ #vk.38 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash, nonce, code_challenge>)
                                 ) @ #vk.41 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case OIDCClientLogin
                        solve( !KU( ~IdPKey.1 ) @ #vk.39 )
                          case DomainCompromise
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~sess.2 ) @ #y )
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.2, $IdP.1, ~IdPKey.1
                                    ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey.1, cert(~IdPKey.2),
                                                   <'oidc_req', hash, nonce, code_challenge>)
                                 ) @ #vk.43 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( ~signalClient.1 ) @ #vk.39 )
                          case DomainCompromise
                          solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                                   <'oidc_req', hash, nonce, code_challenge>)
                                 ) @ #vk.40 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~signalClient.1
                                    ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                                 ) @ #vk.44 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      qed
                    qed
                  next
                    case c_s256
                    by contradiction
                  qed
                next
                  case c_tlsClientMsg
                  solve( !KU( s256(~n.4) ) @ #vk.31 )
                    case OIDCClientInit_case_1
                    solve( !KU( ~IdPKey ) @ #vk.42 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.45 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case OIDCClientInit_case_2
                    solve( !KU( ~sess.2 ) @ #vk.30 )
                      case OIDCClientCodeRedirect
                      solve( !KU( ~IdPKey ) @ #vk.42 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce, code_challenge>)
                               ) @ #vk.45 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case OIDCClientLogin
                      solve( !KU( ~IdPKey.1 ) @ #vk.43 )
                        case DomainCompromise
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~sess.2 ) @ #y )
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.2, $IdP.1, ~IdPKey.1
                                  ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey.1, cert(~IdPKey.2),
                                                 <'oidc_req', hash, nonce, code_challenge>)
                               ) @ #vk.47 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( ~signalClient.1 ) @ #vk.43 )
                        case DomainCompromise
                        solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce, code_challenge>)
                               ) @ #vk.44 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~signalClient.1
                                  ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                               ) @ #vk.48 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    qed
                  next
                    case c_s256
                    by contradiction
                  qed
                qed
              next
                case c_browserForward
                solve( !KU( ~code ) @ #vk.49 )
                  case OIDCClientCodeRedirect_case_1
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.51 )
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.51 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.52 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                             ) @ #vk.60 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.51 )
                    case LinkClick
                    by contradiction
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.52 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                             ) @ #vk.62 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.51 )
                    case LinkClick
                    by contradiction
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~code ) @ #y )
                next
                  case OIDCIdPIssueCode_case_1
                  solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                           <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                         ) @ #vk.53 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                next
                  case OIDCIdPIssueCode_case_2
                  solve( !KU( ~signalClient ) @ #vk.51 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~signalClient
                              ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                             <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                           ) @ #vk.54 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case OIDCTokenForward_case_1
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.33) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_2
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.33) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_3
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.33) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_4
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.33) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                qed
              qed
            next
              case case_2
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_3
            solve( (∀ #z. (!KU( ~n.3 ) @ #z) ⇒ ⊥)  ∥
                   (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
              case case_1
              solve( !KU( browserForward(~sess.6, cert(~signalClient),
                                         <'code', ~code, ~n.7>)
                     ) @ #vk.30 )
                case LinkClick
                solve( !KU( ~code ) @ #vk.39 )
                  case OIDCClientCodeRedirect_case_1
                  solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                             <'code', ~code, ~n.16>)
                         ) @ #vk.41 )
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                             <'code', ~code, ~n.16>)
                         ) @ #vk.41 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.42 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.50 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                             <'code', ~code, ~n.16>)
                         ) @ #vk.41 )
                    case LinkClick
                    by contradiction
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.42 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y.2 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.52 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                             <'code', ~code, ~n.16>)
                         ) @ #vk.41 )
                    case LinkClick
                    by contradiction
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~code ) @ #y.1 )
                next
                  case OIDCIdPIssueCode_case_1
                  solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce.1, code_challenge>)
                         ) @ #vk.43 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                next
                  case OIDCIdPIssueCode_case_2
                  solve( !KU( ~IdPKey ) @ #vk.41 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y.1 )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.1, code_challenge>)
                           ) @ #vk.44 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case OIDCTokenForward_case_1
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.34) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_2
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.34) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_3
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.34) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_4
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.34) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                qed
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~sess.3, cert(~IdPKey),
                                         <'login', $Username, pw>)
                       ) @ #vk.27 )
                  case OIDCClientLogin
                  solve( !KU( s256(~n.4) ) @ #vk.30 )
                    case OIDCClientInit_case_1
                    solve( !KU( ~IdPKey ) @ #vk.39 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.42 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case OIDCClientInit_case_2
                    solve( GenBrowserSession( $Initiator, $A, ~sess.3 ) @ #y )
                      case OIDCAdversaryInit
                      solve( !KU( ~sess.2 ) @ #vk.28 )
                        case OIDCClientCodeRedirect
                        solve( !KU( ~IdPKey ) @ #vk.39 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash, nonce, code_challenge>)
                                 ) @ #vk.42 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case OIDCClientLogin
                        solve( !KU( ~IdPKey.1 ) @ #vk.40 )
                          case DomainCompromise
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~sess.2 ) @ #y.1 )
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.2, $IdP.1, ~IdPKey.1
                                    ) @ #y.2 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey.1, cert(~IdPKey.2),
                                                   <'oidc_req', hash, nonce, code_challenge>)
                                 ) @ #vk.44 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( ~signalClient.1 ) @ #vk.40 )
                          case DomainCompromise
                          solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                                   <'oidc_req', hash, nonce, code_challenge>)
                                 ) @ #vk.41 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~signalClient.1
                                    ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                                 ) @ #vk.45 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      qed
                    qed
                  next
                    case c_s256
                    by contradiction
                  qed
                next
                  case c_tlsClientMsg
                  solve( !KU( s256(~n.4) ) @ #vk.31 )
                    case OIDCClientInit_case_1
                    solve( !KU( ~IdPKey ) @ #vk.44 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.47 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case OIDCClientInit_case_2
                    solve( GenBrowserSession( $Initiator, $A, ~sess.3 ) @ #y )
                      case OIDCAdversaryInit
                      solve( !KU( ~sess.2 ) @ #vk.30 )
                        case OIDCClientCodeRedirect
                        solve( !KU( ~IdPKey ) @ #vk.44 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash, nonce, code_challenge>)
                                 ) @ #vk.47 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case OIDCClientLogin
                        solve( !KU( ~IdPKey.1 ) @ #vk.45 )
                          case DomainCompromise
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~sess.2 ) @ #y.1 )
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.2, $IdP.1, ~IdPKey.1
                                    ) @ #y.2 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey.1, cert(~IdPKey.2),
                                                   <'oidc_req', hash, nonce, code_challenge>)
                                 ) @ #vk.49 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( ~signalClient.1 ) @ #vk.45 )
                          case DomainCompromise
                          solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                                   <'oidc_req', hash, nonce, code_challenge>)
                                 ) @ #vk.46 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~signalClient.1
                                    ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                                 ) @ #vk.50 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      qed
                    qed
                  next
                    case c_s256
                    by contradiction
                  qed
                qed
              next
                case c_browserForward
                solve( !KU( ~code ) @ #vk.43 )
                  case OIDCClientCodeRedirect_case_1
                  solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                             <'code', ~code, ~n.16>)
                         ) @ #vk.45 )
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                             <'code', ~code, ~n.16>)
                         ) @ #vk.45 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.46 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.54 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                             <'code', ~code, ~n.16>)
                         ) @ #vk.45 )
                    case LinkClick
                    by contradiction
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.46 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y.2 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.56 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                             <'code', ~code, ~n.16>)
                         ) @ #vk.45 )
                    case LinkClick
                    by contradiction
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~code ) @ #y.1 )
                next
                  case OIDCIdPIssueCode_case_1
                  solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce.1, code_challenge>)
                         ) @ #vk.47 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                next
                  case OIDCIdPIssueCode_case_2
                  solve( !KU( ~signalClient ) @ #vk.45 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~signalClient
                              ) @ #y.1 )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.1, code_challenge>)
                           ) @ #vk.48 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case OIDCTokenForward_case_1
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.35) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_2
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.35) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_3
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.35) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_4
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.35) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                qed
              qed
            next
              case case_2
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_4
            solve( (∀ #z. (!KU( ~n.3 ) @ #z) ⇒ ⊥)  ∥
                   (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
              case case_1
              solve( !KU( browserForward(~sess.6, cert(~signalClient),
                                         <'code', ~code, ~n.7>)
                     ) @ #vk.30 )
                case LinkClick
                solve( !KU( ~code ) @ #vk.32 )
                  case OIDCClientCodeRedirect_case_1
                  solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.39 )
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.39 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.40 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.48 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.39 )
                    case LinkClick
                    by contradiction
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.40 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.50 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.39 )
                    case LinkClick
                    by contradiction
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~code ) @ #y )
                next
                  case OIDCIdPIssueCode_case_1
                  solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce.1, code_challenge>)
                         ) @ #vk.41 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                next
                  case OIDCIdPIssueCode_case_2
                  solve( !KU( ~IdPKey ) @ #vk.39 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.1, code_challenge>)
                           ) @ #vk.42 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case OIDCTokenForward_case_1
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.32) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_2
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.32) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_3
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.32) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_4
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.32) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                qed
              next
                case c_browserForward
                solve( !KU( ~code ) @ #vk.44 )
                  case OIDCClientCodeRedirect_case_1
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.46 )
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.46 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.47 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.1, code_challenge>)
                             ) @ #vk.55 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.46 )
                    case LinkClick
                    by contradiction
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.47 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.1, code_challenge>)
                             ) @ #vk.57 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.46 )
                    case LinkClick
                    by contradiction
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~code ) @ #y )
                next
                  case OIDCIdPIssueCode_case_1
                  solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce.2, code_challenge>)
                         ) @ #vk.48 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                next
                  case OIDCIdPIssueCode_case_2
                  solve( !KU( ~signalClient ) @ #vk.46 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~signalClient
                              ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.2, code_challenge>)
                           ) @ #vk.49 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case OIDCTokenForward_case_1
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.33) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_2
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.33) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_3
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.33) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_4
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.33) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                qed
              qed
            next
              case case_2
              by contradiction
            qed
          next
            case c_tlsClientMsg
            solve( !KU( ~code ) @ #vk.34 )
              case OIDCClientCodeRedirect_case_1
              solve( !KU( browserForward(~sess.6, cert(~signalClient.1),
                                         <'code', ~code, ~n.7>)
                     ) @ #vk.36 )
                case c_browserForward
                by contradiction
              qed
            next
              case OIDCClientCodeRedirect_case_2
              solve( !KU( browserForward(~sess.6, cert(~signalClient.1),
                                         <'code', ~code, ~n.7>)
                     ) @ #vk.36 )
                case OIDCIdPIssueCode
                solve( !KU( ~IdPKey ) @ #vk.37 )
                  case DomainCompromise
                  by contradiction
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                next
                  case OIDCIdPIssueCode
                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce, code_challenge>)
                         ) @ #vk.45 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                qed
              next
                case c_browserForward
                by contradiction
              qed
            next
              case OIDCClientCodeRedirect_case_3
              solve( !KU( browserForward(~sess.6, cert(~signalClient.1),
                                         <'code', ~code, ~n.7>)
                     ) @ #vk.36 )
                case LinkClick
                by contradiction
              next
                case OIDCIdPIssueCode
                solve( !KU( ~IdPKey ) @ #vk.37 )
                  case DomainCompromise
                  by contradiction
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                next
                  case OIDCIdPIssueCode
                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce, code_challenge>)
                         ) @ #vk.47 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                qed
              next
                case c_browserForward
                by contradiction
              qed
            next
              case OIDCClientCodeRedirect_case_4
              solve( !KU( browserForward(~sess.6, cert(~signalClient.1),
                                         <'code', ~code, ~n.7>)
                     ) @ #vk.36 )
                case LinkClick
                by contradiction
              next
                case c_browserForward
                by contradiction
              qed
            next
              case OIDCClientLogin
              by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
            next
              case OIDCIdPIssueCode_case_1
              solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                       <'oidc_req', hash, nonce.1, code_challenge>)
                     ) @ #vk.38 )
                case c_tlsClientMsg
                by contradiction
              qed
            next
              case OIDCIdPIssueCode_case_2
              solve( !KU( ~signalClient ) @ #vk.36 )
                case DomainCompromise
                by contradiction
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                          ) @ #y )
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                         <'oidc_req', hash, nonce.1, code_challenge>)
                       ) @ #vk.39 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              qed
            next
              case OIDCTokenForward_case_1
              solve( (∃ #x.
                       (UseCode( ~code ) @ #x)
                      ∧
                       (#vr.14 < #x) ∧
                       (#x < #vr.21) ∧
                       (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                     (∃ signalClient domain #x #y.
                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                case case_1
                by contradiction
              next
                case case_2
                by contradiction
              next
                case case_3
                by contradiction
              qed
            next
              case OIDCTokenForward_case_2
              solve( (∃ #x.
                       (UseCode( ~code ) @ #x)
                      ∧
                       (#vr.14 < #x) ∧
                       (#x < #vr.21) ∧
                       (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                     (∃ signalClient domain #x #y.
                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                case case_1
                by contradiction
              next
                case case_2
                by contradiction
              next
                case case_3
                by contradiction
              qed
            next
              case OIDCTokenForward_case_3
              solve( (∃ #x.
                       (UseCode( ~code ) @ #x)
                      ∧
                       (#vr.14 < #x) ∧
                       (#x < #vr.21) ∧
                       (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                     (∃ signalClient domain #x #y.
                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                case case_1
                by contradiction
              next
                case case_2
                by contradiction
              next
                case case_3
                by contradiction
              qed
            next
              case OIDCTokenForward_case_4
              solve( (∃ #x.
                       (UseCode( ~code ) @ #x)
                      ∧
                       (#vr.14 < #x) ∧
                       (#x < #vr.21) ∧
                       (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                     (∃ signalClient domain #x #y.
                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                case case_1
                by contradiction
              next
                case case_2
                by contradiction
              next
                case case_3
                by contradiction
              qed
            qed
          qed
        next
          case OIDCClientInit
          solve( (∀ #z. (!KU( ~n.8 ) @ #z) ⇒ ⊥)  ∥
                 (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
            case case_1
            solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey),
                                     <'token_req', ~code, ~n.6>)
                   ) @ #vk.20 )
              case OIDCClientCodeRedirect_case_1
              solve( !KU( browserForward(~sess.8, cert(~signalClient),
                                         <'code', ~code, ~n.2>)
                     ) @ #vk.29 )
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~sess.3, cert(~IdPKey),
                                         <'login', $Username, pw>)
                       ) @ #vk.23 )
                  case OIDCClientLogin
                  by contradiction
                next
                  case c_tlsClientMsg
                  solve( !KU( ~sess.2 ) @ #vk.24 )
                    case OIDCClientCodeRedirect
                    solve( !KU( ~IdPKey ) @ #vk.36 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.39 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case OIDCClientLogin
                    solve( !KU( ~IdPKey.1 ) @ #vk.37 )
                      case DomainCompromise
                      by solve( GenBrowserSession( $Initiator, $IdP, ~sess.2 ) @ #y )
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~IdPKey.1
                                ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey.1, cert(~IdPKey.2),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.41 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( ~signalClient.1 ) @ #vk.37 )
                      case DomainCompromise
                      solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.38 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP.1, ~signalClient.1
                                ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                               <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                             ) @ #vk.42 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  qed
                qed
              next
                case c_browserForward
                solve( !KU( ~code ) @ #vk.40 )
                  case OIDCClientCodeRedirect_case_1
                  solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                             <'code', ~code, ~n.22>)
                         ) @ #vk.41 )
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                             <'code', ~code, ~n.22>)
                         ) @ #vk.41 )
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                             <'code', ~code, ~n.22>)
                         ) @ #vk.41 )
                    case LinkClick
                    by contradiction
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                             <'code', ~code, ~n.22>)
                         ) @ #vk.41 )
                    case LinkClick
                    by contradiction
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y )
                next
                  case OIDCIdPIssueCode_case_1
                  solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce, code_challenge>)
                         ) @ #vk.43 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                next
                  case OIDCIdPIssueCode_case_2
                  solve( !KU( ~signalClient ) @ #vk.41 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                              ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce, code_challenge>)
                           ) @ #vk.44 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case OIDCTokenForward_case_1
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.40) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_2
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.40) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_3
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.40) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_4
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.40) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                qed
              qed
            next
              case OIDCClientCodeRedirect_case_2
              solve( !KU( browserForward(~sess.8, cert(~signalClient),
                                         <'code', ~code, ~n.2>)
                     ) @ #vk.30 )
                case c_browserForward
                solve( !KU( ~code ) @ #vk.43 )
                  case OIDCClientCodeRedirect_case_1
                  solve( !KU( browserForward(~sess.9, cert(~signalClient.1),
                                             <'code', ~code, ~n.14>)
                         ) @ #vk.44 )
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( !KU( browserForward(~sess.9, cert(~signalClient.1),
                                             <'code', ~code, ~n.14>)
                         ) @ #vk.44 )
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( !KU( browserForward(~sess.9, cert(~signalClient.1),
                                             <'code', ~code, ~n.14>)
                         ) @ #vk.44 )
                    case LinkClick
                    by contradiction
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( !KU( browserForward(~sess.9, cert(~signalClient.1),
                                             <'code', ~code, ~n.14>)
                         ) @ #vk.44 )
                    case LinkClick
                    by contradiction
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y )
                next
                  case OIDCIdPIssueCode_case_1
                  solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                           <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                         ) @ #vk.46 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                next
                  case OIDCIdPIssueCode_case_2
                  solve( !KU( ~signalClient ) @ #vk.44 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                              ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                             <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                           ) @ #vk.47 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case OIDCTokenForward_case_1
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.31) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_2
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.31) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_3
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.31) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_4
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.31) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                qed
              qed
            next
              case OIDCClientCodeRedirect_case_3
              solve( !KU( browserForward(~sess.8, cert(~signalClient),
                                         <'code', ~code, ~n.2>)
                     ) @ #vk.29 )
                case LinkClick
                solve( !KU( ~code ) @ #vk.33 )
                  case OIDCClientCodeRedirect_case_1
                  solve( !KU( browserForward(~sess.10, cert(~signalClient),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.34 )
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( !KU( browserForward(~sess.10, cert(~signalClient),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.34 )
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( !KU( browserForward(~sess.10, cert(~signalClient),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.34 )
                    case LinkClick
                    by contradiction
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( !KU( browserForward(~sess.10, cert(~signalClient),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.34 )
                    case LinkClick
                    by contradiction
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y.1 )
                next
                  case OIDCIdPIssueCode_case_1
                  solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce, code_challenge>)
                         ) @ #vk.36 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                next
                  case OIDCIdPIssueCode_case_2
                  solve( !KU( ~IdPKey ) @ #vk.34 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator, $IdP, ~IdPKey ) @ #y.1 )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce, code_challenge>)
                           ) @ #vk.37 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case OIDCTokenForward_case_1
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.32) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_2
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.32) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_3
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.32) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_4
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.32) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                qed
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~sess.3, cert(~IdPKey),
                                         <'login', $Username, pw>)
                       ) @ #vk.23 )
                  case OIDCClientLogin
                  by contradiction
                next
                  case c_tlsClientMsg
                  solve( GenBrowserSession( $A.1, $A, ~sess.3 ) @ #y )
                    case OIDCClientInit
                    solve( !KU( ~sess.2 ) @ #vk.25 )
                      case OIDCClientCodeRedirect
                      solve( !KU( ~IdPKey ) @ #vk.38 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator, $IdP, ~IdPKey ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce, code_challenge>)
                               ) @ #vk.41 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case OIDCClientLogin
                      solve( !KU( ~IdPKey.1 ) @ #vk.39 )
                        case DomainCompromise
                        by solve( GenBrowserSession( $Initiator, $IdP, ~sess.2 ) @ #y.1 )
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~IdPKey.1
                                  ) @ #y.2 )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey.1, cert(~IdPKey.2),
                                                 <'oidc_req', hash, nonce, code_challenge>)
                               ) @ #vk.43 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( ~signalClient.1 ) @ #vk.39 )
                        case DomainCompromise
                        solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce, code_challenge>)
                               ) @ #vk.40 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator, $IdP.1, ~signalClient.1
                                  ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                               ) @ #vk.44 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_browserForward
                solve( !KU( ~code ) @ #vk.37 )
                  case OIDCClientCodeRedirect_case_1
                  solve( !KU( browserForward(~sess.10, cert(~signalClient.1),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.38 )
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( !KU( browserForward(~sess.10, cert(~signalClient.1),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.38 )
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( !KU( browserForward(~sess.10, cert(~signalClient.1),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.38 )
                    case LinkClick
                    by contradiction
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( !KU( browserForward(~sess.10, cert(~signalClient.1),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.38 )
                    case LinkClick
                    by contradiction
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y.1 )
                next
                  case OIDCIdPIssueCode_case_1
                  solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce, code_challenge>)
                         ) @ #vk.40 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                next
                  case OIDCIdPIssueCode_case_2
                  solve( !KU( ~signalClient ) @ #vk.38 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                              ) @ #y.1 )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce, code_challenge>)
                           ) @ #vk.41 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case OIDCTokenForward_case_1
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.33) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_2
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.33) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_3
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.33) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_4
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.33) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                qed
              qed
            next
              case OIDCClientCodeRedirect_case_4
              solve( !KU( browserForward(~sess.8, cert(~signalClient),
                                         <'code', ~code, ~n.2>)
                     ) @ #vk.29 )
                case LinkClick
                solve( !KU( ~code ) @ #vk.31 )
                  case OIDCClientCodeRedirect_case_1
                  solve( !KU( browserForward(~sess.9, cert(~signalClient),
                                             <'code', ~code, ~n.14>)
                         ) @ #vk.32 )
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( !KU( browserForward(~sess.9, cert(~signalClient),
                                             <'code', ~code, ~n.14>)
                         ) @ #vk.32 )
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( !KU( browserForward(~sess.9, cert(~signalClient),
                                             <'code', ~code, ~n.14>)
                         ) @ #vk.32 )
                    case LinkClick
                    by contradiction
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( !KU( browserForward(~sess.9, cert(~signalClient),
                                             <'code', ~code, ~n.14>)
                         ) @ #vk.32 )
                    case LinkClick
                    by contradiction
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y )
                next
                  case OIDCIdPIssueCode_case_1
                  solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce, code_challenge>)
                         ) @ #vk.34 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                next
                  case OIDCIdPIssueCode_case_2
                  solve( !KU( ~IdPKey ) @ #vk.32 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator, $IdP, ~IdPKey ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce, code_challenge>)
                           ) @ #vk.35 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case OIDCTokenForward_case_1
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.30) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_2
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.30) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_3
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.30) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_4
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.30) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                qed
              next
                case c_browserForward
                solve( !KU( ~code ) @ #vk.38 )
                  case OIDCClientCodeRedirect_case_1
                  solve( !KU( browserForward(~sess.9, cert(~signalClient.1),
                                             <'code', ~code, ~n.14>)
                         ) @ #vk.39 )
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( !KU( browserForward(~sess.9, cert(~signalClient.1),
                                             <'code', ~code, ~n.14>)
                         ) @ #vk.39 )
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( !KU( browserForward(~sess.9, cert(~signalClient.1),
                                             <'code', ~code, ~n.14>)
                         ) @ #vk.39 )
                    case LinkClick
                    by contradiction
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( !KU( browserForward(~sess.9, cert(~signalClient.1),
                                             <'code', ~code, ~n.14>)
                         ) @ #vk.39 )
                    case LinkClick
                    by contradiction
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y )
                next
                  case OIDCIdPIssueCode_case_1
                  solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce.1, code_challenge>)
                         ) @ #vk.41 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                next
                  case OIDCIdPIssueCode_case_2
                  solve( !KU( ~signalClient ) @ #vk.39 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                              ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.1, code_challenge>)
                           ) @ #vk.42 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case OIDCTokenForward_case_1
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.31) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_2
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.31) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_3
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.31) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_4
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.31) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                qed
              qed
            next
              case c_tlsClientMsg
              by contradiction
            qed
          next
            case case_2
            by contradiction
          qed
        next
          case c_tlsClientMsg
          solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey),
                                   <'token_req', ~code, code_verifier>)
                 ) @ #vk.22 )
            case OIDCClientCodeRedirect_case_1
            solve( (∀ #z. (!KU( ~n.3 ) @ #z) ⇒ ⊥)  ∥
                   (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
              case case_1
              solve( !KU( browserForward(~sess.6, cert(~signalClient),
                                         <'code', ~code, ~n.7>)
                     ) @ #vk.31 )
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~sess.3, cert(~IdPKey),
                                         <'login', $Username, pw>)
                       ) @ #vk.26 )
                  case OIDCClientLogin
                  solve( !KU( s256(~n.4) ) @ #vk.31 )
                    case OIDCClientInit_case_1
                    solve( !KU( ~IdPKey ) @ #vk.44 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.47 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case OIDCClientInit_case_2
                    solve( GenBrowserSession( $Initiator, $A, ~sess.3 ) @ #vr.21 )
                      case OIDCClientInit
                      solve( !KU( ~sess.2 ) @ #vk.27 )
                        case OIDCClientCodeRedirect
                        solve( !KU( ~IdPKey ) @ #vk.44 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash, nonce, code_challenge>)
                                 ) @ #vk.47 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case OIDCClientLogin
                        solve( !KU( ~IdPKey.1 ) @ #vk.45 )
                          case DomainCompromise
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~sess.2 ) @ #y )
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.2, $IdP.1, ~IdPKey.1
                                    ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey.1, cert(~IdPKey.2),
                                                   <'oidc_req', hash, nonce, code_challenge>)
                                 ) @ #vk.49 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( ~signalClient.1 ) @ #vk.45 )
                          case DomainCompromise
                          solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                                   <'oidc_req', hash, nonce, code_challenge>)
                                 ) @ #vk.46 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~signalClient.1
                                    ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                                 ) @ #vk.50 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      qed
                    qed
                  next
                    case c_s256
                    by contradiction
                  qed
                next
                  case c_tlsClientMsg
                  solve( !KU( s256(~n.4) ) @ #vk.32 )
                    case OIDCClientInit_case_1
                    solve( !KU( ~IdPKey ) @ #vk.46 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.49 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case OIDCClientInit_case_2
                    solve( !KU( ~sess.2 ) @ #vk.29 )
                      case OIDCClientCodeRedirect
                      solve( !KU( ~IdPKey ) @ #vk.46 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce, code_challenge>)
                               ) @ #vk.49 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case OIDCClientLogin
                      solve( !KU( ~IdPKey.1 ) @ #vk.47 )
                        case DomainCompromise
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~sess.2 ) @ #y )
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.2, $IdP.1, ~IdPKey.1
                                  ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey.1, cert(~IdPKey.2),
                                                 <'oidc_req', hash, nonce, code_challenge>)
                               ) @ #vk.51 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( ~signalClient.1 ) @ #vk.47 )
                        case DomainCompromise
                        solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce, code_challenge>)
                               ) @ #vk.48 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~signalClient.1
                                  ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                               ) @ #vk.52 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    qed
                  next
                    case c_s256
                    by contradiction
                  qed
                qed
              next
                case c_browserForward
                solve( !KU( ~code ) @ #vk.47 )
                  case OIDCClientCodeRedirect_case_1
                  solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                             <'code', ~code, ~n.23>)
                         ) @ #vk.49 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.50 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.63 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                             <'code', ~code, ~n.23>)
                         ) @ #vk.49 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.51 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                             ) @ #vk.66 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                             <'code', ~code, ~n.23>)
                         ) @ #vk.49 )
                    case LinkClick
                    by contradiction
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.50 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.60 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                             <'code', ~code, ~n.23>)
                         ) @ #vk.49 )
                    case LinkClick
                    by contradiction
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.50 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.1, code_challenge>)
                             ) @ #vk.61 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                next
                  case OIDCIdPIssueCode_case_1
                  solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce.1, code_challenge>)
                         ) @ #vk.51 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                next
                  case OIDCIdPIssueCode_case_2
                  solve( !KU( ~signalClient ) @ #vk.49 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                              ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.1, code_challenge>)
                           ) @ #vk.52 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case OIDCTokenForward_case_1
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.41) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_2
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.41) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_3
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.41) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_4
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.41) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                qed
              qed
            next
              case case_2
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_2
            solve( (∀ #z. (!KU( ~n.3 ) @ #z) ⇒ ⊥)  ∥
                   (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
              case case_1
              solve( !KU( browserForward(~sess.6, cert(~signalClient),
                                         <'code', ~code, ~n.7>)
                     ) @ #vk.32 )
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~sess.3, cert(~IdPKey),
                                         <'login', $Username, pw>)
                       ) @ #vk.27 )
                  case OIDCClientLogin
                  solve( !KU( s256(~n.4) ) @ #vk.32 )
                    case OIDCClientInit_case_1
                    solve( !KU( ~IdPKey ) @ #vk.47 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                             ) @ #vk.50 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case OIDCClientInit_case_2
                    solve( GenBrowserSession( $Initiator, $A, ~sess.3 ) @ #vr.21 )
                      case OIDCAdversaryInit
                      solve( !KU( ~sess.2 ) @ #vk.28 )
                        case OIDCClientCodeRedirect
                        solve( !KU( ~IdPKey ) @ #vk.47 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                                 ) @ #vk.50 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case OIDCClientLogin
                        solve( !KU( ~IdPKey.1 ) @ #vk.48 )
                          case DomainCompromise
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~sess.2 ) @ #y )
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.2, $IdP.1, ~IdPKey.1
                                    ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey.1, cert(~IdPKey.2),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                                 ) @ #vk.52 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( ~signalClient.1 ) @ #vk.48 )
                          case DomainCompromise
                          solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce, code_challenge.1>)
                                 ) @ #vk.49 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~signalClient.1
                                    ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                                   <'oidc_req', hash.2, nonce.2, code_challenge.2>)
                                 ) @ #vk.53 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      qed
                    qed
                  next
                    case c_s256
                    by contradiction
                  qed
                next
                  case c_tlsClientMsg
                  solve( !KU( s256(~n.4) ) @ #vk.33 )
                    case OIDCClientInit_case_1
                    solve( !KU( ~IdPKey ) @ #vk.49 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                             ) @ #vk.52 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case OIDCClientInit_case_2
                    solve( !KU( ~sess.2 ) @ #vk.30 )
                      case OIDCClientCodeRedirect
                      solve( !KU( ~IdPKey ) @ #vk.49 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                               ) @ #vk.52 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case OIDCClientLogin
                      solve( !KU( ~IdPKey.1 ) @ #vk.50 )
                        case DomainCompromise
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~sess.2 ) @ #y )
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.2, $IdP.1, ~IdPKey.1
                                  ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey.1, cert(~IdPKey.2),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                               ) @ #vk.54 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( ~signalClient.1 ) @ #vk.50 )
                        case DomainCompromise
                        solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce, code_challenge.1>)
                               ) @ #vk.51 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~signalClient.1
                                  ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                                 <'oidc_req', hash.2, nonce.2, code_challenge.2>)
                               ) @ #vk.55 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    qed
                  next
                    case c_s256
                    by contradiction
                  qed
                qed
              next
                case c_browserForward
                solve( !KU( ~code ) @ #vk.50 )
                  case OIDCClientCodeRedirect_case_1
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.52 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.53 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                             ) @ #vk.66 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.52 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.54 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash.2, nonce.2, code_challenge.2>)
                             ) @ #vk.69 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.52 )
                    case LinkClick
                    by contradiction
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.53 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                             ) @ #vk.63 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.52 )
                    case LinkClick
                    by contradiction
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.53 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                             ) @ #vk.64 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                next
                  case OIDCIdPIssueCode_case_1
                  solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                           <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                         ) @ #vk.54 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                next
                  case OIDCIdPIssueCode_case_2
                  solve( !KU( ~signalClient ) @ #vk.52 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                              ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                             <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                           ) @ #vk.55 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case OIDCTokenForward_case_1
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.32) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_2
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.32) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_3
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.32) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_4
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.32) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                qed
              qed
            next
              case case_2
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_3
            solve( (∀ #z. (!KU( ~n.3 ) @ #z) ⇒ ⊥)  ∥
                   (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
              case case_1
              solve( !KU( browserForward(~sess.6, cert(~signalClient),
                                         <'code', ~code, ~n.7>)
                     ) @ #vk.31 )
                case LinkClick
                solve( !KU( ~code ) @ #vk.40 )
                  case OIDCClientCodeRedirect_case_1
                  solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                             <'code', ~code, ~n.16>)
                         ) @ #vk.42 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.43 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.56 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                             <'code', ~code, ~n.16>)
                         ) @ #vk.42 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.44 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                             ) @ #vk.59 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                             <'code', ~code, ~n.16>)
                         ) @ #vk.42 )
                    case LinkClick
                    by contradiction
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.43 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y.2 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.53 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                             <'code', ~code, ~n.16>)
                         ) @ #vk.42 )
                    case LinkClick
                    by contradiction
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.43 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.1, code_challenge>)
                             ) @ #vk.54 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                next
                  case OIDCIdPIssueCode_case_1
                  solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce.1, code_challenge>)
                         ) @ #vk.44 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                next
                  case OIDCIdPIssueCode_case_2
                  solve( !KU( ~IdPKey ) @ #vk.42 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.1, code_challenge>)
                           ) @ #vk.45 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case OIDCTokenForward_case_1
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.33) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_2
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.33) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_3
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.33) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_4
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.33) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                qed
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~sess.3, cert(~IdPKey),
                                         <'login', $Username, pw>)
                       ) @ #vk.26 )
                  case OIDCClientLogin
                  solve( !KU( s256(~n.4) ) @ #vk.31 )
                    case OIDCClientInit_case_1
                    solve( !KU( ~IdPKey ) @ #vk.40 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.43 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case OIDCClientInit_case_2
                    solve( GenBrowserSession( $Initiator, $A, ~sess.3 ) @ #y )
                      case LinkClick
                      solve( !Domain( $A, ~domain ) ▶₂ #y )
                        case TLSSetup
                        solve( !KU( ~sess.2 ) @ #vk.27 )
                          case OIDCClientCodeRedirect
                          solve( !KU( ~IdPKey ) @ #vk.43 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash, nonce.1, code_challenge>)
                                   ) @ #vk.46 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCClientLogin
                          solve( !KU( ~IdPKey.1 ) @ #vk.44 )
                            case DomainCompromise
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~sess.2 ) @ #y.1 )
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.2, $IdP.1, ~IdPKey.1
                                      ) @ #y.2 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey.1, cert(~IdPKey.2),
                                                     <'oidc_req', hash, nonce.1, code_challenge>)
                                   ) @ #vk.48 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( ~signalClient.1 ) @ #vk.44 )
                            case DomainCompromise
                            solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                                     <'oidc_req', hash, nonce.1, code_challenge>)
                                   ) @ #vk.45 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~signalClient.1
                                      ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                                     <'oidc_req', hash.1, nonce.2, code_challenge.1
                                                     >)
                                   ) @ #vk.49 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCAdversaryInit
                      solve( !Domain( $A, ~IdPKey.1 ) ▶₀ #y )
                        case TLSSetup
                        solve( !KU( ~sess.2 ) @ #vk.28 )
                          case OIDCClientCodeRedirect
                          solve( !KU( ~IdPKey ) @ #vk.48 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge.1
                                                     >)
                                   ) @ #vk.51 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCClientLogin
                          solve( !KU( ~IdPKey.1 ) @ #vk.49 )
                            case DomainCompromise
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~sess.2 ) @ #y.1 )
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.2, $IdP.1, ~IdPKey.1
                                      ) @ #y.2 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey.1, cert(~IdPKey.2),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge.1
                                                     >)
                                   ) @ #vk.53 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( ~signalClient.1 ) @ #vk.49 )
                            case DomainCompromise
                            solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge.1
                                                     >)
                                   ) @ #vk.50 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~signalClient.1
                                      ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                                     <'oidc_req', hash.2, nonce.2, code_challenge.2
                                                     >)
                                   ) @ #vk.54 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCClientInit
                      solve( !Domain( $A, ~IdPKey.1 ) ▶₀ #y )
                        case TLSSetup
                        solve( !KU( ~sess.2 ) @ #vk.27 )
                          case OIDCClientCodeRedirect
                          solve( !KU( ~IdPKey ) @ #vk.40 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash, nonce, code_challenge>)
                                   ) @ #vk.43 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCClientLogin
                          solve( !KU( ~IdPKey.1 ) @ #vk.41 )
                            case DomainCompromise
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~sess.2 ) @ #y.1 )
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.2, $IdP.1, ~IdPKey.1
                                      ) @ #y.2 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey.1, cert(~IdPKey.2),
                                                     <'oidc_req', hash, nonce, code_challenge>)
                                   ) @ #vk.45 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( ~signalClient.1 ) @ #vk.41 )
                            case DomainCompromise
                            solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                                     <'oidc_req', hash, nonce, code_challenge>)
                                   ) @ #vk.42 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~signalClient.1
                                      ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge.1
                                                     >)
                                   ) @ #vk.46 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case c_s256
                    by contradiction
                  qed
                next
                  case c_tlsClientMsg
                  solve( !KU( s256(~n.4) ) @ #vk.32 )
                    case OIDCClientInit_case_1
                    solve( !KU( ~IdPKey ) @ #vk.43 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.46 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case OIDCClientInit_case_2
                    solve( GenBrowserSession( $Initiator, $A, ~sess.3 ) @ #y )
                      case LinkClick
                      solve( !Domain( $A, ~domain ) ▶₂ #y )
                        case TLSSetup
                        solve( !KU( ~sess.2 ) @ #vk.29 )
                          case OIDCClientCodeRedirect
                          solve( !KU( ~IdPKey ) @ #vk.46 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash, nonce.1, code_challenge>)
                                   ) @ #vk.49 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCClientLogin
                          solve( !KU( ~IdPKey.1 ) @ #vk.47 )
                            case DomainCompromise
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~sess.2 ) @ #y.1 )
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.2, $IdP.1, ~IdPKey.1
                                      ) @ #y.2 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey.1, cert(~IdPKey.2),
                                                     <'oidc_req', hash, nonce.1, code_challenge>)
                                   ) @ #vk.51 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( ~signalClient.1 ) @ #vk.47 )
                            case DomainCompromise
                            solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                                     <'oidc_req', hash, nonce.1, code_challenge>)
                                   ) @ #vk.48 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~signalClient.1
                                      ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                                     <'oidc_req', hash.1, nonce.2, code_challenge.1
                                                     >)
                                   ) @ #vk.52 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCAdversaryInit
                      solve( !Domain( $A, ~IdPKey.1 ) ▶₀ #y )
                        case TLSSetup
                        solve( !KU( ~sess.2 ) @ #vk.30 )
                          case OIDCClientCodeRedirect
                          solve( !KU( ~IdPKey ) @ #vk.51 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge.1
                                                     >)
                                   ) @ #vk.54 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCClientLogin
                          solve( !KU( ~IdPKey.1 ) @ #vk.52 )
                            case DomainCompromise
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~sess.2 ) @ #y.1 )
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.2, $IdP.1, ~IdPKey.1
                                      ) @ #y.2 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey.1, cert(~IdPKey.2),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge.1
                                                     >)
                                   ) @ #vk.56 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( ~signalClient.1 ) @ #vk.52 )
                            case DomainCompromise
                            solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge.1
                                                     >)
                                   ) @ #vk.53 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~signalClient.1
                                      ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                                     <'oidc_req', hash.2, nonce.2, code_challenge.2
                                                     >)
                                   ) @ #vk.57 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCClientInit
                      solve( !Domain( $A, ~IdPKey.1 ) ▶₀ #y )
                        case TLSSetup
                        solve( !KU( ~sess.2 ) @ #vk.29 )
                          case OIDCClientCodeRedirect
                          solve( !KU( ~IdPKey ) @ #vk.43 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash, nonce, code_challenge>)
                                   ) @ #vk.46 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCClientLogin
                          solve( !KU( ~IdPKey.1 ) @ #vk.44 )
                            case DomainCompromise
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~sess.2 ) @ #y.1 )
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.2, $IdP.1, ~IdPKey.1
                                      ) @ #y.2 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey.1, cert(~IdPKey.2),
                                                     <'oidc_req', hash, nonce, code_challenge>)
                                   ) @ #vk.48 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( ~signalClient.1 ) @ #vk.44 )
                            case DomainCompromise
                            solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                                     <'oidc_req', hash, nonce, code_challenge>)
                                   ) @ #vk.45 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~signalClient.1
                                      ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge.1
                                                     >)
                                   ) @ #vk.49 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case c_s256
                    by contradiction
                  qed
                qed
              next
                case c_browserForward
                solve( !KU( ~code ) @ #vk.44 )
                  case OIDCClientCodeRedirect_case_1
                  solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                             <'code', ~code, ~n.16>)
                         ) @ #vk.46 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.47 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.60 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                             <'code', ~code, ~n.16>)
                         ) @ #vk.46 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.48 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                             ) @ #vk.63 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                             <'code', ~code, ~n.16>)
                         ) @ #vk.46 )
                    case LinkClick
                    by contradiction
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.47 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y.2 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.57 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                             <'code', ~code, ~n.16>)
                         ) @ #vk.46 )
                    case LinkClick
                    by contradiction
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.47 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.1, code_challenge>)
                             ) @ #vk.58 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                next
                  case OIDCIdPIssueCode_case_1
                  solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce.1, code_challenge>)
                         ) @ #vk.48 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                next
                  case OIDCIdPIssueCode_case_2
                  solve( !KU( ~signalClient ) @ #vk.46 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                              ) @ #y.1 )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.1, code_challenge>)
                           ) @ #vk.49 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case OIDCTokenForward_case_1
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.34) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_2
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.34) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_3
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.34) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_4
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.34) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                qed
              qed
            next
              case case_2
              by contradiction
            qed
          next
            case OIDCClientCodeRedirect_case_4
            solve( (∀ #z. (!KU( ~n.3 ) @ #z) ⇒ ⊥)  ∥
                   (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
              case case_1
              solve( !KU( browserForward(~sess.6, cert(~signalClient),
                                         <'code', ~code, ~n.7>)
                     ) @ #vk.31 )
                case LinkClick
                solve( !KU( ~code ) @ #vk.33 )
                  case OIDCClientCodeRedirect_case_1
                  solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.40 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.41 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.54 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.40 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.42 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                             ) @ #vk.57 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.40 )
                    case LinkClick
                    by contradiction
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.41 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.51 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.40 )
                    case LinkClick
                    by contradiction
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.41 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.1, code_challenge>)
                             ) @ #vk.52 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                next
                  case OIDCIdPIssueCode_case_1
                  solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce.1, code_challenge>)
                         ) @ #vk.42 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                next
                  case OIDCIdPIssueCode_case_2
                  solve( !KU( ~IdPKey ) @ #vk.40 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.1, code_challenge>)
                           ) @ #vk.43 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case OIDCTokenForward_case_1
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.31) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_2
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.31) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_3
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.31) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_4
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.31) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                qed
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~sess.3, cert(~IdPKey),
                                         <'login', $Username, pw>)
                       ) @ #vk.26 )
                  case OIDCClientLogin
                  solve( !KU( s256(~n.4) ) @ #vk.31 )
                    case OIDCClientInit_case_1
                    solve( !KU( ~IdPKey ) @ #vk.42 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.1, code_challenge>)
                             ) @ #vk.45 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case OIDCClientInit_case_2
                    solve( GenBrowserSession( $Initiator, $A, ~sess.3 ) @ #vr.21 )
                      case LinkClick
                      solve( !KU( ~sess.2 ) @ #vk.27 )
                        case OIDCClientCodeRedirect
                        solve( !KU( ~IdPKey ) @ #vk.42 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash, nonce.1, code_challenge>)
                                 ) @ #vk.45 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case OIDCClientLogin
                        solve( !KU( ~IdPKey.1 ) @ #vk.43 )
                          case DomainCompromise
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~sess.2 ) @ #y )
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.2, $IdP.1, ~IdPKey.1
                                    ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey.1, cert(~IdPKey.2),
                                                   <'oidc_req', hash, nonce.1, code_challenge>)
                                 ) @ #vk.47 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( ~signalClient.1 ) @ #vk.43 )
                          case DomainCompromise
                          solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                                   <'oidc_req', hash, nonce, code_challenge>)
                                 ) @ #vk.44 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~signalClient.1
                                    ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                                   <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                                 ) @ #vk.48 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      qed
                    qed
                  next
                    case c_s256
                    by contradiction
                  qed
                next
                  case c_tlsClientMsg
                  solve( !KU( s256(~n.4) ) @ #vk.32 )
                    case OIDCClientInit_case_1
                    solve( !KU( ~IdPKey ) @ #vk.44 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.1, code_challenge>)
                             ) @ #vk.47 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case OIDCClientInit_case_2
                    solve( !KU( ~sess.2 ) @ #vk.29 )
                      case OIDCClientCodeRedirect
                      solve( !KU( ~IdPKey ) @ #vk.44 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce.1, code_challenge>)
                               ) @ #vk.47 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case OIDCClientLogin
                      solve( !KU( ~IdPKey.1 ) @ #vk.45 )
                        case DomainCompromise
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~sess.2 ) @ #y )
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.2, $IdP.1, ~IdPKey.1
                                  ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey.1, cert(~IdPKey.2),
                                                 <'oidc_req', hash, nonce.1, code_challenge>)
                               ) @ #vk.49 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( ~signalClient.1 ) @ #vk.45 )
                        case DomainCompromise
                        solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce, code_challenge>)
                               ) @ #vk.46 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP.1, ~signalClient.1
                                  ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                                 <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                               ) @ #vk.50 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    qed
                  next
                    case c_s256
                    by contradiction
                  qed
                qed
              next
                case c_browserForward
                solve( !KU( ~code ) @ #vk.45 )
                  case OIDCClientCodeRedirect_case_1
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.47 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.48 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.1, code_challenge>)
                             ) @ #vk.61 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.47 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.49 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                             ) @ #vk.64 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.47 )
                    case LinkClick
                    by contradiction
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.48 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.1, code_challenge>)
                             ) @ #vk.58 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code, ~n.15>)
                         ) @ #vk.47 )
                    case LinkClick
                    by contradiction
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.48 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.2, code_challenge>)
                             ) @ #vk.59 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                next
                  case OIDCIdPIssueCode_case_1
                  solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce.2, code_challenge>)
                         ) @ #vk.49 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                next
                  case OIDCIdPIssueCode_case_2
                  solve( !KU( ~signalClient ) @ #vk.47 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                              ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.2, code_challenge>)
                           ) @ #vk.50 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case OIDCTokenForward_case_1
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.32) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_2
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.32) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_3
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.32) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_4
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.14 < #x) ∧
                           (#x < #vr.32) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                qed
              qed
            next
              case case_2
              by contradiction
            qed
          next
            case c_tlsClientMsg
            solve( !KU( ~code ) @ #vk.34 )
              case OIDCClientCodeRedirect_case_1
              solve( !KU( browserForward(~sess.6, cert(~signalClient.1),
                                         <'code', ~code, ~n.7>)
                     ) @ #vk.36 )
                case OIDCIdPIssueCode
                solve( !KU( ~IdPKey ) @ #vk.37 )
                  case DomainCompromise
                  by contradiction
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                next
                  case OIDCIdPIssueCode
                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce, code_challenge>)
                         ) @ #vk.50 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                qed
              next
                case c_browserForward
                by contradiction
              qed
            next
              case OIDCClientCodeRedirect_case_2
              solve( !KU( browserForward(~sess.6, cert(~signalClient.1),
                                         <'code', ~code, ~n.7>)
                     ) @ #vk.36 )
                case OIDCIdPIssueCode
                solve( !KU( ~IdPKey ) @ #vk.38 )
                  case DomainCompromise
                  by contradiction
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                next
                  case OIDCIdPIssueCode
                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                           <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                         ) @ #vk.53 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                qed
              next
                case c_browserForward
                by contradiction
              qed
            next
              case OIDCClientCodeRedirect_case_3
              solve( !KU( browserForward(~sess.6, cert(~signalClient.1),
                                         <'code', ~code, ~n.7>)
                     ) @ #vk.36 )
                case LinkClick
                by contradiction
              next
                case OIDCIdPIssueCode
                solve( !KU( ~IdPKey ) @ #vk.37 )
                  case DomainCompromise
                  by contradiction
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                next
                  case OIDCIdPIssueCode
                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce, code_challenge>)
                         ) @ #vk.47 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                qed
              next
                case c_browserForward
                by contradiction
              qed
            next
              case OIDCClientCodeRedirect_case_4
              solve( !KU( browserForward(~sess.6, cert(~signalClient.1),
                                         <'code', ~code, ~n.7>)
                     ) @ #vk.36 )
                case LinkClick
                by contradiction
              next
                case OIDCIdPIssueCode
                solve( !KU( ~IdPKey ) @ #vk.37 )
                  case DomainCompromise
                  by contradiction
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                next
                  case OIDCIdPIssueCode
                  solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce.1, code_challenge>)
                         ) @ #vk.48 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                qed
              next
                case c_browserForward
                by contradiction
              qed
            next
              case OIDCClientLogin
              by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y )
            next
              case OIDCIdPIssueCode_case_1
              solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                       <'oidc_req', hash, nonce.1, code_challenge>)
                     ) @ #vk.38 )
                case c_tlsClientMsg
                by contradiction
              qed
            next
              case OIDCIdPIssueCode_case_2
              solve( !KU( ~signalClient ) @ #vk.36 )
                case DomainCompromise
                by contradiction
              next
                case OIDCClientLogin
                by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                          ) @ #y )
              next
                case OIDCIdPIssueCode
                solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                         <'oidc_req', hash, nonce.1, code_challenge>)
                       ) @ #vk.39 )
                  case c_tlsClientMsg
                  by contradiction
                qed
              qed
            next
              case OIDCTokenForward_case_1
              solve( (∃ #x.
                       (UseCode( ~code ) @ #x)
                      ∧
                       (#vr.14 < #x) ∧
                       (#x < #vr.20) ∧
                       (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                     (∃ signalClient domain #x #y.
                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                case case_1
                by contradiction
              next
                case case_2
                by contradiction
              next
                case case_3
                by contradiction
              qed
            next
              case OIDCTokenForward_case_2
              solve( (∃ #x.
                       (UseCode( ~code ) @ #x)
                      ∧
                       (#vr.14 < #x) ∧
                       (#x < #vr.20) ∧
                       (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                     (∃ signalClient domain #x #y.
                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                case case_1
                by contradiction
              next
                case case_2
                by contradiction
              next
                case case_3
                by contradiction
              qed
            next
              case OIDCTokenForward_case_3
              solve( (∃ #x.
                       (UseCode( ~code ) @ #x)
                      ∧
                       (#vr.14 < #x) ∧
                       (#x < #vr.20) ∧
                       (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                     (∃ signalClient domain #x #y.
                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                case case_1
                by contradiction
              next
                case case_2
                by contradiction
              next
                case case_3
                by contradiction
              qed
            next
              case OIDCTokenForward_case_4
              solve( (∃ #x.
                       (UseCode( ~code ) @ #x)
                      ∧
                       (#vr.14 < #x) ∧
                       (#x < #vr.20) ∧
                       (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                     (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                     (∃ signalClient domain #x #y.
                       (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                       (CompromisedDomain( signalClient, domain ) @ #y)) )
                case case_1
                by contradiction
              next
                case case_2
                by contradiction
              next
                case case_3
                by contradiction
              qed
            qed
          qed
        qed
      next
        case OIDCTokenForward_case_1
        solve( !KU( browserForward(~sess.4, cert(~signalClient),
                                   <'code', code, ~n.6>)
               ) @ #vk.22 )
          case OIDCIdPIssueCode
          solve( (∃ #x.
                   (UseCode( ~code ) @ #x)
                  ∧
                   (#vr.38 < #x) ∧
                   (#x < #vr.9) ∧
                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                 (∃ signalClient domain #x #y.
                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                   (CompromisedDomain( signalClient, domain ) @ #y)) )
            case case_1
            solve( !Domain( $IdP, ~IdPKey.1 ) ▶₁ #x.1 )
              case TLSSetup
              solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey),
                                       <'oidc_req', hash.1, ~n.4, code_challenge>)
                     ) @ #vk.36 )
                case OIDCClientInit
                solve( !KU( tlsClientMsg(~sess.3, cert(~IdPKey.1),
                                         <'token_req', ~code, code_verifier>)
                       ) @ #vk.33 )
                  case OIDCClientCodeRedirect_case_1
                  solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                    case case_1
                    solve( !KU( browserForward(~sess.10, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.34 )
                      case OIDCIdPIssueCode
                      solve( St_OIDCIdP_Code( $A, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( tlsServerMsg(~sessPost, ~IdPKey,
                                                 <'token', 
                                                  <$A, username, nonce, 
                                                   h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>, 
                                                  sign(<$A, username, nonce, 
                                                        h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>,
                                                       x)
                                                 >)
                               ) @ #vk.23 )
                          case OIDCIdPTokenIssue
                          solve( !KU( tlsClientMsg(~sess.9, cert(~IdPKey),
                                                   <'oidc_req', 
                                                    h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2), nonce, 
                                                    s256(code_verifier)>)
                                 ) @ #vk.36 )
                            case OIDCAdversaryInit
                            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                     <'token_req', ~code.1, code_verifier>)
                                   ) @ #vk.38 )
                              case c_tlsClientMsg
                              solve( !KU( ~code.1 ) @ #vk.49 )
                                case OIDCClientCodeRedirect_case_1
                                solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.16>)
                                       ) @ #vk.51 )
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_2
                                solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.16>)
                                       ) @ #vk.51 )
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.52 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.60 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_3
                                solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.16>)
                                       ) @ #vk.51 )
                                  case LinkClick
                                  by contradiction
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.52 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y.1 )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.62 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_4
                                solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.16>)
                                       ) @ #vk.51 )
                                  case LinkClick
                                  by contradiction
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientLogin
                                by solve( GenBrowserSession( $Initiator.2, $IdP, ~code.1 ) @ #y )
                              next
                                case OIDCIdPIssueCode_case_1
                                solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                                         <'oidc_req', hash, nonce.1, code_challenge
                                                         >)
                                       ) @ #vk.53 )
                                  case c_tlsClientMsg
                                  by contradiction
                                qed
                              next
                                case OIDCIdPIssueCode_case_2
                                solve( !KU( ~signalClient ) @ #vk.51 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~signalClient
                                            ) @ #y )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                           <'oidc_req', hash, nonce.1, 
                                                            code_challenge>)
                                         ) @ #vk.54 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case OIDCTokenForward_case_1
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.34 < #x) ∧
                                         (#x < #vr.39) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_2
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.34 < #x) ∧
                                         (#x < #vr.39) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_3
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.34 < #x) ∧
                                         (#x < #vr.39) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_4
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.34 < #x) ∧
                                         (#x < #vr.39) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              qed
                            qed
                          next
                            case OIDCClientInit
                            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                     <'token_req', ~code.1, ~n.6>)
                                   ) @ #vk.34 )
                              case OIDCClientCodeRedirect
                              solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey),
                                                       <'login', $Username, pw>)
                                     ) @ #vk.32 )
                                case OIDCClientLogin
                                by contradiction
                              next
                                case c_tlsClientMsg
                                solve( !KU( ~sess.2 ) @ #vk.35 )
                                  case OIDCClientInit
                                  solve( !KU( ~IdPKey ) @ #vk.40 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.43 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case OIDCClientLogin
                                  solve( !KU( ~IdPKey ) @ #vk.41 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.45 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~signalClient.1 ) @ #vk.41 )
                                    case DomainCompromise
                                    solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                                             <'oidc_req', hash, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.42 )
                                      case OIDCClientInit
                                      by contradiction
                                    next
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.1, $IdP.1,
                                                                 ~signalClient.1
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                                             <'oidc_req', hash.1, nonce.1, 
                                                              code_challenge.1>)
                                           ) @ #vk.46 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          next
                            case c_tlsClientMsg
                            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                     <'token_req', ~code.1, code_verifier>)
                                   ) @ #vk.37 )
                              case c_tlsClientMsg
                              solve( !KU( ~code.1 ) @ #vk.49 )
                                case OIDCClientCodeRedirect_case_1
                                solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.16>)
                                       ) @ #vk.51 )
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.52 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.65 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_2
                                solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.16>)
                                       ) @ #vk.51 )
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.53 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.1, nonce.1, 
                                                              code_challenge.1>)
                                           ) @ #vk.68 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_3
                                solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.16>)
                                       ) @ #vk.51 )
                                  case LinkClick
                                  by contradiction
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.52 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y.1 )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.62 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_4
                                solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.16>)
                                       ) @ #vk.51 )
                                  case LinkClick
                                  by contradiction
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.52 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash, nonce.1, 
                                                              code_challenge>)
                                           ) @ #vk.63 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientLogin
                                by solve( GenBrowserSession( $Initiator.1, $IdP, ~code.1 ) @ #y )
                              next
                                case OIDCIdPIssueCode_case_1
                                solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                                         <'oidc_req', hash, nonce.1, code_challenge
                                                         >)
                                       ) @ #vk.53 )
                                  case c_tlsClientMsg
                                  by contradiction
                                qed
                              next
                                case OIDCIdPIssueCode_case_2
                                solve( !KU( ~signalClient ) @ #vk.51 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                            ) @ #y )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                           <'oidc_req', hash, nonce.1, 
                                                            code_challenge>)
                                         ) @ #vk.54 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case OIDCTokenForward_case_1
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.34 < #x) ∧
                                         (#x < #vr.38) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_2
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.34 < #x) ∧
                                         (#x < #vr.38) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_3
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.34 < #x) ∧
                                         (#x < #vr.38) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_4
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.34 < #x) ∧
                                         (#x < #vr.38) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              qed
                            qed
                          qed
                        next
                          case c_tlsServerMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      by solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                 s256(~n.5)
                                ) ▶₃ #x.1 )
                    qed
                  next
                    case case_2
                    solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                      case TLSSetup
                      solve( !KU( browserForward(~sess.10, cert(~signalClient.1),
                                                 <'code', ~code, ~n.14>)
                             ) @ #vk.34 )
                        case OIDCIdPIssueCode
                        by contradiction
                      next
                        case c_browserForward
                        by solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                   s256(~n.5)
                                  ) ▶₃ #x.1 )
                      qed
                    qed
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                    case case_1
                    solve( !KU( browserForward(~sess.10, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.34 )
                      case c_browserForward
                      by solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                 s256(~n.5)
                                ) ▶₃ #x.1 )
                    qed
                  next
                    case case_2
                    solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                      case TLSSetup
                      solve( !KU( browserForward(~sess.10, cert(~signalClient.1),
                                                 <'code', ~code, ~n.14>)
                             ) @ #vk.34 )
                        case c_browserForward
                        by solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                   s256(~n.5)
                                  ) ▶₃ #x.1 )
                      qed
                    qed
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                    case case_1
                    solve( !KU( browserForward(~sess.10, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.34 )
                      case LinkClick
                      by solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                 s256(~n.6)
                                ) ▶₃ #x.1 )
                    next
                      case c_browserForward
                      by solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                 s256(~n.5)
                                ) ▶₃ #x.1 )
                    qed
                  next
                    case case_2
                    solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                      case TLSSetup
                      solve( !KU( browserForward(~sess.10, cert(~signalClient.1),
                                                 <'code', ~code, ~n.14>)
                             ) @ #vk.34 )
                        case LinkClick
                        by solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                   s256(~n.6)
                                  ) ▶₃ #x.1 )
                      next
                        case c_browserForward
                        by solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                   s256(~n.5)
                                  ) ▶₃ #x.1 )
                      qed
                    qed
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                    case case_1
                    solve( !KU( browserForward(~sess.10, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.34 )
                      case LinkClick
                      by solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                 s256(~n.5)
                                ) ▶₃ #x.1 )
                    next
                      case c_browserForward
                      by solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                 s256(~n.5)
                                ) ▶₃ #x.1 )
                    qed
                  next
                    case case_2
                    solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                      case TLSSetup
                      solve( !KU( browserForward(~sess.10, cert(~signalClient.1),
                                                 <'code', ~code, ~n.14>)
                             ) @ #vk.34 )
                        case LinkClick
                        by solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                   s256(~n.5)
                                  ) ▶₃ #x.1 )
                      next
                        case c_browserForward
                        by solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                   s256(~n.5)
                                  ) ▶₃ #x.1 )
                      qed
                    qed
                  qed
                next
                  case c_tlsClientMsg
                  solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                          s256(code_verifier)
                         ) ▶₃ #x.1 )
                    case OIDCIdPIssueCode
                    solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                           (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    qed
                  qed
                qed
              next
                case c_tlsClientMsg
                solve( !KU( tlsClientMsg(~sess.3, cert(~IdPKey.1),
                                         <'token_req', ~code, code_verifier>)
                       ) @ #vk.38 )
                  case OIDCClientCodeRedirect_case_1
                  solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                    case case_1
                    solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                               <'code', ~code, ~n.22>)
                           ) @ #vk.48 )
                      case OIDCIdPIssueCode
                      solve( St_OIDCIdP_Code( $A, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( tlsServerMsg(~sessPost, ~IdPKey,
                                                 <'token', 
                                                  <$A, username, nonce, 
                                                   h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>, 
                                                  sign(<$A, username, nonce, 
                                                        h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>,
                                                       x)
                                                 >)
                               ) @ #vk.23 )
                          case OIDCIdPTokenIssue
                          solve( !KU( tlsClientMsg(~sess.13, cert(~IdPKey),
                                                   <'oidc_req', 
                                                    h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2), nonce, 
                                                    s256(code_verifier)>)
                                 ) @ #vk.50 )
                            case OIDCAdversaryInit
                            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                     <'token_req', ~code.1, code_verifier>)
                                   ) @ #vk.52 )
                              case c_tlsClientMsg
                              solve( !KU( ~code.1 ) @ #vk.62 )
                                case OIDCClientCodeRedirect_case_1
                                solve( !KU( browserForward(~sess.15, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.24>)
                                       ) @ #vk.64 )
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_2
                                solve( !KU( browserForward(~sess.15, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.24>)
                                       ) @ #vk.64 )
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.65 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.1, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.73 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_3
                                solve( !KU( browserForward(~sess.15, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.24>)
                                       ) @ #vk.64 )
                                  case LinkClick
                                  by contradiction
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.65 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y.1 )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.1, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.75 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_4
                                solve( !KU( browserForward(~sess.15, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.24>)
                                       ) @ #vk.64 )
                                  case LinkClick
                                  by contradiction
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientLogin
                                by solve( GenBrowserSession( $Initiator.2, $IdP, ~code.1 ) @ #y )
                              next
                                case OIDCIdPIssueCode_case_1
                                solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                                         <'oidc_req', hash.1, nonce.1, 
                                                          code_challenge>)
                                       ) @ #vk.66 )
                                  case c_tlsClientMsg
                                  by contradiction
                                qed
                              next
                                case OIDCIdPIssueCode_case_2
                                solve( !KU( ~signalClient ) @ #vk.64 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~signalClient
                                            ) @ #y )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce.1, 
                                                            code_challenge>)
                                         ) @ #vk.67 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case OIDCTokenForward_case_1
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.44 < #x) ∧
                                         (#x < #vr.49) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_2
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.44 < #x) ∧
                                         (#x < #vr.49) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_3
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.44 < #x) ∧
                                         (#x < #vr.49) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_4
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.44 < #x) ∧
                                         (#x < #vr.49) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              qed
                            qed
                          next
                            case OIDCClientInit
                            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                     <'token_req', ~code.1, ~n.6>)
                                   ) @ #vk.48 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          next
                            case c_tlsClientMsg
                            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                     <'token_req', ~code.1, code_verifier>)
                                   ) @ #vk.52 )
                              case OIDCClientCodeRedirect
                              solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey),
                                                       <'login', $Username, pw>)
                                     ) @ #vk.40 )
                                case OIDCClientLogin
                                by contradiction
                              next
                                case c_tlsClientMsg
                                solve( !KU( s256(~n.6) ) @ #vk.46 )
                                  case OIDCClientInit_case_1
                                  solve( !KU( ~IdPKey ) @ #vk.50 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.53 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case OIDCClientInit_case_2
                                  solve( !KU( ~sess.2 ) @ #vk.45 )
                                    case OIDCClientInit
                                    solve( !KU( ~IdPKey ) @ #vk.50 )
                                      case DomainCompromise
                                      by contradiction
                                    next
                                      case OIDCClientLogin
                                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                                ) @ #y )
                                    next
                                      case OIDCIdPIssueCode
                                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                               <'oidc_req', hash, nonce, 
                                                                code_challenge>)
                                             ) @ #vk.53 )
                                        case c_tlsClientMsg
                                        by contradiction
                                      qed
                                    qed
                                  next
                                    case OIDCClientLogin
                                    solve( !KU( ~IdPKey ) @ #vk.51 )
                                      case DomainCompromise
                                      by contradiction
                                    next
                                      case OIDCClientLogin
                                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                                ) @ #y )
                                    next
                                      case OIDCIdPIssueCode
                                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                               <'oidc_req', hash, nonce, 
                                                                code_challenge>)
                                             ) @ #vk.55 )
                                        case c_tlsClientMsg
                                        by contradiction
                                      qed
                                    qed
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( ~signalClient.1 ) @ #vk.51 )
                                      case DomainCompromise
                                      solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                                               <'oidc_req', hash, nonce, 
                                                                code_challenge>)
                                             ) @ #vk.52 )
                                        case OIDCClientInit
                                        by contradiction
                                      next
                                        case c_tlsClientMsg
                                        by contradiction
                                      qed
                                    next
                                      case OIDCClientLogin
                                      by solve( GenBrowserSession( $Initiator.1, $IdP.1,
                                                                   ~signalClient.1
                                                ) @ #y )
                                    next
                                      case OIDCIdPIssueCode
                                      solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                                               <'oidc_req', hash.1, nonce.1, 
                                                                code_challenge.1>)
                                             ) @ #vk.56 )
                                        case c_tlsClientMsg
                                        by contradiction
                                      qed
                                    qed
                                  qed
                                next
                                  case c_s256
                                  by contradiction
                                qed
                              qed
                            next
                              case c_tlsClientMsg
                              solve( !KU( ~code.1 ) @ #vk.61 )
                                case OIDCClientCodeRedirect_case_1
                                solve( !KU( browserForward(~sess.15, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.24>)
                                       ) @ #vk.63 )
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.64 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.1, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.77 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_2
                                solve( !KU( browserForward(~sess.15, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.24>)
                                       ) @ #vk.63 )
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.65 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.2, nonce.1, 
                                                              code_challenge.1>)
                                           ) @ #vk.80 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_3
                                solve( !KU( browserForward(~sess.15, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.24>)
                                       ) @ #vk.63 )
                                  case LinkClick
                                  by contradiction
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.64 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y.1 )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.1, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.74 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_4
                                solve( !KU( browserForward(~sess.15, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.24>)
                                       ) @ #vk.63 )
                                  case LinkClick
                                  by contradiction
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.64 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.1, nonce.1, 
                                                              code_challenge>)
                                           ) @ #vk.75 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientLogin
                                by solve( GenBrowserSession( $Initiator.1, $IdP, ~code.1 ) @ #y )
                              next
                                case OIDCIdPIssueCode_case_1
                                solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                                         <'oidc_req', hash.1, nonce.1, 
                                                          code_challenge>)
                                       ) @ #vk.65 )
                                  case c_tlsClientMsg
                                  by contradiction
                                qed
                              next
                                case OIDCIdPIssueCode_case_2
                                solve( !KU( ~signalClient ) @ #vk.63 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                            ) @ #y )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce.1, 
                                                            code_challenge>)
                                         ) @ #vk.66 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case OIDCTokenForward_case_1
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.44 < #x) ∧
                                         (#x < #vr.48) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_2
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.44 < #x) ∧
                                         (#x < #vr.48) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_3
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.44 < #x) ∧
                                         (#x < #vr.48) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_4
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.44 < #x) ∧
                                         (#x < #vr.48) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              qed
                            qed
                          qed
                        next
                          case c_tlsServerMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~code ) @ #vk.64 )
                          case OIDCClientCodeRedirect_case_1
                          solve( !KU( browserForward(~sess.22, cert(~signalClient.1),
                                                     <'code', ~code, ~n.38>)
                                 ) @ #vk.66 )
                            case OIDCIdPIssueCode
                            solve( !KU( ~IdPKey ) @ #vk.66 )
                              case DomainCompromise
                              by contradiction
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                            next
                              case OIDCIdPIssueCode
                              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                       <'oidc_req', hash.1, nonce.1, code_challenge
                                                       >)
                                     ) @ #vk.69 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            qed
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_2
                          solve( !KU( browserForward(~sess.22, cert(~signalClient.1),
                                                     <'code', ~code, ~n.38>)
                                 ) @ #vk.66 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_3
                          solve( !KU( browserForward(~sess.22, cert(~signalClient.1),
                                                     <'code', ~code, ~n.38>)
                                 ) @ #vk.66 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_4
                          solve( !KU( browserForward(~sess.22, cert(~signalClient.1),
                                                     <'code', ~code, ~n.38>)
                                 ) @ #vk.66 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                        next
                          case OIDCIdPIssueCode_case_1
                          solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.68 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case OIDCIdPIssueCode_case_2
                          solve( !KU( ~signalClient ) @ #vk.66 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                      ) @ #y )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                                   ) @ #vk.69 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCTokenForward_case_1
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.38 < #x) ∧
                                   (#x < #vr.63) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_2
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.38 < #x) ∧
                                   (#x < #vr.63) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_3
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.38 < #x) ∧
                                   (#x < #vr.63) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_4
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.38 < #x) ∧
                                   (#x < #vr.63) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                      case TLSSetup
                      solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                                 <'code', ~code, ~n.22>)
                             ) @ #vk.48 )
                        case OIDCIdPIssueCode
                        by contradiction
                      next
                        case c_browserForward
                        solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                s256(~n.5)
                               ) ▶₃ #x.1 )
                          case OIDCIdPIssueCode
                          by contradiction
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                    case case_1
                    solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                               <'code', ~code, ~n.22>)
                           ) @ #vk.48 )
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~code ) @ #vk.67 )
                          case OIDCClientCodeRedirect_case_1
                          solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                     <'code', ~code, ~n.30>)
                                 ) @ #vk.69 )
                            case OIDCIdPIssueCode
                            solve( !KU( ~IdPKey ) @ #vk.69 )
                              case DomainCompromise
                              by contradiction
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                            next
                              case OIDCIdPIssueCode
                              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                       <'oidc_req', hash.2, nonce.2, 
                                                        code_challenge.1>)
                                     ) @ #vk.72 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            qed
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_2
                          solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                     <'code', ~code, ~n.30>)
                                 ) @ #vk.69 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_3
                          solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                     <'code', ~code, ~n.30>)
                                 ) @ #vk.69 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_4
                          solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                     <'code', ~code, ~n.30>)
                                 ) @ #vk.69 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                        next
                          case OIDCIdPIssueCode_case_1
                          solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                   <'oidc_req', hash.2, nonce.2, code_challenge.1>)
                                 ) @ #vk.71 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case OIDCIdPIssueCode_case_2
                          solve( !KU( ~signalClient ) @ #vk.69 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                      ) @ #y )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                     <'oidc_req', hash.2, nonce.2, code_challenge.1
                                                     >)
                                   ) @ #vk.72 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCTokenForward_case_1
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.38 < #x) ∧
                                   (#x < #vr.54) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_2
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.38 < #x) ∧
                                   (#x < #vr.54) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_3
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.38 < #x) ∧
                                   (#x < #vr.54) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_4
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.38 < #x) ∧
                                   (#x < #vr.54) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                      case TLSSetup
                      solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                                 <'code', ~code, ~n.22>)
                             ) @ #vk.48 )
                        case c_browserForward
                        solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                s256(~n.5)
                               ) ▶₃ #x.1 )
                          case OIDCIdPIssueCode
                          by contradiction
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                    case case_1
                    solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                               <'code', ~code, ~n.22>)
                           ) @ #vk.48 )
                      case LinkClick
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.6)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~code ) @ #vk.57 )
                          case OIDCClientCodeRedirect_case_1
                          solve( !KU( browserForward(~sess.20, cert(~signalClient),
                                                     <'code', ~code, ~n.31>)
                                 ) @ #vk.59 )
                            case OIDCIdPIssueCode
                            solve( !KU( ~IdPKey ) @ #vk.59 )
                              case DomainCompromise
                              by contradiction
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                            next
                              case OIDCIdPIssueCode
                              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                       <'oidc_req', hash.1, nonce.1, code_challenge
                                                       >)
                                     ) @ #vk.62 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            qed
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_2
                          solve( !KU( browserForward(~sess.20, cert(~signalClient),
                                                     <'code', ~code, ~n.31>)
                                 ) @ #vk.59 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_3
                          solve( !KU( browserForward(~sess.20, cert(~signalClient),
                                                     <'code', ~code, ~n.31>)
                                 ) @ #vk.59 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_4
                          solve( !KU( browserForward(~sess.20, cert(~signalClient),
                                                     <'code', ~code, ~n.31>)
                                 ) @ #vk.59 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode_case_1
                          solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.61 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case OIDCIdPIssueCode_case_2
                          solve( !KU( ~IdPKey ) @ #vk.59 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                                   ) @ #vk.62 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCTokenForward_case_1
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.37 < #x) ∧
                                   (#x < #vr.55) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_2
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.37 < #x) ∧
                                   (#x < #vr.55) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_3
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.37 < #x) ∧
                                   (#x < #vr.55) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_4
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.37 < #x) ∧
                                   (#x < #vr.55) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        qed
                      qed
                    next
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~code ) @ #vk.61 )
                          case OIDCClientCodeRedirect_case_1
                          solve( !KU( browserForward(~sess.20, cert(~signalClient.1),
                                                     <'code', ~code, ~n.31>)
                                 ) @ #vk.63 )
                            case OIDCIdPIssueCode
                            solve( !KU( ~IdPKey ) @ #vk.63 )
                              case DomainCompromise
                              by contradiction
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                            next
                              case OIDCIdPIssueCode
                              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                       <'oidc_req', hash.1, nonce.1, code_challenge
                                                       >)
                                     ) @ #vk.66 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            qed
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_2
                          solve( !KU( browserForward(~sess.20, cert(~signalClient.1),
                                                     <'code', ~code, ~n.31>)
                                 ) @ #vk.63 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_3
                          solve( !KU( browserForward(~sess.20, cert(~signalClient.1),
                                                     <'code', ~code, ~n.31>)
                                 ) @ #vk.63 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_4
                          solve( !KU( browserForward(~sess.20, cert(~signalClient.1),
                                                     <'code', ~code, ~n.31>)
                                 ) @ #vk.63 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode_case_1
                          solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.65 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case OIDCIdPIssueCode_case_2
                          solve( !KU( ~signalClient ) @ #vk.63 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                      ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                                   ) @ #vk.66 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCTokenForward_case_1
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.38 < #x) ∧
                                   (#x < #vr.56) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_2
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.38 < #x) ∧
                                   (#x < #vr.56) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_3
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.38 < #x) ∧
                                   (#x < #vr.56) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_4
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.38 < #x) ∧
                                   (#x < #vr.56) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                      case TLSSetup
                      solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                                 <'code', ~code, ~n.22>)
                             ) @ #vk.48 )
                        case LinkClick
                        solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                s256(~n.6)
                               ) ▶₃ #x.1 )
                          case OIDCIdPIssueCode
                          by contradiction
                        qed
                      next
                        case c_browserForward
                        solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                s256(~n.5)
                               ) ▶₃ #x.1 )
                          case OIDCIdPIssueCode
                          by contradiction
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                    case case_1
                    solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                               <'code', ~code, ~n.22>)
                           ) @ #vk.48 )
                      case LinkClick
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~code ) @ #vk.50 )
                          case OIDCClientCodeRedirect_case_1
                          solve( !KU( browserForward(~sess.19, cert(~signalClient),
                                                     <'code', ~code, ~n.30>)
                                 ) @ #vk.57 )
                            case OIDCIdPIssueCode
                            solve( !KU( ~IdPKey ) @ #vk.57 )
                              case DomainCompromise
                              by contradiction
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                            next
                              case OIDCIdPIssueCode
                              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                       <'oidc_req', hash.1, nonce.1, code_challenge
                                                       >)
                                     ) @ #vk.60 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            qed
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_2
                          solve( !KU( browserForward(~sess.19, cert(~signalClient),
                                                     <'code', ~code, ~n.30>)
                                 ) @ #vk.57 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_3
                          solve( !KU( browserForward(~sess.19, cert(~signalClient),
                                                     <'code', ~code, ~n.30>)
                                 ) @ #vk.57 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_4
                          solve( !KU( browserForward(~sess.19, cert(~signalClient),
                                                     <'code', ~code, ~n.30>)
                                 ) @ #vk.57 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                        next
                          case OIDCIdPIssueCode_case_1
                          solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.59 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case OIDCIdPIssueCode_case_2
                          solve( !KU( ~IdPKey ) @ #vk.57 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                                   ) @ #vk.60 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCTokenForward_case_1
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.37 < #x) ∧
                                   (#x < #vr.53) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_2
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.37 < #x) ∧
                                   (#x < #vr.53) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_3
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.37 < #x) ∧
                                   (#x < #vr.53) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_4
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.37 < #x) ∧
                                   (#x < #vr.53) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        qed
                      qed
                    next
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~code ) @ #vk.62 )
                          case OIDCClientCodeRedirect_case_1
                          solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                     <'code', ~code, ~n.30>)
                                 ) @ #vk.64 )
                            case OIDCIdPIssueCode
                            solve( !KU( ~IdPKey ) @ #vk.64 )
                              case DomainCompromise
                              by contradiction
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                            next
                              case OIDCIdPIssueCode
                              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                       <'oidc_req', hash.1, nonce.2, code_challenge
                                                       >)
                                     ) @ #vk.67 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            qed
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_2
                          solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                     <'code', ~code, ~n.30>)
                                 ) @ #vk.64 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_3
                          solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                     <'code', ~code, ~n.30>)
                                 ) @ #vk.64 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_4
                          solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                     <'code', ~code, ~n.30>)
                                 ) @ #vk.64 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                        next
                          case OIDCIdPIssueCode_case_1
                          solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.2, code_challenge>)
                                 ) @ #vk.66 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case OIDCIdPIssueCode_case_2
                          solve( !KU( ~signalClient ) @ #vk.64 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                      ) @ #y )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.2, code_challenge>)
                                   ) @ #vk.67 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCTokenForward_case_1
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.38 < #x) ∧
                                   (#x < #vr.54) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_2
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.38 < #x) ∧
                                   (#x < #vr.54) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_3
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.38 < #x) ∧
                                   (#x < #vr.54) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_4
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.38 < #x) ∧
                                   (#x < #vr.54) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                      case TLSSetup
                      solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                                 <'code', ~code, ~n.22>)
                             ) @ #vk.48 )
                        case LinkClick
                        solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                s256(~n.5)
                               ) ▶₃ #x.1 )
                          case OIDCIdPIssueCode
                          by contradiction
                        qed
                      next
                        case c_browserForward
                        solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                s256(~n.5)
                               ) ▶₃ #x.1 )
                          case OIDCIdPIssueCode
                          by contradiction
                        qed
                      qed
                    qed
                  qed
                next
                  case c_tlsClientMsg
                  solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                          s256(code_verifier)
                         ) ▶₃ #x.1 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~code ) @ #vk.52 )
                      case OIDCClientCodeRedirect_case_1
                      solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                                 <'code', ~code, ~n.22>)
                             ) @ #vk.54 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.54 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.57 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_2
                      solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                                 <'code', ~code, ~n.22>)
                             ) @ #vk.54 )
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_3
                      solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                                 <'code', ~code, ~n.22>)
                             ) @ #vk.54 )
                        case LinkClick
                        by contradiction
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_4
                      solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                                 <'code', ~code, ~n.22>)
                             ) @ #vk.54 )
                        case LinkClick
                        by contradiction
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y )
                    next
                      case OIDCIdPIssueCode_case_1
                      solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.1, code_challenge>)
                             ) @ #vk.56 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    next
                      case OIDCIdPIssueCode_case_2
                      solve( !KU( ~signalClient ) @ #vk.54 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                                  ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge>)
                               ) @ #vk.57 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_1
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.38 < #x) ∧
                               (#x < #vr.42) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_2
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.38 < #x) ∧
                               (#x < #vr.42) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_3
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.38 < #x) ∧
                               (#x < #vr.42) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_4
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.38 < #x) ∧
                               (#x < #vr.42) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case case_2
            by contradiction
          next
            case case_3
            by contradiction
          qed
        next
          case c_browserForward
          solve( !KU( tlsServerMsg(~sessPost, ~IdPKey,
                                   <'token', 
                                    <$A, username, nonce, h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>, 
                                    sign(<$A, username, nonce, 
                                          h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>,
                                         x)
                                   >)
                 ) @ #vk.21 )
            case OIDCIdPTokenIssue
            solve( !KU( tlsClientMsg(~sess.12, cert(~IdPKey),
                                     <'oidc_req', h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2), nonce, 
                                      s256(code_verifier)>)
                   ) @ #vk.44 )
              case OIDCAdversaryInit
              solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                       <'token_req', ~code.1, code_verifier>)
                     ) @ #vk.46 )
                case OIDCClientCodeRedirect
                solve( (∃ #x.
                         (UseCode( ~code ) @ #x)
                        ∧
                         (#vr.40 < #x) ∧
                         (#x < #vr.9) ∧
                         (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  solve( (∀ #z. (!KU( ~n.6 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
                    case case_1
                    solve( !KU( ~code ) @ #vk.46 )
                      case OIDCClientCodeRedirect_case_1
                      solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                                 <'code', ~code, ~n.23>)
                             ) @ #vk.52 )
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_2
                      solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                                 <'code', ~code, ~n.23>)
                             ) @ #vk.52 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.53 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash, nonce, code_challenge>)
                                 ) @ #vk.61 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_3
                      solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                                 <'code', ~code, ~n.23>)
                             ) @ #vk.52 )
                        case LinkClick
                        by contradiction
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.53 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash, nonce, code_challenge>)
                                 ) @ #vk.63 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_4
                      solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                                 <'code', ~code, ~n.23>)
                             ) @ #vk.52 )
                        case LinkClick
                        by contradiction
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                    next
                      case OIDCIdPIssueCode_case_1
                      solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.1, code_challenge>)
                             ) @ #vk.54 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    next
                      case OIDCIdPIssueCode_case_2
                      solve( !KU( ~signalClient ) @ #vk.52 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                  ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce.1, code_challenge>)
                               ) @ #vk.55 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_1
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.40 < #x) ∧
                               (#x < #vr.45) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_2
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.40 < #x) ∧
                               (#x < #vr.45) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_3
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.40 < #x) ∧
                               (#x < #vr.45) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_4
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.40 < #x) ∧
                               (#x < #vr.45) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    qed
                  next
                    case case_2
                    by contradiction
                  qed
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case c_tlsClientMsg
                solve( !KU( ~code.1 ) @ #vk.57 )
                  case OIDCClientCodeRedirect_case_1
                  solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                             <'code', ~code.1, ~n.23>)
                         ) @ #vk.59 )
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                             <'code', ~code.1, ~n.23>)
                         ) @ #vk.59 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.60 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.68 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                             <'code', ~code.1, ~n.23>)
                         ) @ #vk.59 )
                    case LinkClick
                    by contradiction
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.60 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.70 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                             <'code', ~code.1, ~n.23>)
                         ) @ #vk.59 )
                    case LinkClick
                    by contradiction
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~code.1 ) @ #y )
                next
                  case OIDCIdPIssueCode_case_1
                  solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce.1, code_challenge>)
                         ) @ #vk.61 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                next
                  case OIDCIdPIssueCode_case_2
                  solve( !KU( ~signalClient ) @ #vk.59 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                              ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.1, code_challenge>)
                           ) @ #vk.62 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case OIDCTokenForward_case_1
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.40 < #x) ∧
                           (#x < #vr.45) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_2
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.40 < #x) ∧
                           (#x < #vr.45) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_3
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.40 < #x) ∧
                           (#x < #vr.45) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_4
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.40 < #x) ∧
                           (#x < #vr.45) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                qed
              qed
            next
              case OIDCClientInit
              solve( (∀ #z. (!KU( ~n.8 ) @ #z) ⇒ ⊥)  ∥
                     (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
                case case_1
                solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                         <'token_req', ~code.1, ~n.6>)
                       ) @ #vk.42 )
                  case OIDCClientCodeRedirect
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.40 < #x) ∧
                           (#x < #vr.9) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    solve( !KU( ~code ) @ #vk.42 )
                      case OIDCClientCodeRedirect_case_1
                      solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                                 <'code', ~code, ~n.23>)
                             ) @ #vk.45 )
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_2
                      solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                                 <'code', ~code, ~n.23>)
                             ) @ #vk.45 )
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_3
                      solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                                 <'code', ~code, ~n.23>)
                             ) @ #vk.45 )
                        case LinkClick
                        by contradiction
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_4
                      solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                                 <'code', ~code, ~n.23>)
                             ) @ #vk.45 )
                        case LinkClick
                        by contradiction
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y )
                    next
                      case OIDCIdPIssueCode_case_1
                      solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.47 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    next
                      case OIDCIdPIssueCode_case_2
                      solve( !KU( ~signalClient ) @ #vk.45 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                                  ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce, code_challenge>)
                               ) @ #vk.48 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_1
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.40 < #x) ∧
                               (#x < #vr.44) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_2
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.40 < #x) ∧
                               (#x < #vr.44) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_3
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.40 < #x) ∧
                               (#x < #vr.44) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_4
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.40 < #x) ∧
                               (#x < #vr.44) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    qed
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case c_tlsClientMsg
                  by contradiction
                qed
              next
                case case_2
                by contradiction
              qed
            next
              case c_tlsClientMsg
              solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                       <'token_req', ~code.1, code_verifier>)
                     ) @ #vk.45 )
                case OIDCClientCodeRedirect
                solve( (∃ #x.
                         (UseCode( ~code ) @ #x)
                        ∧
                         (#vr.40 < #x) ∧
                         (#x < #vr.9) ∧
                         (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  solve( (∀ #z. (!KU( ~n.6 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
                    case case_1
                    solve( !KU( ~code ) @ #vk.45 )
                      case OIDCClientCodeRedirect_case_1
                      solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                                 <'code', ~code, ~n.23>)
                             ) @ #vk.53 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.54 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash, nonce, code_challenge>)
                                 ) @ #vk.67 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_2
                      solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                                 <'code', ~code, ~n.23>)
                             ) @ #vk.53 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.55 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                                 ) @ #vk.70 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_3
                      solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                                 <'code', ~code, ~n.23>)
                             ) @ #vk.53 )
                        case LinkClick
                        by contradiction
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.54 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash, nonce, code_challenge>)
                                 ) @ #vk.64 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_4
                      solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                                 <'code', ~code, ~n.23>)
                             ) @ #vk.53 )
                        case LinkClick
                        by contradiction
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.54 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash, nonce.1, code_challenge>)
                                 ) @ #vk.65 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y )
                    next
                      case OIDCIdPIssueCode_case_1
                      solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.1, code_challenge>)
                             ) @ #vk.55 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    next
                      case OIDCIdPIssueCode_case_2
                      solve( !KU( ~signalClient ) @ #vk.53 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                                  ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce.1, code_challenge>)
                               ) @ #vk.56 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_1
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.40 < #x) ∧
                               (#x < #vr.44) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_2
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.40 < #x) ∧
                               (#x < #vr.44) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_3
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.40 < #x) ∧
                               (#x < #vr.44) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_4
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.40 < #x) ∧
                               (#x < #vr.44) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    qed
                  next
                    case case_2
                    by contradiction
                  qed
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case c_tlsClientMsg
                solve( !KU( ~code.1 ) @ #vk.57 )
                  case OIDCClientCodeRedirect_case_1
                  solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                             <'code', ~code.1, ~n.23>)
                         ) @ #vk.59 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.60 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.73 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                             <'code', ~code.1, ~n.23>)
                         ) @ #vk.59 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.61 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                             ) @ #vk.76 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                             <'code', ~code.1, ~n.23>)
                         ) @ #vk.59 )
                    case LinkClick
                    by contradiction
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.60 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.70 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( !KU( browserForward(~sess.14, cert(~signalClient.1),
                                             <'code', ~code.1, ~n.23>)
                         ) @ #vk.59 )
                    case LinkClick
                    by contradiction
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.60 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.1, code_challenge>)
                             ) @ #vk.71 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator, $IdP, ~code.1 ) @ #y )
                next
                  case OIDCIdPIssueCode_case_1
                  solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce.1, code_challenge>)
                         ) @ #vk.61 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                next
                  case OIDCIdPIssueCode_case_2
                  solve( !KU( ~signalClient ) @ #vk.59 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                              ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.1, code_challenge>)
                           ) @ #vk.62 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case OIDCTokenForward_case_1
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.40 < #x) ∧
                           (#x < #vr.44) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_2
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.40 < #x) ∧
                           (#x < #vr.44) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_3
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.40 < #x) ∧
                           (#x < #vr.44) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_4
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.40 < #x) ∧
                           (#x < #vr.44) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                qed
              qed
            qed
          next
            case c_tlsServerMsg
            by contradiction
          qed
        qed
      next
        case OIDCTokenForward_case_2
        solve( !KU( browserForward(~sess.4, cert(~signalClient),
                                   <'code', code, ~n.6>)
               ) @ #vk.23 )
          case OIDCIdPIssueCode
          solve( (∃ #x.
                   (UseCode( ~code ) @ #x)
                  ∧
                   (#vr.29 < #x) ∧
                   (#x < #vr.9) ∧
                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                 (∃ signalClient domain #x #y.
                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                   (CompromisedDomain( signalClient, domain ) @ #y)) )
            case case_1
            solve( !Domain( $IdP, ~IdPKey.1 ) ▶₁ #x.1 )
              case TLSSetup
              solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey),
                                       <'oidc_req', hash.2, ~n.4, code_challenge.1>)
                     ) @ #vk.39 )
                case OIDCAdversaryInit
                solve( !KU( tlsClientMsg(~sess.3, cert(~IdPKey.1),
                                         <'token_req', ~code, code_verifier>)
                       ) @ #vk.41 )
                  case OIDCClientCodeRedirect_case_1
                  solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                    case case_1
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.42 )
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~code ) @ #vk.58 )
                          case OIDCClientCodeRedirect_case_1
                          solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                     <'code', ~code, ~n.30>)
                                 ) @ #vk.60 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_2
                          solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                     <'code', ~code, ~n.30>)
                                 ) @ #vk.60 )
                            case OIDCIdPIssueCode
                            solve( !KU( ~IdPKey ) @ #vk.60 )
                              case DomainCompromise
                              by contradiction
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                            next
                              case OIDCIdPIssueCode
                              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                       <'oidc_req', hash.1, nonce.1, code_challenge
                                                       >)
                                     ) @ #vk.63 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            qed
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_3
                          solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                     <'code', ~code, ~n.30>)
                                 ) @ #vk.60 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_4
                          solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                     <'code', ~code, ~n.30>)
                                 ) @ #vk.60 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                        next
                          case OIDCIdPIssueCode_case_1
                          solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.62 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case OIDCIdPIssueCode_case_2
                          solve( !KU( ~signalClient ) @ #vk.60 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                      ) @ #y )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                                   ) @ #vk.63 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCTokenForward_case_1
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.54) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_2
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.54) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_3
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.54) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_4
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.54) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                      case TLSSetup
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.14>)
                             ) @ #vk.42 )
                        case c_browserForward
                        solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                s256(~n.5)
                               ) ▶₃ #x.1 )
                          case OIDCIdPIssueCode
                          by contradiction
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                    case case_1
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.42 )
                      case OIDCIdPIssueCode
                      solve( St_OIDCIdP_Code( $A, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( tlsServerMsg(~sessPost, ~IdPKey,
                                                 <'token', 
                                                  <$A, username, nonce, 
                                                   h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>, 
                                                  sign(<$A, username, nonce, 
                                                        h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>,
                                                       x)
                                                 >)
                               ) @ #vk.24 )
                          case OIDCIdPTokenIssue
                          solve( !KU( tlsClientMsg(~sess.10, cert(~IdPKey),
                                                   <'oidc_req', 
                                                    h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2), nonce, 
                                                    s256(code_verifier)>)
                                 ) @ #vk.44 )
                            case OIDCAdversaryInit
                            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                     <'token_req', ~code.1, code_verifier>)
                                   ) @ #vk.46 )
                              case OIDCClientCodeRedirect
                              solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey),
                                                       <'login', $Username, pw>)
                                     ) @ #vk.38 )
                                case OIDCClientLogin
                                by contradiction
                              next
                                case c_tlsClientMsg
                                solve( !KU( s256(~n.6) ) @ #vk.34 )
                                  case OIDCClientInit_case_1
                                  solve( !KU( ~IdPKey ) @ #vk.46 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.49 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case OIDCClientInit_case_2
                                  solve( !KU( ~sess.2 ) @ #vk.42 )
                                    case OIDCAdversaryInit
                                    solve( !KU( ~IdPKey ) @ #vk.46 )
                                      case DomainCompromise
                                      by contradiction
                                    next
                                      case OIDCClientLogin
                                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                                ) @ #y )
                                    next
                                      case OIDCIdPIssueCode
                                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                               <'oidc_req', hash, nonce, 
                                                                code_challenge>)
                                             ) @ #vk.49 )
                                        case c_tlsClientMsg
                                        by contradiction
                                      qed
                                    qed
                                  next
                                    case OIDCClientLogin
                                    solve( !KU( ~IdPKey ) @ #vk.47 )
                                      case DomainCompromise
                                      by contradiction
                                    next
                                      case OIDCClientLogin
                                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                                ) @ #y )
                                    next
                                      case OIDCIdPIssueCode
                                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                               <'oidc_req', hash, nonce, 
                                                                code_challenge>)
                                             ) @ #vk.51 )
                                        case c_tlsClientMsg
                                        by contradiction
                                      qed
                                    qed
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( ~signalClient.1 ) @ #vk.47 )
                                      case DomainCompromise
                                      solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                                               <'oidc_req', hash, nonce, 
                                                                code_challenge>)
                                             ) @ #vk.48 )
                                        case OIDCAdversaryInit
                                        by contradiction
                                      next
                                        case c_tlsClientMsg
                                        by contradiction
                                      qed
                                    next
                                      case OIDCClientLogin
                                      by solve( GenBrowserSession( $Initiator.1, $IdP.1,
                                                                   ~signalClient.1
                                                ) @ #y )
                                    next
                                      case OIDCIdPIssueCode
                                      solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                                               <'oidc_req', hash.1, nonce.1, 
                                                                code_challenge.1>)
                                             ) @ #vk.52 )
                                        case c_tlsClientMsg
                                        by contradiction
                                      qed
                                    qed
                                  qed
                                next
                                  case c_s256
                                  by contradiction
                                qed
                              qed
                            next
                              case c_tlsClientMsg
                              solve( !KU( ~code.1 ) @ #vk.57 )
                                case OIDCClientCodeRedirect_case_1
                                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.16>)
                                       ) @ #vk.59 )
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_2
                                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.16>)
                                       ) @ #vk.59 )
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.60 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.1, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.68 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_3
                                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.16>)
                                       ) @ #vk.59 )
                                  case LinkClick
                                  by contradiction
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.60 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y.1 )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.1, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.70 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_4
                                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.16>)
                                       ) @ #vk.59 )
                                  case LinkClick
                                  by contradiction
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientLogin
                                by solve( GenBrowserSession( $Initiator.2, $IdP, ~code.1 ) @ #y )
                              next
                                case OIDCIdPIssueCode_case_1
                                solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                                         <'oidc_req', hash.1, nonce.1, 
                                                          code_challenge>)
                                       ) @ #vk.61 )
                                  case c_tlsClientMsg
                                  by contradiction
                                qed
                              next
                                case OIDCIdPIssueCode_case_2
                                solve( !KU( ~signalClient ) @ #vk.59 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~signalClient
                                            ) @ #y )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce.1, 
                                                            code_challenge>)
                                         ) @ #vk.62 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case OIDCTokenForward_case_1
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.35 < #x) ∧
                                         (#x < #vr.40) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_2
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.35 < #x) ∧
                                         (#x < #vr.40) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_3
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.35 < #x) ∧
                                         (#x < #vr.40) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_4
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.35 < #x) ∧
                                         (#x < #vr.40) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              qed
                            qed
                          next
                            case OIDCClientInit
                            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                     <'token_req', ~code.1, ~n.6>)
                                   ) @ #vk.42 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          next
                            case c_tlsClientMsg
                            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                     <'token_req', ~code.1, code_verifier>)
                                   ) @ #vk.45 )
                              case c_tlsClientMsg
                              solve( !KU( ~code.1 ) @ #vk.57 )
                                case OIDCClientCodeRedirect_case_1
                                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.16>)
                                       ) @ #vk.59 )
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.60 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.1, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.73 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_2
                                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.16>)
                                       ) @ #vk.59 )
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.61 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.2, nonce.1, 
                                                              code_challenge.1>)
                                           ) @ #vk.76 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_3
                                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.16>)
                                       ) @ #vk.59 )
                                  case LinkClick
                                  by contradiction
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.60 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y.1 )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.1, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.70 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_4
                                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.16>)
                                       ) @ #vk.59 )
                                  case LinkClick
                                  by contradiction
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.60 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.1, nonce.1, 
                                                              code_challenge>)
                                           ) @ #vk.71 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientLogin
                                by solve( GenBrowserSession( $Initiator.1, $IdP, ~code.1 ) @ #y )
                              next
                                case OIDCIdPIssueCode_case_1
                                solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                                         <'oidc_req', hash.1, nonce.1, 
                                                          code_challenge>)
                                       ) @ #vk.61 )
                                  case c_tlsClientMsg
                                  by contradiction
                                qed
                              next
                                case OIDCIdPIssueCode_case_2
                                solve( !KU( ~signalClient ) @ #vk.59 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                            ) @ #y )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce.1, 
                                                            code_challenge>)
                                         ) @ #vk.62 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case OIDCTokenForward_case_1
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.35 < #x) ∧
                                         (#x < #vr.39) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_2
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.35 < #x) ∧
                                         (#x < #vr.39) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_3
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.35 < #x) ∧
                                         (#x < #vr.39) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_4
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.35 < #x) ∧
                                         (#x < #vr.39) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              qed
                            qed
                          qed
                        next
                          case c_tlsServerMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~code ) @ #vk.61 )
                          case OIDCClientCodeRedirect_case_1
                          solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                     <'code', ~code, ~n.22>)
                                 ) @ #vk.63 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_2
                          solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                     <'code', ~code, ~n.22>)
                                 ) @ #vk.63 )
                            case OIDCIdPIssueCode
                            solve( !KU( ~IdPKey ) @ #vk.63 )
                              case DomainCompromise
                              by contradiction
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                            next
                              case OIDCIdPIssueCode
                              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                       <'oidc_req', hash.2, nonce.2, 
                                                        code_challenge.1>)
                                     ) @ #vk.66 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            qed
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_3
                          solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                     <'code', ~code, ~n.22>)
                                 ) @ #vk.63 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_4
                          solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                     <'code', ~code, ~n.22>)
                                 ) @ #vk.63 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                        next
                          case OIDCIdPIssueCode_case_1
                          solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                   <'oidc_req', hash.2, nonce.2, code_challenge.1>)
                                 ) @ #vk.65 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case OIDCIdPIssueCode_case_2
                          solve( !KU( ~signalClient ) @ #vk.63 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                      ) @ #y )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                     <'oidc_req', hash.2, nonce.2, code_challenge.1
                                                     >)
                                   ) @ #vk.66 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCTokenForward_case_1
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.45) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_2
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.45) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_3
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.45) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_4
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.45) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                      case TLSSetup
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.14>)
                             ) @ #vk.42 )
                        case OIDCIdPIssueCode
                        by contradiction
                      next
                        case c_browserForward
                        solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                s256(~n.5)
                               ) ▶₃ #x.1 )
                          case OIDCIdPIssueCode
                          by contradiction
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                    case case_1
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.42 )
                      case LinkClick
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.6)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~code ) @ #vk.51 )
                          case OIDCClientCodeRedirect_case_1
                          solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.53 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_2
                          solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.53 )
                            case OIDCIdPIssueCode
                            solve( !KU( ~IdPKey ) @ #vk.53 )
                              case DomainCompromise
                              by contradiction
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                            next
                              case OIDCIdPIssueCode
                              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                       <'oidc_req', hash.1, nonce.1, code_challenge
                                                       >)
                                     ) @ #vk.56 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            qed
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_3
                          solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.53 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_4
                          solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.53 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode_case_1
                          solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.55 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case OIDCIdPIssueCode_case_2
                          solve( !KU( ~IdPKey ) @ #vk.53 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                                   ) @ #vk.56 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCTokenForward_case_1
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.28 < #x) ∧
                                   (#x < #vr.46) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_2
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.28 < #x) ∧
                                   (#x < #vr.46) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_3
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.28 < #x) ∧
                                   (#x < #vr.46) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_4
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.28 < #x) ∧
                                   (#x < #vr.46) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        qed
                      qed
                    next
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~code ) @ #vk.55 )
                          case OIDCClientCodeRedirect_case_1
                          solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.57 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_2
                          solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.57 )
                            case OIDCIdPIssueCode
                            solve( !KU( ~IdPKey ) @ #vk.57 )
                              case DomainCompromise
                              by contradiction
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                            next
                              case OIDCIdPIssueCode
                              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                       <'oidc_req', hash.1, nonce.1, code_challenge
                                                       >)
                                     ) @ #vk.60 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            qed
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_3
                          solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.57 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_4
                          solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.57 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode_case_1
                          solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.59 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case OIDCIdPIssueCode_case_2
                          solve( !KU( ~signalClient ) @ #vk.57 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                      ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                                   ) @ #vk.60 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCTokenForward_case_1
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.47) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_2
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.47) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_3
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.47) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_4
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.47) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                      case TLSSetup
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.14>)
                             ) @ #vk.42 )
                        case LinkClick
                        solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                s256(~n.6)
                               ) ▶₃ #x.1 )
                          case OIDCIdPIssueCode
                          by contradiction
                        qed
                      next
                        case c_browserForward
                        solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                s256(~n.5)
                               ) ▶₃ #x.1 )
                          case OIDCIdPIssueCode
                          by contradiction
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                    case case_1
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.42 )
                      case LinkClick
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~code ) @ #vk.44 )
                          case OIDCClientCodeRedirect_case_1
                          solve( !KU( browserForward(~sess.16, cert(~signalClient),
                                                     <'code', ~code, ~n.22>)
                                 ) @ #vk.51 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_2
                          solve( !KU( browserForward(~sess.16, cert(~signalClient),
                                                     <'code', ~code, ~n.22>)
                                 ) @ #vk.51 )
                            case OIDCIdPIssueCode
                            solve( !KU( ~IdPKey ) @ #vk.51 )
                              case DomainCompromise
                              by contradiction
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                            next
                              case OIDCIdPIssueCode
                              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                       <'oidc_req', hash.1, nonce.1, code_challenge
                                                       >)
                                     ) @ #vk.54 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            qed
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_3
                          solve( !KU( browserForward(~sess.16, cert(~signalClient),
                                                     <'code', ~code, ~n.22>)
                                 ) @ #vk.51 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_4
                          solve( !KU( browserForward(~sess.16, cert(~signalClient),
                                                     <'code', ~code, ~n.22>)
                                 ) @ #vk.51 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                        next
                          case OIDCIdPIssueCode_case_1
                          solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.53 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case OIDCIdPIssueCode_case_2
                          solve( !KU( ~IdPKey ) @ #vk.51 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                                   ) @ #vk.54 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCTokenForward_case_1
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.28 < #x) ∧
                                   (#x < #vr.44) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_2
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.28 < #x) ∧
                                   (#x < #vr.44) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_3
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.28 < #x) ∧
                                   (#x < #vr.44) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_4
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.28 < #x) ∧
                                   (#x < #vr.44) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        qed
                      qed
                    next
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~code ) @ #vk.56 )
                          case OIDCClientCodeRedirect_case_1
                          solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                     <'code', ~code, ~n.22>)
                                 ) @ #vk.58 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_2
                          solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                     <'code', ~code, ~n.22>)
                                 ) @ #vk.58 )
                            case OIDCIdPIssueCode
                            solve( !KU( ~IdPKey ) @ #vk.58 )
                              case DomainCompromise
                              by contradiction
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                            next
                              case OIDCIdPIssueCode
                              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                       <'oidc_req', hash.1, nonce.2, code_challenge
                                                       >)
                                     ) @ #vk.61 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            qed
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_3
                          solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                     <'code', ~code, ~n.22>)
                                 ) @ #vk.58 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_4
                          solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                     <'code', ~code, ~n.22>)
                                 ) @ #vk.58 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                        next
                          case OIDCIdPIssueCode_case_1
                          solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.2, code_challenge>)
                                 ) @ #vk.60 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case OIDCIdPIssueCode_case_2
                          solve( !KU( ~signalClient ) @ #vk.58 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                      ) @ #y )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.2, code_challenge>)
                                   ) @ #vk.61 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCTokenForward_case_1
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.45) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_2
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.45) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_3
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.45) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_4
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.45) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                      case TLSSetup
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.14>)
                             ) @ #vk.42 )
                        case LinkClick
                        solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                s256(~n.5)
                               ) ▶₃ #x.1 )
                          case OIDCIdPIssueCode
                          by contradiction
                        qed
                      next
                        case c_browserForward
                        solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                s256(~n.5)
                               ) ▶₃ #x.1 )
                          case OIDCIdPIssueCode
                          by contradiction
                        qed
                      qed
                    qed
                  qed
                next
                  case c_tlsClientMsg
                  solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                          s256(code_verifier)
                         ) ▶₃ #x.1 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~code ) @ #vk.47 )
                      case OIDCClientCodeRedirect_case_1
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.14>)
                             ) @ #vk.49 )
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_2
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.14>)
                             ) @ #vk.49 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.49 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.52 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_3
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.14>)
                             ) @ #vk.49 )
                        case LinkClick
                        by contradiction
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_4
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.14>)
                             ) @ #vk.49 )
                        case LinkClick
                        by contradiction
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y )
                    next
                      case OIDCIdPIssueCode_case_1
                      solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.1, code_challenge>)
                             ) @ #vk.51 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    next
                      case OIDCIdPIssueCode_case_2
                      solve( !KU( ~signalClient ) @ #vk.49 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                                  ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge>)
                               ) @ #vk.52 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_1
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.29 < #x) ∧
                               (#x < #vr.33) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_2
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.29 < #x) ∧
                               (#x < #vr.33) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_3
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.29 < #x) ∧
                               (#x < #vr.33) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_4
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.29 < #x) ∧
                               (#x < #vr.33) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    qed
                  qed
                qed
              next
                case c_tlsClientMsg
                solve( !KU( tlsClientMsg(~sess.3, cert(~IdPKey.1),
                                         <'token_req', ~code, code_verifier>)
                       ) @ #vk.41 )
                  case OIDCClientCodeRedirect_case_1
                  solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                    case case_1
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.51 )
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~code ) @ #vk.67 )
                          case OIDCClientCodeRedirect_case_1
                          solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                     <'code', ~code, ~n.30>)
                                 ) @ #vk.69 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_2
                          solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                     <'code', ~code, ~n.30>)
                                 ) @ #vk.69 )
                            case OIDCIdPIssueCode
                            solve( !KU( ~IdPKey ) @ #vk.69 )
                              case DomainCompromise
                              by contradiction
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                            next
                              case OIDCIdPIssueCode
                              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                       <'oidc_req', hash.2, nonce.2, 
                                                        code_challenge.1>)
                                     ) @ #vk.72 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            qed
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_3
                          solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                     <'code', ~code, ~n.30>)
                                 ) @ #vk.69 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_4
                          solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                     <'code', ~code, ~n.30>)
                                 ) @ #vk.69 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                        next
                          case OIDCIdPIssueCode_case_1
                          solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                   <'oidc_req', hash.2, nonce.2, code_challenge.1>)
                                 ) @ #vk.71 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case OIDCIdPIssueCode_case_2
                          solve( !KU( ~signalClient ) @ #vk.69 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                      ) @ #y )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                     <'oidc_req', hash.2, nonce.2, code_challenge.1
                                                     >)
                                   ) @ #vk.72 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCTokenForward_case_1
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.54) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_2
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.54) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_3
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.54) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_4
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.54) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                      case TLSSetup
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.14>)
                             ) @ #vk.51 )
                        case c_browserForward
                        solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                s256(~n.5)
                               ) ▶₃ #x.1 )
                          case OIDCIdPIssueCode
                          by contradiction
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                    case case_1
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.51 )
                      case OIDCIdPIssueCode
                      solve( St_OIDCIdP_Code( $A, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( tlsServerMsg(~sessPost, ~IdPKey,
                                                 <'token', 
                                                  <$A, username, nonce, 
                                                   h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>, 
                                                  sign(<$A, username, nonce, 
                                                        h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>,
                                                       x)
                                                 >)
                               ) @ #vk.24 )
                          case OIDCIdPTokenIssue
                          solve( !KU( tlsClientMsg(~sess.10, cert(~IdPKey),
                                                   <'oidc_req', 
                                                    h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2), nonce, 
                                                    s256(code_verifier)>)
                                 ) @ #vk.53 )
                            case OIDCAdversaryInit
                            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                     <'token_req', ~code.1, code_verifier>)
                                   ) @ #vk.55 )
                              case c_tlsClientMsg
                              solve( !KU( ~code.1 ) @ #vk.65 )
                                case OIDCClientCodeRedirect_case_1
                                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.16>)
                                       ) @ #vk.67 )
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_2
                                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.16>)
                                       ) @ #vk.67 )
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.68 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.2, nonce.1, 
                                                              code_challenge.1>)
                                           ) @ #vk.76 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_3
                                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.16>)
                                       ) @ #vk.67 )
                                  case LinkClick
                                  by contradiction
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.68 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y.1 )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.2, nonce.1, 
                                                              code_challenge.1>)
                                           ) @ #vk.78 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_4
                                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.16>)
                                       ) @ #vk.67 )
                                  case LinkClick
                                  by contradiction
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientLogin
                                by solve( GenBrowserSession( $Initiator.2, $IdP, ~code.1 ) @ #y )
                              next
                                case OIDCIdPIssueCode_case_1
                                solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                                         <'oidc_req', hash.2, nonce.2, 
                                                          code_challenge.1>)
                                       ) @ #vk.69 )
                                  case c_tlsClientMsg
                                  by contradiction
                                qed
                              next
                                case OIDCIdPIssueCode_case_2
                                solve( !KU( ~signalClient ) @ #vk.67 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~signalClient
                                            ) @ #y )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                           <'oidc_req', hash.2, nonce.2, 
                                                            code_challenge.1>)
                                         ) @ #vk.70 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case OIDCTokenForward_case_1
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.35 < #x) ∧
                                         (#x < #vr.40) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_2
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.35 < #x) ∧
                                         (#x < #vr.40) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_3
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.35 < #x) ∧
                                         (#x < #vr.40) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_4
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.35 < #x) ∧
                                         (#x < #vr.40) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              qed
                            qed
                          next
                            case OIDCClientInit
                            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                     <'token_req', ~code.1, ~n.6>)
                                   ) @ #vk.51 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          next
                            case c_tlsClientMsg
                            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                     <'token_req', ~code.1, code_verifier>)
                                   ) @ #vk.55 )
                              case OIDCClientCodeRedirect
                              solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey),
                                                       <'login', $Username, pw>)
                                     ) @ #vk.43 )
                                case OIDCClientLogin
                                by contradiction
                              next
                                case c_tlsClientMsg
                                solve( !KU( s256(~n.6) ) @ #vk.49 )
                                  case OIDCClientInit_case_1
                                  solve( !KU( ~IdPKey ) @ #vk.53 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.1, nonce.1, 
                                                              code_challenge.1>)
                                           ) @ #vk.56 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case OIDCClientInit_case_2
                                  solve( !KU( ~sess.2 ) @ #vk.48 )
                                    case OIDCAdversaryInit
                                    solve( !KU( ~IdPKey ) @ #vk.53 )
                                      case DomainCompromise
                                      by contradiction
                                    next
                                      case OIDCClientLogin
                                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                                ) @ #y )
                                    next
                                      case OIDCIdPIssueCode
                                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                               <'oidc_req', hash.1, nonce.1, 
                                                                code_challenge.1>)
                                             ) @ #vk.56 )
                                        case c_tlsClientMsg
                                        by contradiction
                                      qed
                                    qed
                                  next
                                    case OIDCClientLogin
                                    solve( !KU( ~IdPKey ) @ #vk.54 )
                                      case DomainCompromise
                                      by contradiction
                                    next
                                      case OIDCClientLogin
                                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                                ) @ #y )
                                    next
                                      case OIDCIdPIssueCode
                                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                               <'oidc_req', hash.1, nonce.1, 
                                                                code_challenge.1>)
                                             ) @ #vk.58 )
                                        case c_tlsClientMsg
                                        by contradiction
                                      qed
                                    qed
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( ~signalClient.1 ) @ #vk.54 )
                                      case DomainCompromise
                                      solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                                               <'oidc_req', hash.1, nonce, 
                                                                code_challenge.1>)
                                             ) @ #vk.55 )
                                        case OIDCAdversaryInit
                                        by contradiction
                                      next
                                        case c_tlsClientMsg
                                        by contradiction
                                      qed
                                    next
                                      case OIDCClientLogin
                                      by solve( GenBrowserSession( $Initiator.1, $IdP.1,
                                                                   ~signalClient.1
                                                ) @ #y )
                                    next
                                      case OIDCIdPIssueCode
                                      solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                                               <'oidc_req', hash.2, nonce.2, 
                                                                code_challenge.2>)
                                             ) @ #vk.59 )
                                        case c_tlsClientMsg
                                        by contradiction
                                      qed
                                    qed
                                  qed
                                next
                                  case c_s256
                                  by contradiction
                                qed
                              qed
                            next
                              case c_tlsClientMsg
                              solve( !KU( ~code.1 ) @ #vk.64 )
                                case OIDCClientCodeRedirect_case_1
                                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.16>)
                                       ) @ #vk.66 )
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.67 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.2, nonce.1, 
                                                              code_challenge.1>)
                                           ) @ #vk.80 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_2
                                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.16>)
                                       ) @ #vk.66 )
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.68 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.3, nonce.2, 
                                                              code_challenge.2>)
                                           ) @ #vk.83 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_3
                                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.16>)
                                       ) @ #vk.66 )
                                  case LinkClick
                                  by contradiction
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.67 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y.1 )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.2, nonce.1, 
                                                              code_challenge.1>)
                                           ) @ #vk.77 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_4
                                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.16>)
                                       ) @ #vk.66 )
                                  case LinkClick
                                  by contradiction
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.67 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.2, nonce.2, 
                                                              code_challenge.1>)
                                           ) @ #vk.78 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientLogin
                                by solve( GenBrowserSession( $Initiator.1, $IdP, ~code.1 ) @ #y )
                              next
                                case OIDCIdPIssueCode_case_1
                                solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                                         <'oidc_req', hash.2, nonce.2, 
                                                          code_challenge.1>)
                                       ) @ #vk.68 )
                                  case c_tlsClientMsg
                                  by contradiction
                                qed
                              next
                                case OIDCIdPIssueCode_case_2
                                solve( !KU( ~signalClient ) @ #vk.66 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                            ) @ #y )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                           <'oidc_req', hash.2, nonce.2, 
                                                            code_challenge.1>)
                                         ) @ #vk.69 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case OIDCTokenForward_case_1
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.35 < #x) ∧
                                         (#x < #vr.39) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_2
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.35 < #x) ∧
                                         (#x < #vr.39) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_3
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.35 < #x) ∧
                                         (#x < #vr.39) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_4
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.35 < #x) ∧
                                         (#x < #vr.39) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              qed
                            qed
                          qed
                        next
                          case c_tlsServerMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~code ) @ #vk.70 )
                          case OIDCClientCodeRedirect_case_1
                          solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                     <'code', ~code, ~n.22>)
                                 ) @ #vk.72 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_2
                          solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                     <'code', ~code, ~n.22>)
                                 ) @ #vk.72 )
                            case OIDCIdPIssueCode
                            solve( !KU( ~IdPKey ) @ #vk.72 )
                              case DomainCompromise
                              by contradiction
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                            next
                              case OIDCIdPIssueCode
                              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                       <'oidc_req', hash.3, nonce.3, 
                                                        code_challenge.2>)
                                     ) @ #vk.75 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            qed
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_3
                          solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                     <'code', ~code, ~n.22>)
                                 ) @ #vk.72 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_4
                          solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                     <'code', ~code, ~n.22>)
                                 ) @ #vk.72 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                        next
                          case OIDCIdPIssueCode_case_1
                          solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                   <'oidc_req', hash.3, nonce.3, code_challenge.2>)
                                 ) @ #vk.74 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case OIDCIdPIssueCode_case_2
                          solve( !KU( ~signalClient ) @ #vk.72 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                      ) @ #y )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                     <'oidc_req', hash.3, nonce.3, code_challenge.2
                                                     >)
                                   ) @ #vk.75 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCTokenForward_case_1
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.45) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_2
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.45) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_3
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.45) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_4
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.45) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                      case TLSSetup
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.14>)
                             ) @ #vk.51 )
                        case OIDCIdPIssueCode
                        by contradiction
                      next
                        case c_browserForward
                        solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                s256(~n.5)
                               ) ▶₃ #x.1 )
                          case OIDCIdPIssueCode
                          by contradiction
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                    case case_1
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.51 )
                      case LinkClick
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.6)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~code ) @ #vk.60 )
                          case OIDCClientCodeRedirect_case_1
                          solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.62 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_2
                          solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.62 )
                            case OIDCIdPIssueCode
                            solve( !KU( ~IdPKey ) @ #vk.62 )
                              case DomainCompromise
                              by contradiction
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                            next
                              case OIDCIdPIssueCode
                              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                       <'oidc_req', hash.2, nonce.2, 
                                                        code_challenge.1>)
                                     ) @ #vk.65 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            qed
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_3
                          solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.62 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_4
                          solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.62 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode_case_1
                          solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                   <'oidc_req', hash.2, nonce.2, code_challenge.1>)
                                 ) @ #vk.64 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case OIDCIdPIssueCode_case_2
                          solve( !KU( ~IdPKey ) @ #vk.62 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.2, nonce.2, code_challenge.1
                                                     >)
                                   ) @ #vk.65 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCTokenForward_case_1
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.28 < #x) ∧
                                   (#x < #vr.46) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_2
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.28 < #x) ∧
                                   (#x < #vr.46) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_3
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.28 < #x) ∧
                                   (#x < #vr.46) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_4
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.28 < #x) ∧
                                   (#x < #vr.46) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        qed
                      qed
                    next
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~code ) @ #vk.64 )
                          case OIDCClientCodeRedirect_case_1
                          solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.66 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_2
                          solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.66 )
                            case OIDCIdPIssueCode
                            solve( !KU( ~IdPKey ) @ #vk.66 )
                              case DomainCompromise
                              by contradiction
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                            next
                              case OIDCIdPIssueCode
                              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                       <'oidc_req', hash.2, nonce.2, 
                                                        code_challenge.1>)
                                     ) @ #vk.69 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            qed
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_3
                          solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.66 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_4
                          solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.66 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode_case_1
                          solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                   <'oidc_req', hash.2, nonce.2, code_challenge.1>)
                                 ) @ #vk.68 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case OIDCIdPIssueCode_case_2
                          solve( !KU( ~signalClient ) @ #vk.66 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                      ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                     <'oidc_req', hash.2, nonce.2, code_challenge.1
                                                     >)
                                   ) @ #vk.69 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCTokenForward_case_1
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.47) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_2
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.47) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_3
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.47) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_4
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.47) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                      case TLSSetup
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.14>)
                             ) @ #vk.51 )
                        case LinkClick
                        solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                s256(~n.6)
                               ) ▶₃ #x.1 )
                          case OIDCIdPIssueCode
                          by contradiction
                        qed
                      next
                        case c_browserForward
                        solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                s256(~n.5)
                               ) ▶₃ #x.1 )
                          case OIDCIdPIssueCode
                          by contradiction
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                    case case_1
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.51 )
                      case LinkClick
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~code ) @ #vk.53 )
                          case OIDCClientCodeRedirect_case_1
                          solve( !KU( browserForward(~sess.16, cert(~signalClient),
                                                     <'code', ~code, ~n.22>)
                                 ) @ #vk.60 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_2
                          solve( !KU( browserForward(~sess.16, cert(~signalClient),
                                                     <'code', ~code, ~n.22>)
                                 ) @ #vk.60 )
                            case OIDCIdPIssueCode
                            solve( !KU( ~IdPKey ) @ #vk.60 )
                              case DomainCompromise
                              by contradiction
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                            next
                              case OIDCIdPIssueCode
                              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                       <'oidc_req', hash.2, nonce.2, 
                                                        code_challenge.1>)
                                     ) @ #vk.63 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            qed
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_3
                          solve( !KU( browserForward(~sess.16, cert(~signalClient),
                                                     <'code', ~code, ~n.22>)
                                 ) @ #vk.60 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_4
                          solve( !KU( browserForward(~sess.16, cert(~signalClient),
                                                     <'code', ~code, ~n.22>)
                                 ) @ #vk.60 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                        next
                          case OIDCIdPIssueCode_case_1
                          solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                   <'oidc_req', hash.2, nonce.2, code_challenge.1>)
                                 ) @ #vk.62 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case OIDCIdPIssueCode_case_2
                          solve( !KU( ~IdPKey ) @ #vk.60 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.2, nonce.2, code_challenge.1
                                                     >)
                                   ) @ #vk.63 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCTokenForward_case_1
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.28 < #x) ∧
                                   (#x < #vr.44) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_2
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.28 < #x) ∧
                                   (#x < #vr.44) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_3
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.28 < #x) ∧
                                   (#x < #vr.44) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_4
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.28 < #x) ∧
                                   (#x < #vr.44) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        qed
                      qed
                    next
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~code ) @ #vk.65 )
                          case OIDCClientCodeRedirect_case_1
                          solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                     <'code', ~code, ~n.22>)
                                 ) @ #vk.67 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_2
                          solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                     <'code', ~code, ~n.22>)
                                 ) @ #vk.67 )
                            case OIDCIdPIssueCode
                            solve( !KU( ~IdPKey ) @ #vk.67 )
                              case DomainCompromise
                              by contradiction
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                            next
                              case OIDCIdPIssueCode
                              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                       <'oidc_req', hash.2, nonce.3, 
                                                        code_challenge.1>)
                                     ) @ #vk.70 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            qed
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_3
                          solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                     <'code', ~code, ~n.22>)
                                 ) @ #vk.67 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_4
                          solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                     <'code', ~code, ~n.22>)
                                 ) @ #vk.67 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                        next
                          case OIDCIdPIssueCode_case_1
                          solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                   <'oidc_req', hash.2, nonce.3, code_challenge.1>)
                                 ) @ #vk.69 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case OIDCIdPIssueCode_case_2
                          solve( !KU( ~signalClient ) @ #vk.67 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                      ) @ #y )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                     <'oidc_req', hash.2, nonce.3, code_challenge.1
                                                     >)
                                   ) @ #vk.70 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCTokenForward_case_1
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.45) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_2
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.45) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_3
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.45) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_4
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.45) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                      case TLSSetup
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.14>)
                             ) @ #vk.51 )
                        case LinkClick
                        solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                s256(~n.5)
                               ) ▶₃ #x.1 )
                          case OIDCIdPIssueCode
                          by contradiction
                        qed
                      next
                        case c_browserForward
                        solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                s256(~n.5)
                               ) ▶₃ #x.1 )
                          case OIDCIdPIssueCode
                          by contradiction
                        qed
                      qed
                    qed
                  qed
                next
                  case c_tlsClientMsg
                  solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                          s256(code_verifier)
                         ) ▶₃ #x.1 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~code ) @ #vk.55 )
                      case OIDCClientCodeRedirect_case_1
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.14>)
                             ) @ #vk.57 )
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_2
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.14>)
                             ) @ #vk.57 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.57 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash.2, nonce.2, code_challenge.1>)
                                 ) @ #vk.60 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_3
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.14>)
                             ) @ #vk.57 )
                        case LinkClick
                        by contradiction
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_4
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.14>)
                             ) @ #vk.57 )
                        case LinkClick
                        by contradiction
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y )
                    next
                      case OIDCIdPIssueCode_case_1
                      solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                               <'oidc_req', hash.2, nonce.2, code_challenge.1>)
                             ) @ #vk.59 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    next
                      case OIDCIdPIssueCode_case_2
                      solve( !KU( ~signalClient ) @ #vk.57 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                                  ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                 <'oidc_req', hash.2, nonce.2, code_challenge.1>)
                               ) @ #vk.60 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_1
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.29 < #x) ∧
                               (#x < #vr.33) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_2
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.29 < #x) ∧
                               (#x < #vr.33) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_3
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.29 < #x) ∧
                               (#x < #vr.33) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_4
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.29 < #x) ∧
                               (#x < #vr.33) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case case_2
            by contradiction
          next
            case case_3
            by contradiction
          qed
        next
          case c_browserForward
          solve( !KU( tlsServerMsg(~sessPost, ~IdPKey,
                                   <'token', 
                                    <$A, username, nonce, h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>, 
                                    sign(<$A, username, nonce, 
                                          h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>,
                                         x)
                                   >)
                 ) @ #vk.22 )
            case OIDCIdPTokenIssue
            solve( !KU( tlsClientMsg(~sess.9, cert(~IdPKey),
                                     <'oidc_req', h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2), nonce, 
                                      s256(code_verifier)>)
                   ) @ #vk.47 )
              case OIDCAdversaryInit
              solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                       <'token_req', ~code.1, code_verifier>)
                     ) @ #vk.49 )
                case OIDCClientCodeRedirect
                solve( (∃ #x.
                         (UseCode( ~code ) @ #x)
                        ∧
                         (#vr.31 < #x) ∧
                         (#x < #vr.9) ∧
                         (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  solve( (∀ #z. (!KU( ~n.6 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
                    case case_1
                    solve( !KU( ~code ) @ #vk.49 )
                      case OIDCClientCodeRedirect_case_1
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.55 )
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_2
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.55 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.56 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                                 ) @ #vk.64 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_3
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.55 )
                        case LinkClick
                        by contradiction
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.56 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                                 ) @ #vk.66 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_4
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.55 )
                        case LinkClick
                        by contradiction
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                    next
                      case OIDCIdPIssueCode_case_1
                      solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                             ) @ #vk.57 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    next
                      case OIDCIdPIssueCode_case_2
                      solve( !KU( ~signalClient ) @ #vk.55 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                  ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                               ) @ #vk.58 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_1
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.31 < #x) ∧
                               (#x < #vr.36) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_2
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.31 < #x) ∧
                               (#x < #vr.36) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_3
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.31 < #x) ∧
                               (#x < #vr.36) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_4
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.31 < #x) ∧
                               (#x < #vr.36) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    qed
                  next
                    case case_2
                    by contradiction
                  qed
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case c_tlsClientMsg
                solve( !KU( ~code.1 ) @ #vk.60 )
                  case OIDCClientCodeRedirect_case_1
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code.1, ~n.15>)
                         ) @ #vk.62 )
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code.1, ~n.15>)
                         ) @ #vk.62 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.63 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                             ) @ #vk.71 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code.1, ~n.15>)
                         ) @ #vk.62 )
                    case LinkClick
                    by contradiction
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.63 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                             ) @ #vk.73 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code.1, ~n.15>)
                         ) @ #vk.62 )
                    case LinkClick
                    by contradiction
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~code.1 ) @ #y )
                next
                  case OIDCIdPIssueCode_case_1
                  solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                           <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                         ) @ #vk.64 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                next
                  case OIDCIdPIssueCode_case_2
                  solve( !KU( ~signalClient ) @ #vk.62 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                              ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                             <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                           ) @ #vk.65 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case OIDCTokenForward_case_1
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.31 < #x) ∧
                           (#x < #vr.36) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_2
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.31 < #x) ∧
                           (#x < #vr.36) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_3
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.31 < #x) ∧
                           (#x < #vr.36) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_4
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.31 < #x) ∧
                           (#x < #vr.36) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                qed
              qed
            next
              case OIDCClientInit
              solve( (∀ #z. (!KU( ~n.8 ) @ #z) ⇒ ⊥)  ∥
                     (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
                case case_1
                solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                         <'token_req', ~code.1, ~n.6>)
                       ) @ #vk.45 )
                  case OIDCClientCodeRedirect
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.31 < #x) ∧
                           (#x < #vr.9) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    solve( !KU( ~code ) @ #vk.45 )
                      case OIDCClientCodeRedirect_case_1
                      solve( !KU( browserForward(~sess.10, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.48 )
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_2
                      solve( !KU( browserForward(~sess.10, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.48 )
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_3
                      solve( !KU( browserForward(~sess.10, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.48 )
                        case LinkClick
                        by contradiction
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_4
                      solve( !KU( browserForward(~sess.10, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.48 )
                        case LinkClick
                        by contradiction
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y )
                    next
                      case OIDCIdPIssueCode_case_1
                      solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                             ) @ #vk.50 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    next
                      case OIDCIdPIssueCode_case_2
                      solve( !KU( ~signalClient ) @ #vk.48 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                                  ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                               ) @ #vk.51 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_1
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.31 < #x) ∧
                               (#x < #vr.35) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_2
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.31 < #x) ∧
                               (#x < #vr.35) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_3
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.31 < #x) ∧
                               (#x < #vr.35) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_4
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.31 < #x) ∧
                               (#x < #vr.35) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    qed
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case c_tlsClientMsg
                  by contradiction
                qed
              next
                case case_2
                by contradiction
              qed
            next
              case c_tlsClientMsg
              solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                       <'token_req', ~code.1, code_verifier>)
                     ) @ #vk.48 )
                case OIDCClientCodeRedirect
                solve( (∃ #x.
                         (UseCode( ~code ) @ #x)
                        ∧
                         (#vr.31 < #x) ∧
                         (#x < #vr.9) ∧
                         (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  solve( (∀ #z. (!KU( ~n.6 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
                    case case_1
                    solve( !KU( ~code ) @ #vk.48 )
                      case OIDCClientCodeRedirect_case_1
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.56 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.57 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                                 ) @ #vk.70 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_2
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.56 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.58 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash.2, nonce.2, code_challenge.2>)
                                 ) @ #vk.73 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_3
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.56 )
                        case LinkClick
                        by contradiction
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.57 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                                 ) @ #vk.67 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_4
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.56 )
                        case LinkClick
                        by contradiction
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.57 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                                 ) @ #vk.68 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y )
                    next
                      case OIDCIdPIssueCode_case_1
                      solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                             ) @ #vk.58 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    next
                      case OIDCIdPIssueCode_case_2
                      solve( !KU( ~signalClient ) @ #vk.56 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                                  ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                               ) @ #vk.59 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_1
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.31 < #x) ∧
                               (#x < #vr.35) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_2
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.31 < #x) ∧
                               (#x < #vr.35) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_3
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.31 < #x) ∧
                               (#x < #vr.35) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_4
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.31 < #x) ∧
                               (#x < #vr.35) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    qed
                  next
                    case case_2
                    by contradiction
                  qed
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case c_tlsClientMsg
                solve( !KU( ~code.1 ) @ #vk.60 )
                  case OIDCClientCodeRedirect_case_1
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code.1, ~n.15>)
                         ) @ #vk.62 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.63 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                             ) @ #vk.76 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code.1, ~n.15>)
                         ) @ #vk.62 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.64 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash.2, nonce.2, code_challenge.2>)
                             ) @ #vk.79 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code.1, ~n.15>)
                         ) @ #vk.62 )
                    case LinkClick
                    by contradiction
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.63 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                             ) @ #vk.73 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code.1, ~n.15>)
                         ) @ #vk.62 )
                    case LinkClick
                    by contradiction
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.63 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                             ) @ #vk.74 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator, $IdP, ~code.1 ) @ #y )
                next
                  case OIDCIdPIssueCode_case_1
                  solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                           <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                         ) @ #vk.64 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                next
                  case OIDCIdPIssueCode_case_2
                  solve( !KU( ~signalClient ) @ #vk.62 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                              ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                             <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                           ) @ #vk.65 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case OIDCTokenForward_case_1
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.31 < #x) ∧
                           (#x < #vr.35) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_2
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.31 < #x) ∧
                           (#x < #vr.35) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_3
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.31 < #x) ∧
                           (#x < #vr.35) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_4
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.31 < #x) ∧
                           (#x < #vr.35) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                qed
              qed
            qed
          next
            case c_tlsServerMsg
            by contradiction
          qed
        qed
      next
        case OIDCTokenForward_case_3
        solve( !KU( browserForward(~sess.4, cert(~signalClient),
                                   <'code', code, ~n.6>)
               ) @ #vk.22 )
          case LinkClick
          solve( !KU( tlsServerMsg(~sessPost, ~IdPKey,
                                   <'token', 
                                    <$A, username, nonce, h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>, 
                                    sign(<$A, username, nonce, 
                                          h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>,
                                         x)
                                   >)
                 ) @ #vk.21 )
            case OIDCIdPTokenIssue
            solve( !KU( tlsClientMsg(~sess.10, cert(~IdPKey),
                                     <'oidc_req', h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2), nonce, 
                                      s256(code_verifier)>)
                   ) @ #vk.37 )
              case OIDCAdversaryInit
              solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                       <'token_req', ~code.1, code_verifier>)
                     ) @ #vk.39 )
                case OIDCClientCodeRedirect
                solve( (∃ #x.
                         (UseCode( ~code ) @ #x)
                        ∧
                         (#vr.32 < #x) ∧
                         (#x < #vr.9) ∧
                         (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  solve( (∀ #z. (!KU( ~n.6 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
                    case case_1
                    solve( !KU( ~code ) @ #vk.39 )
                      case OIDCClientCodeRedirect_case_1
                      solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                                 <'code', ~code, ~n.16>)
                             ) @ #vk.45 )
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_2
                      solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                                 <'code', ~code, ~n.16>)
                             ) @ #vk.45 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.46 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash, nonce, code_challenge>)
                                 ) @ #vk.54 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_3
                      solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                                 <'code', ~code, ~n.16>)
                             ) @ #vk.45 )
                        case LinkClick
                        by contradiction
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.46 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.2 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash, nonce, code_challenge>)
                                 ) @ #vk.56 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_4
                      solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                                 <'code', ~code, ~n.16>)
                             ) @ #vk.45 )
                        case LinkClick
                        by contradiction
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode_case_1
                      solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.1, code_challenge>)
                             ) @ #vk.47 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    next
                      case OIDCIdPIssueCode_case_2
                      solve( !KU( ~IdPKey ) @ #vk.45 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce.1, code_challenge>)
                               ) @ #vk.48 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_1
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.32 < #x) ∧
                               (#x < #vr.37) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_2
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.32 < #x) ∧
                               (#x < #vr.37) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_3
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.32 < #x) ∧
                               (#x < #vr.37) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_4
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.32 < #x) ∧
                               (#x < #vr.37) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    qed
                  next
                    case case_2
                    by contradiction
                  qed
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case c_tlsClientMsg
                solve( !KU( ~code.1 ) @ #vk.50 )
                  case OIDCClientCodeRedirect_case_1
                  solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                             <'code', ~code.1, ~n.16>)
                         ) @ #vk.52 )
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                             <'code', ~code.1, ~n.16>)
                         ) @ #vk.52 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.53 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.61 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                             <'code', ~code.1, ~n.16>)
                         ) @ #vk.52 )
                    case LinkClick
                    by contradiction
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.53 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.2 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.63 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                             <'code', ~code.1, ~n.16>)
                         ) @ #vk.52 )
                    case LinkClick
                    by contradiction
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~code.1 ) @ #y.1 )
                next
                  case OIDCIdPIssueCode_case_1
                  solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce.1, code_challenge>)
                         ) @ #vk.54 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                next
                  case OIDCIdPIssueCode_case_2
                  solve( !KU( ~IdPKey ) @ #vk.52 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.1, code_challenge>)
                           ) @ #vk.55 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case OIDCTokenForward_case_1
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.32 < #x) ∧
                           (#x < #vr.37) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_2
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.32 < #x) ∧
                           (#x < #vr.37) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_3
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.32 < #x) ∧
                           (#x < #vr.37) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_4
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.32 < #x) ∧
                           (#x < #vr.37) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                qed
              qed
            next
              case OIDCClientInit
              solve( (∀ #z. (!KU( ~n.8 ) @ #z) ⇒ ⊥)  ∥
                     (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
                case case_1
                solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                         <'token_req', ~code.1, ~n.6>)
                       ) @ #vk.35 )
                  case OIDCClientCodeRedirect
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.32 < #x) ∧
                           (#x < #vr.9) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    solve( !KU( ~code ) @ #vk.35 )
                      case OIDCClientCodeRedirect_case_1
                      solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                                 <'code', ~code, ~n.16>)
                             ) @ #vk.38 )
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_2
                      solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                                 <'code', ~code, ~n.16>)
                             ) @ #vk.38 )
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_3
                      solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                                 <'code', ~code, ~n.16>)
                             ) @ #vk.38 )
                        case LinkClick
                        by contradiction
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_4
                      solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                                 <'code', ~code, ~n.16>)
                             ) @ #vk.38 )
                        case LinkClick
                        by contradiction
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode_case_1
                      solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.40 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    next
                      case OIDCIdPIssueCode_case_2
                      solve( !KU( ~IdPKey ) @ #vk.38 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator, $IdP, ~IdPKey ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce, code_challenge>)
                               ) @ #vk.41 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_1
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.32 < #x) ∧
                               (#x < #vr.36) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_2
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.32 < #x) ∧
                               (#x < #vr.36) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_3
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.32 < #x) ∧
                               (#x < #vr.36) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_4
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.32 < #x) ∧
                               (#x < #vr.36) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    qed
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case c_tlsClientMsg
                  by contradiction
                qed
              next
                case case_2
                by contradiction
              qed
            next
              case c_tlsClientMsg
              solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                       <'token_req', ~code.1, code_verifier>)
                     ) @ #vk.38 )
                case OIDCClientCodeRedirect
                solve( (∃ #x.
                         (UseCode( ~code ) @ #x)
                        ∧
                         (#vr.32 < #x) ∧
                         (#x < #vr.9) ∧
                         (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  solve( (∀ #z. (!KU( ~n.6 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
                    case case_1
                    solve( !KU( ~code ) @ #vk.38 )
                      case OIDCClientCodeRedirect_case_1
                      solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                                 <'code', ~code, ~n.16>)
                             ) @ #vk.46 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.47 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash, nonce, code_challenge>)
                                 ) @ #vk.60 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_2
                      solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                                 <'code', ~code, ~n.16>)
                             ) @ #vk.46 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.48 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                                 ) @ #vk.63 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_3
                      solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                                 <'code', ~code, ~n.16>)
                             ) @ #vk.46 )
                        case LinkClick
                        by contradiction
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.47 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.2 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash, nonce, code_challenge>)
                                 ) @ #vk.57 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_4
                      solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                                 <'code', ~code, ~n.16>)
                             ) @ #vk.46 )
                        case LinkClick
                        by contradiction
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.47 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash, nonce.1, code_challenge>)
                                 ) @ #vk.58 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode_case_1
                      solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.1, code_challenge>)
                             ) @ #vk.48 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    next
                      case OIDCIdPIssueCode_case_2
                      solve( !KU( ~IdPKey ) @ #vk.46 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator, $IdP, ~IdPKey ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce.1, code_challenge>)
                               ) @ #vk.49 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_1
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.32 < #x) ∧
                               (#x < #vr.36) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_2
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.32 < #x) ∧
                               (#x < #vr.36) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_3
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.32 < #x) ∧
                               (#x < #vr.36) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_4
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.32 < #x) ∧
                               (#x < #vr.36) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    qed
                  next
                    case case_2
                    by contradiction
                  qed
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case c_tlsClientMsg
                solve( !KU( ~code.1 ) @ #vk.50 )
                  case OIDCClientCodeRedirect_case_1
                  solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                             <'code', ~code.1, ~n.16>)
                         ) @ #vk.52 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.53 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.66 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                             <'code', ~code.1, ~n.16>)
                         ) @ #vk.52 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.54 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                             ) @ #vk.69 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                             <'code', ~code.1, ~n.16>)
                         ) @ #vk.52 )
                    case LinkClick
                    by contradiction
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.53 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.2 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.63 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( !KU( browserForward(~sess.12, cert(~signalClient),
                                             <'code', ~code.1, ~n.16>)
                         ) @ #vk.52 )
                    case LinkClick
                    by contradiction
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.53 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.1, code_challenge>)
                             ) @ #vk.64 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator, $IdP, ~code.1 ) @ #y.1 )
                next
                  case OIDCIdPIssueCode_case_1
                  solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce.1, code_challenge>)
                         ) @ #vk.54 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                next
                  case OIDCIdPIssueCode_case_2
                  solve( !KU( ~IdPKey ) @ #vk.52 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator, $IdP, ~IdPKey ) @ #y.1 )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.1, code_challenge>)
                           ) @ #vk.55 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case OIDCTokenForward_case_1
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.32 < #x) ∧
                           (#x < #vr.36) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_2
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.32 < #x) ∧
                           (#x < #vr.36) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_3
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.32 < #x) ∧
                           (#x < #vr.36) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_4
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.32 < #x) ∧
                           (#x < #vr.36) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                qed
              qed
            qed
          next
            case c_tlsServerMsg
            by contradiction
          qed
        next
          case OIDCIdPIssueCode
          solve( (∃ #x.
                   (UseCode( ~code ) @ #x)
                  ∧
                   (#vr.31 < #x) ∧
                   (#x < #vr.9) ∧
                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                 (∃ signalClient domain #x #y.
                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                   (CompromisedDomain( signalClient, domain ) @ #y)) )
            case case_1
            solve( !Domain( $IdP, ~IdPKey.1 ) ▶₁ #x.1 )
              case TLSSetup
              solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey),
                                       <'oidc_req', hash.1, ~n.4, code_challenge>)
                     ) @ #vk.33 )
                case OIDCAdversaryInit
                solve( !KU( tlsClientMsg(~sess.3, cert(~IdPKey.1),
                                         <'token_req', ~code, code_verifier>)
                       ) @ #vk.36 )
                  case OIDCClientCodeRedirect_case_1
                  solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                    case case_1
                    solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.44 )
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash.1, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~code ) @ #vk.60 )
                          case OIDCClientCodeRedirect_case_1
                          solve( !KU( browserForward(~sess.20, cert(~signalClient.1),
                                                     <'code', ~code, ~n.31>)
                                 ) @ #vk.62 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_2
                          solve( !KU( browserForward(~sess.20, cert(~signalClient.1),
                                                     <'code', ~code, ~n.31>)
                                 ) @ #vk.62 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_3
                          solve( !KU( browserForward(~sess.20, cert(~signalClient.1),
                                                     <'code', ~code, ~n.31>)
                                 ) @ #vk.62 )
                            case LinkClick
                            by contradiction
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( ~IdPKey ) @ #vk.62 )
                              case DomainCompromise
                              by contradiction
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                            next
                              case OIDCIdPIssueCode
                              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                       <'oidc_req', hash.1, nonce.1, code_challenge
                                                       >)
                                     ) @ #vk.65 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            qed
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_4
                          solve( !KU( browserForward(~sess.20, cert(~signalClient.1),
                                                     <'code', ~code, ~n.31>)
                                 ) @ #vk.62 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode_case_1
                          solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.64 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case OIDCIdPIssueCode_case_2
                          solve( !KU( ~signalClient ) @ #vk.62 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                      ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                                   ) @ #vk.65 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCTokenForward_case_1
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.31 < #x) ∧
                                   (#x < #vr.56) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_2
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.31 < #x) ∧
                                   (#x < #vr.56) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_3
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.31 < #x) ∧
                                   (#x < #vr.56) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_4
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.31 < #x) ∧
                                   (#x < #vr.56) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                      case TLSSetup
                      solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.44 )
                        case c_browserForward
                        solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash.1, nonce.1,
                                                s256(~n.5)
                               ) ▶₃ #x.1 )
                          case OIDCIdPIssueCode
                          by contradiction
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                    case case_1
                    solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.44 )
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash.1, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~code ) @ #vk.63 )
                          case OIDCClientCodeRedirect_case_1
                          solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.65 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_2
                          solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.65 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_3
                          solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.65 )
                            case LinkClick
                            by contradiction
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( ~IdPKey ) @ #vk.65 )
                              case DomainCompromise
                              by contradiction
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                            next
                              case OIDCIdPIssueCode
                              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                       <'oidc_req', hash.2, nonce.2, 
                                                        code_challenge.1>)
                                     ) @ #vk.68 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            qed
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_4
                          solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.65 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode_case_1
                          solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                   <'oidc_req', hash.2, nonce.2, code_challenge.1>)
                                 ) @ #vk.67 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case OIDCIdPIssueCode_case_2
                          solve( !KU( ~signalClient ) @ #vk.65 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                      ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                     <'oidc_req', hash.2, nonce.2, code_challenge.1
                                                     >)
                                   ) @ #vk.68 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCTokenForward_case_1
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.31 < #x) ∧
                                   (#x < #vr.47) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_2
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.31 < #x) ∧
                                   (#x < #vr.47) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_3
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.31 < #x) ∧
                                   (#x < #vr.47) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_4
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.31 < #x) ∧
                                   (#x < #vr.47) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                      case TLSSetup
                      solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.44 )
                        case c_browserForward
                        solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash.1, nonce.1,
                                                s256(~n.5)
                               ) ▶₃ #x.1 )
                          case OIDCIdPIssueCode
                          by contradiction
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                    case case_1
                    solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.44 )
                      case LinkClick
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash.1, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~code ) @ #vk.53 )
                          case OIDCClientCodeRedirect_case_1
                          solve( !KU( browserForward(~sess.18, cert(~signalClient),
                                                     <'code', ~code, ~n.24>)
                                 ) @ #vk.55 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_2
                          solve( !KU( browserForward(~sess.18, cert(~signalClient),
                                                     <'code', ~code, ~n.24>)
                                 ) @ #vk.55 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_3
                          solve( !KU( browserForward(~sess.18, cert(~signalClient),
                                                     <'code', ~code, ~n.24>)
                                 ) @ #vk.55 )
                            case LinkClick
                            by contradiction
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( ~IdPKey ) @ #vk.55 )
                              case DomainCompromise
                              by contradiction
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.2 )
                            next
                              case OIDCIdPIssueCode
                              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                       <'oidc_req', hash.1, nonce.1, code_challenge
                                                       >)
                                     ) @ #vk.58 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            qed
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_4
                          solve( !KU( browserForward(~sess.18, cert(~signalClient),
                                                     <'code', ~code, ~n.24>)
                                 ) @ #vk.55 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.2 )
                        next
                          case OIDCIdPIssueCode_case_1
                          solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.57 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case OIDCIdPIssueCode_case_2
                          solve( !KU( ~IdPKey ) @ #vk.55 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.2 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                                   ) @ #vk.58 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCTokenForward_case_1
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.30 < #x) ∧
                                   (#x < #vr.48) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_2
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.30 < #x) ∧
                                   (#x < #vr.48) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_3
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.30 < #x) ∧
                                   (#x < #vr.48) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_4
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.30 < #x) ∧
                                   (#x < #vr.48) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        qed
                      qed
                    next
                      case OIDCIdPIssueCode
                      solve( St_OIDCIdP_Code( $A, $Username, ~code, hash.1, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( tlsServerMsg(~sessPost, ~IdPKey,
                                                 <'token', 
                                                  <$A, username, nonce, 
                                                   h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>, 
                                                  sign(<$A, username, nonce, 
                                                        h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>,
                                                       x)
                                                 >)
                               ) @ #vk.24 )
                          case OIDCIdPTokenIssue
                          solve( !KU( tlsClientMsg(~sess.11, cert(~IdPKey),
                                                   <'oidc_req', 
                                                    h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2), nonce, 
                                                    s256(code_verifier)>)
                                 ) @ #vk.46 )
                            case OIDCAdversaryInit
                            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                     <'token_req', ~code.1, code_verifier>)
                                   ) @ #vk.48 )
                              case OIDCClientCodeRedirect
                              solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey),
                                                       <'login', $Username, pw>)
                                     ) @ #vk.38 )
                                case OIDCClientLogin
                                by contradiction
                              next
                                case c_tlsClientMsg
                                solve( !KU( s256(~n.6) ) @ #vk.42 )
                                  case OIDCClientInit_case_1
                                  solve( !KU( ~IdPKey ) @ #vk.48 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                              ) @ #y.1 )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.51 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case OIDCClientInit_case_2
                                  solve( GenBrowserSession( $Initiator, $A, ~sess.2 ) @ #y )
                                    case OIDCAdversaryInit
                                    solve( !KU( ~sess.2 ) @ #vk.44 )
                                      case OIDCAdversaryInit
                                      solve( !KU( ~IdPKey ) @ #vk.48 )
                                        case DomainCompromise
                                        by contradiction
                                      next
                                        case OIDCClientLogin
                                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                                  ) @ #y.1 )
                                      next
                                        case OIDCIdPIssueCode
                                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                                 <'oidc_req', hash, nonce, 
                                                                  code_challenge>)
                                               ) @ #vk.51 )
                                          case c_tlsClientMsg
                                          by contradiction
                                        qed
                                      qed
                                    next
                                      case OIDCClientLogin
                                      solve( !KU( ~IdPKey ) @ #vk.48 )
                                        case DomainCompromise
                                        by contradiction
                                      next
                                        case OIDCClientLogin
                                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                                  ) @ #y.1 )
                                      next
                                        case OIDCIdPIssueCode
                                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                                 <'oidc_req', hash, nonce, 
                                                                  code_challenge>)
                                               ) @ #vk.52 )
                                          case c_tlsClientMsg
                                          by contradiction
                                        qed
                                      qed
                                    next
                                      case OIDCIdPIssueCode
                                      solve( !KU( ~signalClient.1 ) @ #vk.49 )
                                        case DomainCompromise
                                        solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                                                 <'oidc_req', hash, nonce, 
                                                                  code_challenge>)
                                               ) @ #vk.50 )
                                          case OIDCAdversaryInit
                                          by contradiction
                                        next
                                          case c_tlsClientMsg
                                          by contradiction
                                        qed
                                      next
                                        case OIDCClientLogin
                                        by solve( GenBrowserSession( $Initiator.1, $IdP.1,
                                                                     ~signalClient.1
                                                  ) @ #y.1 )
                                      next
                                        case OIDCIdPIssueCode
                                        solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                                                 <'oidc_req', hash.1, nonce.1, 
                                                                  code_challenge.1>)
                                               ) @ #vk.54 )
                                          case c_tlsClientMsg
                                          by contradiction
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case c_s256
                                  by contradiction
                                qed
                              qed
                            next
                              case c_tlsClientMsg
                              solve( !KU( ~code.1 ) @ #vk.59 )
                                case OIDCClientCodeRedirect_case_1
                                solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.17>)
                                       ) @ #vk.61 )
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_2
                                solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.17>)
                                       ) @ #vk.61 )
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.62 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y.1 )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.1, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.70 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_3
                                solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.17>)
                                       ) @ #vk.61 )
                                  case LinkClick
                                  by contradiction
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.62 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y.2 )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.1, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.72 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_4
                                solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.17>)
                                       ) @ #vk.61 )
                                  case LinkClick
                                  by contradiction
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientLogin
                                by solve( GenBrowserSession( $Initiator.2, $IdP, ~code.1 ) @ #y.1 )
                              next
                                case OIDCIdPIssueCode_case_1
                                solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                                         <'oidc_req', hash.1, nonce.1, 
                                                          code_challenge>)
                                       ) @ #vk.63 )
                                  case c_tlsClientMsg
                                  by contradiction
                                qed
                              next
                                case OIDCIdPIssueCode_case_2
                                solve( !KU( ~signalClient ) @ #vk.61 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~signalClient
                                            ) @ #y.1 )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce.1, 
                                                            code_challenge>)
                                         ) @ #vk.64 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case OIDCTokenForward_case_1
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.37 < #x) ∧
                                         (#x < #vr.42) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_2
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.37 < #x) ∧
                                         (#x < #vr.42) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_3
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.37 < #x) ∧
                                         (#x < #vr.42) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_4
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.37 < #x) ∧
                                         (#x < #vr.42) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              qed
                            qed
                          next
                            case OIDCClientInit
                            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                     <'token_req', ~code.1, ~n.6>)
                                   ) @ #vk.44 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          next
                            case c_tlsClientMsg
                            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                     <'token_req', ~code.1, code_verifier>)
                                   ) @ #vk.47 )
                              case c_tlsClientMsg
                              solve( !KU( ~code.1 ) @ #vk.59 )
                                case OIDCClientCodeRedirect_case_1
                                solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.17>)
                                       ) @ #vk.61 )
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.62 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y.1 )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.1, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.75 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_2
                                solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.17>)
                                       ) @ #vk.61 )
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.63 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y.1 )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.2, nonce.1, 
                                                              code_challenge.1>)
                                           ) @ #vk.78 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_3
                                solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.17>)
                                       ) @ #vk.61 )
                                  case LinkClick
                                  by contradiction
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.62 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y.2 )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.1, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.72 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_4
                                solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.17>)
                                       ) @ #vk.61 )
                                  case LinkClick
                                  by contradiction
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.62 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y.1 )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.1, nonce.1, 
                                                              code_challenge>)
                                           ) @ #vk.73 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientLogin
                                by solve( GenBrowserSession( $Initiator.1, $IdP, ~code.1 ) @ #y.1 )
                              next
                                case OIDCIdPIssueCode_case_1
                                solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                                         <'oidc_req', hash.1, nonce.1, 
                                                          code_challenge>)
                                       ) @ #vk.63 )
                                  case c_tlsClientMsg
                                  by contradiction
                                qed
                              next
                                case OIDCIdPIssueCode_case_2
                                solve( !KU( ~signalClient ) @ #vk.61 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                            ) @ #y.1 )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce.1, 
                                                            code_challenge>)
                                         ) @ #vk.64 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case OIDCTokenForward_case_1
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.37 < #x) ∧
                                         (#x < #vr.41) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_2
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.37 < #x) ∧
                                         (#x < #vr.41) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_3
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.37 < #x) ∧
                                         (#x < #vr.41) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_4
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.37 < #x) ∧
                                         (#x < #vr.41) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              qed
                            qed
                          qed
                        next
                          case c_tlsServerMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash.1, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~code ) @ #vk.57 )
                          case OIDCClientCodeRedirect_case_1
                          solve( !KU( browserForward(~sess.18, cert(~signalClient.1),
                                                     <'code', ~code, ~n.24>)
                                 ) @ #vk.59 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_2
                          solve( !KU( browserForward(~sess.18, cert(~signalClient.1),
                                                     <'code', ~code, ~n.24>)
                                 ) @ #vk.59 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_3
                          solve( !KU( browserForward(~sess.18, cert(~signalClient.1),
                                                     <'code', ~code, ~n.24>)
                                 ) @ #vk.59 )
                            case LinkClick
                            by contradiction
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( ~IdPKey ) @ #vk.59 )
                              case DomainCompromise
                              by contradiction
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.2 )
                            next
                              case OIDCIdPIssueCode
                              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                       <'oidc_req', hash.1, nonce.1, code_challenge
                                                       >)
                                     ) @ #vk.62 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            qed
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_4
                          solve( !KU( browserForward(~sess.18, cert(~signalClient.1),
                                                     <'code', ~code, ~n.24>)
                                 ) @ #vk.59 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.2 )
                        next
                          case OIDCIdPIssueCode_case_1
                          solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.61 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case OIDCIdPIssueCode_case_2
                          solve( !KU( ~signalClient ) @ #vk.59 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                      ) @ #y.2 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                                   ) @ #vk.62 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCTokenForward_case_1
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.31 < #x) ∧
                                   (#x < #vr.49) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_2
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.31 < #x) ∧
                                   (#x < #vr.49) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_3
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.31 < #x) ∧
                                   (#x < #vr.49) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_4
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.31 < #x) ∧
                                   (#x < #vr.49) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                      case TLSSetup
                      solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.44 )
                        case LinkClick
                        solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash.1, nonce.1,
                                                s256(~n.5)
                               ) ▶₃ #x.1 )
                          case OIDCIdPIssueCode
                          by contradiction
                        qed
                      next
                        case OIDCIdPIssueCode
                        by contradiction
                      next
                        case c_browserForward
                        solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash.1, nonce.1,
                                                s256(~n.5)
                               ) ▶₃ #x.1 )
                          case OIDCIdPIssueCode
                          by contradiction
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                    case case_1
                    solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.44 )
                      case LinkClick
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash.1, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~code ) @ #vk.46 )
                          case OIDCClientCodeRedirect_case_1
                          solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.53 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_2
                          solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.53 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_3
                          solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.53 )
                            case LinkClick
                            by contradiction
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( ~IdPKey ) @ #vk.53 )
                              case DomainCompromise
                              by contradiction
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                            next
                              case OIDCIdPIssueCode
                              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                       <'oidc_req', hash.1, nonce.1, code_challenge
                                                       >)
                                     ) @ #vk.56 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            qed
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_4
                          solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.53 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode_case_1
                          solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.55 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case OIDCIdPIssueCode_case_2
                          solve( !KU( ~IdPKey ) @ #vk.53 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                                   ) @ #vk.56 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCTokenForward_case_1
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.30 < #x) ∧
                                   (#x < #vr.46) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_2
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.30 < #x) ∧
                                   (#x < #vr.46) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_3
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.30 < #x) ∧
                                   (#x < #vr.46) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_4
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.30 < #x) ∧
                                   (#x < #vr.46) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        qed
                      qed
                    next
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash.1, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~code ) @ #vk.58 )
                          case OIDCClientCodeRedirect_case_1
                          solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.60 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_2
                          solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.60 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_3
                          solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.60 )
                            case LinkClick
                            by contradiction
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( ~IdPKey ) @ #vk.60 )
                              case DomainCompromise
                              by contradiction
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                            next
                              case OIDCIdPIssueCode
                              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                       <'oidc_req', hash.1, nonce.2, code_challenge
                                                       >)
                                     ) @ #vk.63 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            qed
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_4
                          solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.60 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode_case_1
                          solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.2, code_challenge>)
                                 ) @ #vk.62 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case OIDCIdPIssueCode_case_2
                          solve( !KU( ~signalClient ) @ #vk.60 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                      ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.2, code_challenge>)
                                   ) @ #vk.63 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCTokenForward_case_1
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.31 < #x) ∧
                                   (#x < #vr.47) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_2
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.31 < #x) ∧
                                   (#x < #vr.47) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_3
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.31 < #x) ∧
                                   (#x < #vr.47) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_4
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.31 < #x) ∧
                                   (#x < #vr.47) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                      case TLSSetup
                      solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.44 )
                        case LinkClick
                        solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash.1, nonce.1,
                                                s256(~n.5)
                               ) ▶₃ #x.1 )
                          case OIDCIdPIssueCode
                          by contradiction
                        qed
                      next
                        case c_browserForward
                        solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash.1, nonce.1,
                                                s256(~n.5)
                               ) ▶₃ #x.1 )
                          case OIDCIdPIssueCode
                          by contradiction
                        qed
                      qed
                    qed
                  qed
                next
                  case c_tlsClientMsg
                  solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash.1, nonce.1,
                                          s256(code_verifier)
                         ) ▶₃ #x.1 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~code ) @ #vk.49 )
                      case OIDCClientCodeRedirect_case_1
                      solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.51 )
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_2
                      solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.51 )
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_3
                      solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.51 )
                        case LinkClick
                        by contradiction
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.51 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.54 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_4
                      solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.51 )
                        case LinkClick
                        by contradiction
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode_case_1
                      solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.1, code_challenge>)
                             ) @ #vk.53 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    next
                      case OIDCIdPIssueCode_case_2
                      solve( !KU( ~signalClient ) @ #vk.51 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                                  ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge>)
                               ) @ #vk.54 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_1
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.31 < #x) ∧
                               (#x < #vr.35) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_2
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.31 < #x) ∧
                               (#x < #vr.35) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_3
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.31 < #x) ∧
                               (#x < #vr.35) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_4
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.31 < #x) ∧
                               (#x < #vr.35) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    qed
                  qed
                qed
              next
                case OIDCClientInit
                solve( !KU( tlsClientMsg(~sess.3, cert(~IdPKey.1),
                                         <'token_req', ~code, code_verifier>)
                       ) @ #vk.35 )
                  case OIDCClientCodeRedirect_case_1
                  solve( (∀ #z. (!KU( ~n.7 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                    case case_1
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.36 )
                      case c_browserForward
                      by solve( St_OIDCIdP_Code( $IdP, $Username.1, ~code, hash, nonce.1,
                                                 s256(~n.7)
                                ) ▶₃ #x.1 )
                    qed
                  next
                    case case_2
                    solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                      case TLSSetup
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.36 )
                        case c_browserForward
                        by solve( St_OIDCIdP_Code( $IdP, $Username.1, ~code, hash, nonce.1,
                                                   s256(~n.7)
                                  ) ▶₃ #x.1 )
                      qed
                    qed
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( (∀ #z. (!KU( ~n.7 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                    case case_1
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.36 )
                      case c_browserForward
                      by solve( St_OIDCIdP_Code( $IdP, $Username.1, ~code, hash, nonce.1,
                                                 s256(~n.7)
                                ) ▶₃ #x.1 )
                    qed
                  next
                    case case_2
                    solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                      case TLSSetup
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.36 )
                        case c_browserForward
                        by solve( St_OIDCIdP_Code( $IdP, $Username.1, ~code, hash, nonce.1,
                                                   s256(~n.7)
                                  ) ▶₃ #x.1 )
                      qed
                    qed
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( (∀ #z. (!KU( ~n.7 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                    case case_1
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.36 )
                      case LinkClick
                      by solve( St_OIDCIdP_Code( $IdP, $Username.1, ~code, hash, nonce.1,
                                                 s256(~n.7)
                                ) ▶₃ #x.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( St_OIDCIdP_Code( $A, $Username.1, ~code, hash, nonce.1,
                                              s256(~n.6)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( tlsServerMsg(~sessPost, ~IdPKey,
                                                 <'token', 
                                                  <$A, username, nonce, 
                                                   h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>, 
                                                  sign(<$A, username, nonce, 
                                                        h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>,
                                                       x)
                                                 >)
                               ) @ #vk.23 )
                          case OIDCIdPTokenIssue
                          solve( !KU( tlsClientMsg(~sess.10, cert(~IdPKey),
                                                   <'oidc_req', 
                                                    h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2), nonce, 
                                                    s256(code_verifier)>)
                                 ) @ #vk.38 )
                            case OIDCAdversaryInit
                            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                     <'token_req', ~code.1, code_verifier>)
                                   ) @ #vk.40 )
                              case c_tlsClientMsg
                              solve( !KU( ~code.1 ) @ #vk.51 )
                                case OIDCClientCodeRedirect_case_1
                                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.17>)
                                       ) @ #vk.53 )
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_2
                                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.17>)
                                       ) @ #vk.53 )
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.54 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y.1 )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.62 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_3
                                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.17>)
                                       ) @ #vk.53 )
                                  case LinkClick
                                  by contradiction
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.54 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y.2 )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.64 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_4
                                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.17>)
                                       ) @ #vk.53 )
                                  case LinkClick
                                  by contradiction
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientLogin
                                by solve( GenBrowserSession( $Initiator.2, $IdP, ~code.1 ) @ #y.1 )
                              next
                                case OIDCIdPIssueCode_case_1
                                solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                                         <'oidc_req', hash, nonce.1, code_challenge
                                                         >)
                                       ) @ #vk.55 )
                                  case c_tlsClientMsg
                                  by contradiction
                                qed
                              next
                                case OIDCIdPIssueCode_case_2
                                solve( !KU( ~signalClient ) @ #vk.53 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~signalClient
                                            ) @ #y.1 )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                           <'oidc_req', hash, nonce.1, 
                                                            code_challenge>)
                                         ) @ #vk.56 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case OIDCTokenForward_case_1
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.36 < #x) ∧
                                         (#x < #vr.41) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_2
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.36 < #x) ∧
                                         (#x < #vr.41) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_3
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.36 < #x) ∧
                                         (#x < #vr.41) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_4
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.36 < #x) ∧
                                         (#x < #vr.41) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              qed
                            qed
                          next
                            case OIDCClientInit
                            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                     <'token_req', ~code.1, ~n.6>)
                                   ) @ #vk.36 )
                              case OIDCClientCodeRedirect
                              solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey),
                                                       <'login', $Username, pw>)
                                     ) @ #vk.34 )
                                case OIDCClientLogin
                                by contradiction
                              next
                                case c_tlsClientMsg
                                solve( GenBrowserSession( $Initiator, $A, ~sess.2 ) @ #y )
                                  case OIDCClientInit
                                  solve( !KU( ~sess.2 ) @ #vk.38 )
                                    case OIDCClientInit
                                    solve( !KU( ~IdPKey ) @ #vk.42 )
                                      case DomainCompromise
                                      by contradiction
                                    next
                                      case OIDCClientLogin
                                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                                ) @ #y.1 )
                                    next
                                      case OIDCIdPIssueCode
                                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                               <'oidc_req', hash, nonce, 
                                                                code_challenge>)
                                             ) @ #vk.45 )
                                        case c_tlsClientMsg
                                        by contradiction
                                      qed
                                    qed
                                  next
                                    case OIDCClientLogin
                                    solve( !KU( ~IdPKey ) @ #vk.42 )
                                      case DomainCompromise
                                      by contradiction
                                    next
                                      case OIDCClientLogin
                                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                                ) @ #y.1 )
                                    next
                                      case OIDCIdPIssueCode
                                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                               <'oidc_req', hash, nonce, 
                                                                code_challenge>)
                                             ) @ #vk.46 )
                                        case c_tlsClientMsg
                                        by contradiction
                                      qed
                                    qed
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( ~signalClient.1 ) @ #vk.43 )
                                      case DomainCompromise
                                      solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                                               <'oidc_req', hash, nonce, 
                                                                code_challenge>)
                                             ) @ #vk.44 )
                                        case OIDCClientInit
                                        by contradiction
                                      next
                                        case c_tlsClientMsg
                                        by contradiction
                                      qed
                                    next
                                      case OIDCClientLogin
                                      by solve( GenBrowserSession( $Initiator.1, $IdP.1,
                                                                   ~signalClient.1
                                                ) @ #y.1 )
                                    next
                                      case OIDCIdPIssueCode
                                      solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                                               <'oidc_req', hash.1, nonce.1, 
                                                                code_challenge.1>)
                                             ) @ #vk.48 )
                                        case c_tlsClientMsg
                                        by contradiction
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          next
                            case c_tlsClientMsg
                            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                     <'token_req', ~code.1, code_verifier>)
                                   ) @ #vk.39 )
                              case c_tlsClientMsg
                              solve( !KU( ~code.1 ) @ #vk.51 )
                                case OIDCClientCodeRedirect_case_1
                                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.17>)
                                       ) @ #vk.53 )
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.54 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y.1 )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.67 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_2
                                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.17>)
                                       ) @ #vk.53 )
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.55 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y.1 )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.1, nonce.1, 
                                                              code_challenge.1>)
                                           ) @ #vk.70 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_3
                                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.17>)
                                       ) @ #vk.53 )
                                  case LinkClick
                                  by contradiction
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.54 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y.2 )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.64 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_4
                                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.17>)
                                       ) @ #vk.53 )
                                  case LinkClick
                                  by contradiction
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.54 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y.1 )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash, nonce.1, 
                                                              code_challenge>)
                                           ) @ #vk.65 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientLogin
                                by solve( GenBrowserSession( $Initiator.1, $IdP, ~code.1 ) @ #y.1 )
                              next
                                case OIDCIdPIssueCode_case_1
                                solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                                         <'oidc_req', hash, nonce.1, code_challenge
                                                         >)
                                       ) @ #vk.55 )
                                  case c_tlsClientMsg
                                  by contradiction
                                qed
                              next
                                case OIDCIdPIssueCode_case_2
                                solve( !KU( ~signalClient ) @ #vk.53 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                            ) @ #y.1 )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                           <'oidc_req', hash, nonce.1, 
                                                            code_challenge>)
                                         ) @ #vk.56 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case OIDCTokenForward_case_1
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.36 < #x) ∧
                                         (#x < #vr.40) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_2
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.36 < #x) ∧
                                         (#x < #vr.40) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_3
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.36 < #x) ∧
                                         (#x < #vr.40) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_4
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.36 < #x) ∧
                                         (#x < #vr.40) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              qed
                            qed
                          qed
                        next
                          case c_tlsServerMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      by solve( St_OIDCIdP_Code( $IdP, $Username.1, ~code, hash, nonce.1,
                                                 s256(~n.7)
                                ) ▶₃ #x.1 )
                    qed
                  next
                    case case_2
                    solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                      case TLSSetup
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.36 )
                        case LinkClick
                        by solve( St_OIDCIdP_Code( $IdP, $Username.1, ~code, hash, nonce.1,
                                                   s256(~n.7)
                                  ) ▶₃ #x.1 )
                      next
                        case OIDCIdPIssueCode
                        by contradiction
                      next
                        case c_browserForward
                        by solve( St_OIDCIdP_Code( $IdP, $Username.1, ~code, hash, nonce.1,
                                                   s256(~n.7)
                                  ) ▶₃ #x.1 )
                      qed
                    qed
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( (∀ #z. (!KU( ~n.7 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                    case case_1
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.36 )
                      case LinkClick
                      by solve( St_OIDCIdP_Code( $IdP, $Username.1, ~code, hash, nonce.1,
                                                 s256(~n.7)
                                ) ▶₃ #x.1 )
                    next
                      case c_browserForward
                      by solve( St_OIDCIdP_Code( $IdP, $Username.1, ~code, hash, nonce.1,
                                                 s256(~n.7)
                                ) ▶₃ #x.1 )
                    qed
                  next
                    case case_2
                    solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                      case TLSSetup
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.36 )
                        case LinkClick
                        by solve( St_OIDCIdP_Code( $IdP, $Username.1, ~code, hash, nonce.1,
                                                   s256(~n.7)
                                  ) ▶₃ #x.1 )
                      next
                        case c_browserForward
                        by solve( St_OIDCIdP_Code( $IdP, $Username.1, ~code, hash, nonce.1,
                                                   s256(~n.7)
                                  ) ▶₃ #x.1 )
                      qed
                    qed
                  qed
                next
                  case c_tlsClientMsg
                  solve( St_OIDCIdP_Code( $IdP, $Username.1, ~code, hash, nonce.1,
                                          s256(code_verifier)
                         ) ▶₃ #x.1 )
                    case OIDCIdPIssueCode
                    solve( (∀ #z. (!KU( ~n.6 ) @ #z) ⇒ ⊥)  ∥
                           (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
                      case case_1
                      by contradiction
                    next
                      case case_2
                      by contradiction
                    qed
                  qed
                qed
              next
                case c_tlsClientMsg
                solve( !KU( tlsClientMsg(~sess.3, cert(~IdPKey.1),
                                         <'token_req', ~code, code_verifier>)
                       ) @ #vk.35 )
                  case OIDCClientCodeRedirect_case_1
                  solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                    case case_1
                    solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.45 )
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~code ) @ #vk.61 )
                          case OIDCClientCodeRedirect_case_1
                          solve( !KU( browserForward(~sess.20, cert(~signalClient.1),
                                                     <'code', ~code, ~n.31>)
                                 ) @ #vk.63 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_2
                          solve( !KU( browserForward(~sess.20, cert(~signalClient.1),
                                                     <'code', ~code, ~n.31>)
                                 ) @ #vk.63 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_3
                          solve( !KU( browserForward(~sess.20, cert(~signalClient.1),
                                                     <'code', ~code, ~n.31>)
                                 ) @ #vk.63 )
                            case LinkClick
                            by contradiction
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( ~IdPKey ) @ #vk.63 )
                              case DomainCompromise
                              by contradiction
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                            next
                              case OIDCIdPIssueCode
                              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                       <'oidc_req', hash.1, nonce.1, code_challenge
                                                       >)
                                     ) @ #vk.66 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            qed
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_4
                          solve( !KU( browserForward(~sess.20, cert(~signalClient.1),
                                                     <'code', ~code, ~n.31>)
                                 ) @ #vk.63 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode_case_1
                          solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.65 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case OIDCIdPIssueCode_case_2
                          solve( !KU( ~signalClient ) @ #vk.63 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                      ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                                   ) @ #vk.66 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCTokenForward_case_1
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.31 < #x) ∧
                                   (#x < #vr.56) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_2
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.31 < #x) ∧
                                   (#x < #vr.56) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_3
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.31 < #x) ∧
                                   (#x < #vr.56) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_4
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.31 < #x) ∧
                                   (#x < #vr.56) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                      case TLSSetup
                      solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.45 )
                        case c_browserForward
                        solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                s256(~n.5)
                               ) ▶₃ #x.1 )
                          case OIDCIdPIssueCode
                          by contradiction
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                    case case_1
                    solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.45 )
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~code ) @ #vk.64 )
                          case OIDCClientCodeRedirect_case_1
                          solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.66 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_2
                          solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.66 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_3
                          solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.66 )
                            case LinkClick
                            by contradiction
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( ~IdPKey ) @ #vk.66 )
                              case DomainCompromise
                              by contradiction
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                            next
                              case OIDCIdPIssueCode
                              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                       <'oidc_req', hash.2, nonce.2, 
                                                        code_challenge.1>)
                                     ) @ #vk.69 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            qed
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_4
                          solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.66 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode_case_1
                          solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                   <'oidc_req', hash.2, nonce.2, code_challenge.1>)
                                 ) @ #vk.68 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case OIDCIdPIssueCode_case_2
                          solve( !KU( ~signalClient ) @ #vk.66 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                      ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                     <'oidc_req', hash.2, nonce.2, code_challenge.1
                                                     >)
                                   ) @ #vk.69 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCTokenForward_case_1
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.31 < #x) ∧
                                   (#x < #vr.47) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_2
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.31 < #x) ∧
                                   (#x < #vr.47) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_3
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.31 < #x) ∧
                                   (#x < #vr.47) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_4
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.31 < #x) ∧
                                   (#x < #vr.47) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                      case TLSSetup
                      solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.45 )
                        case c_browserForward
                        solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                s256(~n.5)
                               ) ▶₃ #x.1 )
                          case OIDCIdPIssueCode
                          by contradiction
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                    case case_1
                    solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.45 )
                      case LinkClick
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~code ) @ #vk.54 )
                          case OIDCClientCodeRedirect_case_1
                          solve( !KU( browserForward(~sess.18, cert(~signalClient),
                                                     <'code', ~code, ~n.24>)
                                 ) @ #vk.56 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_2
                          solve( !KU( browserForward(~sess.18, cert(~signalClient),
                                                     <'code', ~code, ~n.24>)
                                 ) @ #vk.56 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_3
                          solve( !KU( browserForward(~sess.18, cert(~signalClient),
                                                     <'code', ~code, ~n.24>)
                                 ) @ #vk.56 )
                            case LinkClick
                            by contradiction
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( ~IdPKey ) @ #vk.56 )
                              case DomainCompromise
                              by contradiction
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.2 )
                            next
                              case OIDCIdPIssueCode
                              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                       <'oidc_req', hash.1, nonce.1, code_challenge
                                                       >)
                                     ) @ #vk.59 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            qed
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_4
                          solve( !KU( browserForward(~sess.18, cert(~signalClient),
                                                     <'code', ~code, ~n.24>)
                                 ) @ #vk.56 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.2 )
                        next
                          case OIDCIdPIssueCode_case_1
                          solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.58 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case OIDCIdPIssueCode_case_2
                          solve( !KU( ~IdPKey ) @ #vk.56 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.2 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                                   ) @ #vk.59 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCTokenForward_case_1
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.30 < #x) ∧
                                   (#x < #vr.48) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_2
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.30 < #x) ∧
                                   (#x < #vr.48) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_3
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.30 < #x) ∧
                                   (#x < #vr.48) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_4
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.30 < #x) ∧
                                   (#x < #vr.48) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        qed
                      qed
                    next
                      case OIDCIdPIssueCode
                      solve( St_OIDCIdP_Code( $A, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( tlsServerMsg(~sessPost, ~IdPKey,
                                                 <'token', 
                                                  <$A, username, nonce, 
                                                   h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>, 
                                                  sign(<$A, username, nonce, 
                                                        h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>,
                                                       x)
                                                 >)
                               ) @ #vk.23 )
                          case OIDCIdPTokenIssue
                          solve( !KU( tlsClientMsg(~sess.11, cert(~IdPKey),
                                                   <'oidc_req', 
                                                    h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2), nonce, 
                                                    s256(code_verifier)>)
                                 ) @ #vk.47 )
                            case OIDCAdversaryInit
                            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                     <'token_req', ~code.1, code_verifier>)
                                   ) @ #vk.49 )
                              case c_tlsClientMsg
                              solve( !KU( ~code.1 ) @ #vk.59 )
                                case OIDCClientCodeRedirect_case_1
                                solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.17>)
                                       ) @ #vk.61 )
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_2
                                solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.17>)
                                       ) @ #vk.61 )
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.62 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y.1 )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.1, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.70 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_3
                                solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.17>)
                                       ) @ #vk.61 )
                                  case LinkClick
                                  by contradiction
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.62 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y.2 )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.1, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.72 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_4
                                solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.17>)
                                       ) @ #vk.61 )
                                  case LinkClick
                                  by contradiction
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientLogin
                                by solve( GenBrowserSession( $Initiator.2, $IdP, ~code.1 ) @ #y.1 )
                              next
                                case OIDCIdPIssueCode_case_1
                                solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                                         <'oidc_req', hash.1, nonce.1, 
                                                          code_challenge>)
                                       ) @ #vk.63 )
                                  case c_tlsClientMsg
                                  by contradiction
                                qed
                              next
                                case OIDCIdPIssueCode_case_2
                                solve( !KU( ~signalClient ) @ #vk.61 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~signalClient
                                            ) @ #y.1 )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce.1, 
                                                            code_challenge>)
                                         ) @ #vk.64 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case OIDCTokenForward_case_1
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.37 < #x) ∧
                                         (#x < #vr.42) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_2
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.37 < #x) ∧
                                         (#x < #vr.42) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_3
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.37 < #x) ∧
                                         (#x < #vr.42) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_4
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.37 < #x) ∧
                                         (#x < #vr.42) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              qed
                            qed
                          next
                            case OIDCClientInit
                            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                     <'token_req', ~code.1, ~n.6>)
                                   ) @ #vk.45 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          next
                            case c_tlsClientMsg
                            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                     <'token_req', ~code.1, code_verifier>)
                                   ) @ #vk.49 )
                              case OIDCClientCodeRedirect
                              solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey),
                                                       <'login', $Username, pw>)
                                     ) @ #vk.37 )
                                case OIDCClientLogin
                                by contradiction
                              next
                                case c_tlsClientMsg
                                solve( !KU( s256(~n.6) ) @ #vk.43 )
                                  case OIDCClientInit_case_1
                                  solve( !KU( ~IdPKey ) @ #vk.47 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                              ) @ #y.1 )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.50 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case OIDCClientInit_case_2
                                  solve( GenBrowserSession( $Initiator, $A, ~sess.2 ) @ #y )
                                    case LinkClick
                                    solve( !Domain( $A, ~domain ) ▶₂ #y )
                                      case TLSSetup
                                      solve( !KU( ~sess.2 ) @ #vk.42 )
                                        case LinkClick
                                        solve( !KU( ~IdPKey ) @ #vk.50 )
                                          case DomainCompromise
                                          by contradiction
                                        next
                                          case OIDCClientLogin
                                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                                    ) @ #y.1 )
                                        next
                                          case OIDCIdPIssueCode
                                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                                   <'oidc_req', hash, nonce.1, 
                                                                    code_challenge>)
                                                 ) @ #vk.53 )
                                            case c_tlsClientMsg
                                            by contradiction
                                          qed
                                        qed
                                      next
                                        case OIDCClientLogin
                                        solve( !KU( ~IdPKey ) @ #vk.50 )
                                          case DomainCompromise
                                          by contradiction
                                        next
                                          case OIDCClientLogin
                                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                                    ) @ #y.1 )
                                        next
                                          case OIDCIdPIssueCode
                                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                                   <'oidc_req', hash, nonce.1, 
                                                                    code_challenge>)
                                                 ) @ #vk.54 )
                                            case c_tlsClientMsg
                                            by contradiction
                                          qed
                                        qed
                                      next
                                        case OIDCIdPIssueCode
                                        solve( !KU( ~signalClient.1 ) @ #vk.51 )
                                          case DomainCompromise
                                          solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                                                   <'oidc_req', hash, nonce.1, 
                                                                    code_challenge>)
                                                 ) @ #vk.52 )
                                            case c_tlsClientMsg
                                            by contradiction
                                          qed
                                        next
                                          case OIDCClientLogin
                                          by solve( GenBrowserSession( $Initiator.1, $IdP.1,
                                                                       ~signalClient.1
                                                    ) @ #y.1 )
                                        next
                                          case OIDCIdPIssueCode
                                          solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                                                   <'oidc_req', hash.1, nonce.2, 
                                                                    code_challenge.1>)
                                                 ) @ #vk.56 )
                                            case c_tlsClientMsg
                                            by contradiction
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case OIDCAdversaryInit
                                    solve( !Domain( $A, ~IdPKey.1 ) ▶₀ #y )
                                      case TLSSetup
                                      solve( !KU( ~sess.2 ) @ #vk.43 )
                                        case OIDCAdversaryInit
                                        solve( !KU( ~IdPKey ) @ #vk.55 )
                                          case DomainCompromise
                                          by contradiction
                                        next
                                          case OIDCClientLogin
                                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                                    ) @ #y.1 )
                                        next
                                          case OIDCIdPIssueCode
                                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                                   <'oidc_req', hash.1, nonce.1, 
                                                                    code_challenge.1>)
                                                 ) @ #vk.58 )
                                            case c_tlsClientMsg
                                            by contradiction
                                          qed
                                        qed
                                      next
                                        case OIDCClientLogin
                                        solve( !KU( ~IdPKey ) @ #vk.55 )
                                          case DomainCompromise
                                          by contradiction
                                        next
                                          case OIDCClientLogin
                                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                                    ) @ #y.1 )
                                        next
                                          case OIDCIdPIssueCode
                                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                                   <'oidc_req', hash.1, nonce.1, 
                                                                    code_challenge.1>)
                                                 ) @ #vk.59 )
                                            case c_tlsClientMsg
                                            by contradiction
                                          qed
                                        qed
                                      next
                                        case OIDCIdPIssueCode
                                        solve( !KU( ~signalClient.1 ) @ #vk.56 )
                                          case DomainCompromise
                                          solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                                                   <'oidc_req', hash.1, nonce.1, 
                                                                    code_challenge.1>)
                                                 ) @ #vk.57 )
                                            case OIDCAdversaryInit
                                            by contradiction
                                          next
                                            case c_tlsClientMsg
                                            by contradiction
                                          qed
                                        next
                                          case OIDCClientLogin
                                          by solve( GenBrowserSession( $Initiator.1, $IdP.1,
                                                                       ~signalClient.1
                                                    ) @ #y.1 )
                                        next
                                          case OIDCIdPIssueCode
                                          solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                                                   <'oidc_req', hash.2, nonce.2, 
                                                                    code_challenge.2>)
                                                 ) @ #vk.61 )
                                            case c_tlsClientMsg
                                            by contradiction
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case OIDCClientInit
                                    solve( !Domain( $A, ~IdPKey.1 ) ▶₀ #y )
                                      case TLSSetup
                                      solve( !KU( ~sess.2 ) @ #vk.42 )
                                        case OIDCClientInit
                                        solve( !KU( ~IdPKey ) @ #vk.47 )
                                          case DomainCompromise
                                          by contradiction
                                        next
                                          case OIDCClientLogin
                                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                                    ) @ #y.1 )
                                        next
                                          case OIDCIdPIssueCode
                                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                                   <'oidc_req', hash, nonce, 
                                                                    code_challenge>)
                                                 ) @ #vk.55 )
                                            case c_tlsClientMsg
                                            by contradiction
                                          qed
                                        qed
                                      next
                                        case OIDCClientLogin
                                        solve( !KU( ~IdPKey ) @ #vk.47 )
                                          case DomainCompromise
                                          by contradiction
                                        next
                                          case OIDCClientLogin
                                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                                    ) @ #y.1 )
                                        next
                                          case OIDCIdPIssueCode
                                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                                   <'oidc_req', hash, nonce, 
                                                                    code_challenge>)
                                                 ) @ #vk.51 )
                                            case c_tlsClientMsg
                                            by contradiction
                                          qed
                                        qed
                                      next
                                        case OIDCIdPIssueCode
                                        solve( !KU( ~signalClient.1 ) @ #vk.48 )
                                          case DomainCompromise
                                          solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                                                   <'oidc_req', hash, nonce, 
                                                                    code_challenge>)
                                                 ) @ #vk.49 )
                                            case OIDCClientInit
                                            by contradiction
                                          next
                                            case c_tlsClientMsg
                                            by contradiction
                                          qed
                                        next
                                          case OIDCClientLogin
                                          by solve( GenBrowserSession( $Initiator.1, $IdP.1,
                                                                       ~signalClient.1
                                                    ) @ #y.1 )
                                        next
                                          case OIDCIdPIssueCode
                                          solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                                                   <'oidc_req', hash.1, nonce.1, 
                                                                    code_challenge.1>)
                                                 ) @ #vk.53 )
                                            case c_tlsClientMsg
                                            by contradiction
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case c_s256
                                  by contradiction
                                qed
                              qed
                            next
                              case c_tlsClientMsg
                              solve( !KU( ~code.1 ) @ #vk.58 )
                                case OIDCClientCodeRedirect_case_1
                                solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.17>)
                                       ) @ #vk.60 )
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.61 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y.1 )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.1, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.74 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_2
                                solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.17>)
                                       ) @ #vk.60 )
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.62 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y.1 )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.2, nonce.1, 
                                                              code_challenge.1>)
                                           ) @ #vk.77 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_3
                                solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.17>)
                                       ) @ #vk.60 )
                                  case LinkClick
                                  by contradiction
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.61 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y.2 )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.1, nonce, 
                                                              code_challenge>)
                                           ) @ #vk.71 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientCodeRedirect_case_4
                                solve( !KU( browserForward(~sess.13, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.17>)
                                       ) @ #vk.60 )
                                  case LinkClick
                                  by contradiction
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.61 )
                                    case DomainCompromise
                                    by contradiction
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y.1 )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.1, nonce.1, 
                                                              code_challenge>)
                                           ) @ #vk.72 )
                                      case c_tlsClientMsg
                                      by contradiction
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction
                                qed
                              next
                                case OIDCClientLogin
                                by solve( GenBrowserSession( $Initiator.1, $IdP, ~code.1 ) @ #y.1 )
                              next
                                case OIDCIdPIssueCode_case_1
                                solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                                         <'oidc_req', hash.1, nonce.1, 
                                                          code_challenge>)
                                       ) @ #vk.62 )
                                  case c_tlsClientMsg
                                  by contradiction
                                qed
                              next
                                case OIDCIdPIssueCode_case_2
                                solve( !KU( ~signalClient ) @ #vk.60 )
                                  case DomainCompromise
                                  by contradiction
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                            ) @ #y.1 )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce.1, 
                                                            code_challenge>)
                                         ) @ #vk.63 )
                                    case c_tlsClientMsg
                                    by contradiction
                                  qed
                                qed
                              next
                                case OIDCTokenForward_case_1
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.37 < #x) ∧
                                         (#x < #vr.41) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_2
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.37 < #x) ∧
                                         (#x < #vr.41) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_3
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.37 < #x) ∧
                                         (#x < #vr.41) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              next
                                case OIDCTokenForward_case_4
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.37 < #x) ∧
                                         (#x < #vr.41) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction
                                next
                                  case case_2
                                  by contradiction
                                next
                                  case case_3
                                  by contradiction
                                qed
                              qed
                            qed
                          qed
                        next
                          case c_tlsServerMsg
                          by contradiction
                        qed
                      qed
                    next
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~code ) @ #vk.58 )
                          case OIDCClientCodeRedirect_case_1
                          solve( !KU( browserForward(~sess.18, cert(~signalClient.1),
                                                     <'code', ~code, ~n.24>)
                                 ) @ #vk.60 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_2
                          solve( !KU( browserForward(~sess.18, cert(~signalClient.1),
                                                     <'code', ~code, ~n.24>)
                                 ) @ #vk.60 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_3
                          solve( !KU( browserForward(~sess.18, cert(~signalClient.1),
                                                     <'code', ~code, ~n.24>)
                                 ) @ #vk.60 )
                            case LinkClick
                            by contradiction
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( ~IdPKey ) @ #vk.60 )
                              case DomainCompromise
                              by contradiction
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.2 )
                            next
                              case OIDCIdPIssueCode
                              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                       <'oidc_req', hash.1, nonce.1, code_challenge
                                                       >)
                                     ) @ #vk.63 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            qed
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_4
                          solve( !KU( browserForward(~sess.18, cert(~signalClient.1),
                                                     <'code', ~code, ~n.24>)
                                 ) @ #vk.60 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.2 )
                        next
                          case OIDCIdPIssueCode_case_1
                          solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.62 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case OIDCIdPIssueCode_case_2
                          solve( !KU( ~signalClient ) @ #vk.60 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                      ) @ #y.2 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                                   ) @ #vk.63 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCTokenForward_case_1
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.31 < #x) ∧
                                   (#x < #vr.49) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_2
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.31 < #x) ∧
                                   (#x < #vr.49) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_3
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.31 < #x) ∧
                                   (#x < #vr.49) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_4
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.31 < #x) ∧
                                   (#x < #vr.49) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                      case TLSSetup
                      solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.45 )
                        case LinkClick
                        solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                s256(~n.5)
                               ) ▶₃ #x.1 )
                          case OIDCIdPIssueCode
                          by contradiction
                        qed
                      next
                        case OIDCIdPIssueCode
                        by contradiction
                      next
                        case c_browserForward
                        solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                s256(~n.5)
                               ) ▶₃ #x.1 )
                          case OIDCIdPIssueCode
                          by contradiction
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                    case case_1
                    solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                               <'code', ~code, ~n.15>)
                           ) @ #vk.45 )
                      case LinkClick
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~code ) @ #vk.47 )
                          case OIDCClientCodeRedirect_case_1
                          solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.54 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_2
                          solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.54 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_3
                          solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.54 )
                            case LinkClick
                            by contradiction
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( ~IdPKey ) @ #vk.54 )
                              case DomainCompromise
                              by contradiction
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                            next
                              case OIDCIdPIssueCode
                              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                       <'oidc_req', hash.1, nonce.1, code_challenge
                                                       >)
                                     ) @ #vk.57 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            qed
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_4
                          solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.54 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode_case_1
                          solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.56 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case OIDCIdPIssueCode_case_2
                          solve( !KU( ~IdPKey ) @ #vk.54 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.1, code_challenge>)
                                   ) @ #vk.57 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCTokenForward_case_1
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.30 < #x) ∧
                                   (#x < #vr.46) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_2
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.30 < #x) ∧
                                   (#x < #vr.46) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_3
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.30 < #x) ∧
                                   (#x < #vr.46) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_4
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.30 < #x) ∧
                                   (#x < #vr.46) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        qed
                      qed
                    next
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~code ) @ #vk.59 )
                          case OIDCClientCodeRedirect_case_1
                          solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.61 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_2
                          solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.61 )
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_3
                          solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.61 )
                            case LinkClick
                            by contradiction
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( ~IdPKey ) @ #vk.61 )
                              case DomainCompromise
                              by contradiction
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                            next
                              case OIDCIdPIssueCode
                              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                       <'oidc_req', hash.1, nonce.2, code_challenge
                                                       >)
                                     ) @ #vk.64 )
                                case c_tlsClientMsg
                                by contradiction
                              qed
                            qed
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientCodeRedirect_case_4
                          solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.61 )
                            case LinkClick
                            by contradiction
                          next
                            case c_browserForward
                            by contradiction
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode_case_1
                          solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.2, code_challenge>)
                                 ) @ #vk.63 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        next
                          case OIDCIdPIssueCode_case_2
                          solve( !KU( ~signalClient ) @ #vk.61 )
                            case DomainCompromise
                            by contradiction
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                      ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.2, code_challenge>)
                                   ) @ #vk.64 )
                              case c_tlsClientMsg
                              by contradiction
                            qed
                          qed
                        next
                          case OIDCTokenForward_case_1
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.31 < #x) ∧
                                   (#x < #vr.47) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_2
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.31 < #x) ∧
                                   (#x < #vr.47) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_3
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.31 < #x) ∧
                                   (#x < #vr.47) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        next
                          case OIDCTokenForward_case_4
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.31 < #x) ∧
                                   (#x < #vr.47) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction
                          next
                            case case_2
                            by contradiction
                          next
                            case case_3
                            by contradiction
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                      case TLSSetup
                      solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.45 )
                        case LinkClick
                        solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                s256(~n.5)
                               ) ▶₃ #x.1 )
                          case OIDCIdPIssueCode
                          by contradiction
                        qed
                      next
                        case c_browserForward
                        solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                s256(~n.5)
                               ) ▶₃ #x.1 )
                          case OIDCIdPIssueCode
                          by contradiction
                        qed
                      qed
                    qed
                  qed
                next
                  case c_tlsClientMsg
                  solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                          s256(code_verifier)
                         ) ▶₃ #x.1 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~code ) @ #vk.49 )
                      case OIDCClientCodeRedirect_case_1
                      solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.51 )
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_2
                      solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.51 )
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_3
                      solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.51 )
                        case LinkClick
                        by contradiction
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.51 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge>)
                                 ) @ #vk.54 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_4
                      solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.51 )
                        case LinkClick
                        by contradiction
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode_case_1
                      solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.1, code_challenge>)
                             ) @ #vk.53 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    next
                      case OIDCIdPIssueCode_case_2
                      solve( !KU( ~signalClient ) @ #vk.51 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                                  ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.1, code_challenge>)
                               ) @ #vk.54 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_1
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.31 < #x) ∧
                               (#x < #vr.35) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_2
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.31 < #x) ∧
                               (#x < #vr.35) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_3
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.31 < #x) ∧
                               (#x < #vr.35) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_4
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.31 < #x) ∧
                               (#x < #vr.35) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case case_2
            by contradiction
          next
            case case_3
            by contradiction
          qed
        next
          case c_browserForward
          solve( !KU( tlsServerMsg(~sessPost, ~IdPKey,
                                   <'token', 
                                    <$A, username, nonce, h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>, 
                                    sign(<$A, username, nonce, 
                                          h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>,
                                         x)
                                   >)
                 ) @ #vk.21 )
            case OIDCIdPTokenIssue
            solve( !KU( tlsClientMsg(~sess.10, cert(~IdPKey),
                                     <'oidc_req', h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2), nonce, 
                                      s256(code_verifier)>)
                   ) @ #vk.41 )
              case OIDCAdversaryInit
              solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                       <'token_req', ~code.1, code_verifier>)
                     ) @ #vk.43 )
                case OIDCClientCodeRedirect
                solve( (∃ #x.
                         (UseCode( ~code ) @ #x)
                        ∧
                         (#vr.33 < #x) ∧
                         (#x < #vr.9) ∧
                         (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  solve( (∀ #z. (!KU( ~n.6 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
                    case case_1
                    solve( !KU( ~code ) @ #vk.43 )
                      case OIDCClientCodeRedirect_case_1
                      solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                 <'code', ~code, ~n.16>)
                             ) @ #vk.49 )
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_2
                      solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                 <'code', ~code, ~n.16>)
                             ) @ #vk.49 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.50 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash, nonce, code_challenge>)
                                 ) @ #vk.58 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_3
                      solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                 <'code', ~code, ~n.16>)
                             ) @ #vk.49 )
                        case LinkClick
                        by contradiction
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.50 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.2 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash, nonce, code_challenge>)
                                 ) @ #vk.60 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_4
                      solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                 <'code', ~code, ~n.16>)
                             ) @ #vk.49 )
                        case LinkClick
                        by contradiction
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode_case_1
                      solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.1, code_challenge>)
                             ) @ #vk.51 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    next
                      case OIDCIdPIssueCode_case_2
                      solve( !KU( ~signalClient ) @ #vk.49 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                  ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce.1, code_challenge>)
                               ) @ #vk.52 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_1
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.33 < #x) ∧
                               (#x < #vr.38) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_2
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.33 < #x) ∧
                               (#x < #vr.38) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_3
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.33 < #x) ∧
                               (#x < #vr.38) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_4
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.33 < #x) ∧
                               (#x < #vr.38) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    qed
                  next
                    case case_2
                    by contradiction
                  qed
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case c_tlsClientMsg
                solve( !KU( ~code.1 ) @ #vk.54 )
                  case OIDCClientCodeRedirect_case_1
                  solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                             <'code', ~code.1, ~n.16>)
                         ) @ #vk.56 )
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                             <'code', ~code.1, ~n.16>)
                         ) @ #vk.56 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.57 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.65 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                             <'code', ~code.1, ~n.16>)
                         ) @ #vk.56 )
                    case LinkClick
                    by contradiction
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.57 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.2 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.67 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                             <'code', ~code.1, ~n.16>)
                         ) @ #vk.56 )
                    case LinkClick
                    by contradiction
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~code.1 ) @ #y.1 )
                next
                  case OIDCIdPIssueCode_case_1
                  solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce.1, code_challenge>)
                         ) @ #vk.58 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                next
                  case OIDCIdPIssueCode_case_2
                  solve( !KU( ~signalClient ) @ #vk.56 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                              ) @ #y.1 )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.1, code_challenge>)
                           ) @ #vk.59 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case OIDCTokenForward_case_1
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.33 < #x) ∧
                           (#x < #vr.38) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_2
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.33 < #x) ∧
                           (#x < #vr.38) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_3
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.33 < #x) ∧
                           (#x < #vr.38) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_4
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.33 < #x) ∧
                           (#x < #vr.38) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                qed
              qed
            next
              case OIDCClientInit
              solve( (∀ #z. (!KU( ~n.8 ) @ #z) ⇒ ⊥)  ∥
                     (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
                case case_1
                solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                         <'token_req', ~code.1, ~n.6>)
                       ) @ #vk.39 )
                  case OIDCClientCodeRedirect
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.33 < #x) ∧
                           (#x < #vr.9) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    solve( !KU( ~code ) @ #vk.39 )
                      case OIDCClientCodeRedirect_case_1
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.16>)
                             ) @ #vk.42 )
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_2
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.16>)
                             ) @ #vk.42 )
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_3
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.16>)
                             ) @ #vk.42 )
                        case LinkClick
                        by contradiction
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_4
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.16>)
                             ) @ #vk.42 )
                        case LinkClick
                        by contradiction
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode_case_1
                      solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.44 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    next
                      case OIDCIdPIssueCode_case_2
                      solve( !KU( ~signalClient ) @ #vk.42 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                                  ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce, code_challenge>)
                               ) @ #vk.45 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_1
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.33 < #x) ∧
                               (#x < #vr.37) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_2
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.33 < #x) ∧
                               (#x < #vr.37) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_3
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.33 < #x) ∧
                               (#x < #vr.37) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_4
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.33 < #x) ∧
                               (#x < #vr.37) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    qed
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case c_tlsClientMsg
                  by contradiction
                qed
              next
                case case_2
                by contradiction
              qed
            next
              case c_tlsClientMsg
              solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                       <'token_req', ~code.1, code_verifier>)
                     ) @ #vk.42 )
                case OIDCClientCodeRedirect
                solve( (∃ #x.
                         (UseCode( ~code ) @ #x)
                        ∧
                         (#vr.33 < #x) ∧
                         (#x < #vr.9) ∧
                         (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  solve( (∀ #z. (!KU( ~n.6 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
                    case case_1
                    solve( !KU( ~code ) @ #vk.42 )
                      case OIDCClientCodeRedirect_case_1
                      solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                 <'code', ~code, ~n.16>)
                             ) @ #vk.50 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.51 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash, nonce, code_challenge>)
                                 ) @ #vk.64 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_2
                      solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                 <'code', ~code, ~n.16>)
                             ) @ #vk.50 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.52 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                                 ) @ #vk.67 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_3
                      solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                 <'code', ~code, ~n.16>)
                             ) @ #vk.50 )
                        case LinkClick
                        by contradiction
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.51 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.2 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash, nonce, code_challenge>)
                                 ) @ #vk.61 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientCodeRedirect_case_4
                      solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                 <'code', ~code, ~n.16>)
                             ) @ #vk.50 )
                        case LinkClick
                        by contradiction
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.51 )
                          case DomainCompromise
                          by contradiction
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash, nonce.1, code_challenge>)
                                 ) @ #vk.62 )
                            case c_tlsClientMsg
                            by contradiction
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction
                      qed
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode_case_1
                      solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.1, code_challenge>)
                             ) @ #vk.52 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    next
                      case OIDCIdPIssueCode_case_2
                      solve( !KU( ~signalClient ) @ #vk.50 )
                        case DomainCompromise
                        by contradiction
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                                  ) @ #y.1 )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce.1, code_challenge>)
                               ) @ #vk.53 )
                          case c_tlsClientMsg
                          by contradiction
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_1
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.33 < #x) ∧
                               (#x < #vr.37) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_2
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.33 < #x) ∧
                               (#x < #vr.37) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_3
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.33 < #x) ∧
                               (#x < #vr.37) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    next
                      case OIDCTokenForward_case_4
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.33 < #x) ∧
                               (#x < #vr.37) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction
                      next
                        case case_2
                        by contradiction
                      next
                        case case_3
                        by contradiction
                      qed
                    qed
                  next
                    case case_2
                    by contradiction
                  qed
                next
                  case case_2
                  by contradiction
                next
                  case case_3
                  by contradiction
                qed
              next
                case c_tlsClientMsg
                solve( !KU( ~code.1 ) @ #vk.54 )
                  case OIDCClientCodeRedirect_case_1
                  solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                             <'code', ~code.1, ~n.16>)
                         ) @ #vk.56 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.57 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.70 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                             <'code', ~code.1, ~n.16>)
                         ) @ #vk.56 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.58 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                             ) @ #vk.73 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                             <'code', ~code.1, ~n.16>)
                         ) @ #vk.56 )
                    case LinkClick
                    by contradiction
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.57 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.2 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.67 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                             <'code', ~code.1, ~n.16>)
                         ) @ #vk.56 )
                    case LinkClick
                    by contradiction
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.57 )
                      case DomainCompromise
                      by contradiction
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.1, code_challenge>)
                             ) @ #vk.68 )
                        case c_tlsClientMsg
                        by contradiction
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction
                  qed
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator, $IdP, ~code.1 ) @ #y.1 )
                next
                  case OIDCIdPIssueCode_case_1
                  solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce.1, code_challenge>)
                         ) @ #vk.58 )
                    case c_tlsClientMsg
                    by contradiction
                  qed
                next
                  case OIDCIdPIssueCode_case_2
                  solve( !KU( ~signalClient ) @ #vk.56 )
                    case DomainCompromise
                    by contradiction
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                              ) @ #y.1 )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.1, code_challenge>)
                           ) @ #vk.59 )
                      case c_tlsClientMsg
                      by contradiction
                    qed
                  qed
                next
                  case OIDCTokenForward_case_1
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.33 < #x) ∧
                           (#x < #vr.37) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_2
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.33 < #x) ∧
                           (#x < #vr.37) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_3
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.33 < #x) ∧
                           (#x < #vr.37) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                next
                  case OIDCTokenForward_case_4
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.33 < #x) ∧
                           (#x < #vr.37) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction
                  next
                    case case_2
                    by contradiction
                  next
                    case case_3
                    by contradiction
                  qed
                qed
              qed
            qed
          next
            case c_tlsServerMsg
            by contradiction
          qed
        qed
      next
        case OIDCTokenForward_case_4
        solve( !KU( browserForward(~sess.4, cert(~signalClient),
                                   <'code', code, ~n.6>)
               ) @ #vk.22 )
          case LinkClick
          solve( !KU( tlsServerMsg(~sessPost, ~IdPKey,
                                   <'token', 
                                    <$A, username, nonce, h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>, 
                                    sign(<$A, username, nonce, 
                                          h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>,
                                         x)
                                   >)
                 ) @ #vk.21 )
            case OIDCIdPTokenIssue
            solve( !KU( tlsClientMsg(~sess.9, cert(~IdPKey),
                                     <'oidc_req', h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2), nonce, 
                                      s256(code_verifier)>)
                   ) @ #vk.35 )
              case OIDCAdversaryInit
              solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                       <'token_req', ~code.1, code_verifier>)
                     ) @ #vk.37 )
                case OIDCClientCodeRedirect
                solve( (∃ #x.
                         (UseCode( ~code ) @ #x)
                        ∧
                         (#vr.30 < #x) ∧
                         (#x < #vr.9) ∧
                         (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  solve( (∀ #z. (!KU( ~n.6 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
                    case case_1
                    solve( !KU( ~code ) @ #vk.32 )
                      case OIDCClientCodeRedirect_case_1
                      solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.43 )
                        case c_browserForward
                        by contradiction /* cyclic */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_2
                      solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.43 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.44 )
                          case DomainCompromise
                          by contradiction /* from formulas */
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash, nonce, code_challenge>)
                                 ) @ #vk.52 )
                            case c_tlsClientMsg
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction /* cyclic */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_3
                      solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.43 )
                        case LinkClick
                        by contradiction /* cyclic */
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.44 )
                          case DomainCompromise
                          by contradiction /* from formulas */
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash, nonce, code_challenge>)
                                 ) @ #vk.54 )
                            case c_tlsClientMsg
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction /* cyclic */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_4
                      solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.43 )
                        case LinkClick
                        by contradiction /* cyclic */
                      next
                        case c_browserForward
                        by contradiction /* cyclic */
                      qed
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                    next
                      case OIDCIdPIssueCode_case_1
                      solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.1, code_challenge>)
                             ) @ #vk.45 )
                        case c_tlsClientMsg
                        by contradiction /* cyclic */
                      qed
                    next
                      case OIDCIdPIssueCode_case_2
                      solve( !KU( ~IdPKey ) @ #vk.43 )
                        case DomainCompromise
                        by contradiction /* from formulas */
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce.1, code_challenge>)
                               ) @ #vk.46 )
                          case c_tlsClientMsg
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_1
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.30 < #x) ∧
                               (#x < #vr.35) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      next
                        case case_3
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCTokenForward_case_2
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.30 < #x) ∧
                               (#x < #vr.35) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      next
                        case case_3
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCTokenForward_case_3
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.30 < #x) ∧
                               (#x < #vr.35) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      next
                        case case_3
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCTokenForward_case_4
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.30 < #x) ∧
                               (#x < #vr.35) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      next
                        case case_3
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                qed
              next
                case c_tlsClientMsg
                solve( !KU( ~code.1 ) @ #vk.48 )
                  case OIDCClientCodeRedirect_case_1
                  solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                             <'code', ~code.1, ~n.15>)
                         ) @ #vk.50 )
                    case c_browserForward
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                             <'code', ~code.1, ~n.15>)
                         ) @ #vk.50 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.51 )
                      case DomainCompromise
                      by contradiction /* from formulas */
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.59 )
                        case c_tlsClientMsg
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                             <'code', ~code.1, ~n.15>)
                         ) @ #vk.50 )
                    case LinkClick
                    by contradiction /* cyclic */
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.51 )
                      case DomainCompromise
                      by contradiction /* from formulas */
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.61 )
                        case c_tlsClientMsg
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                             <'code', ~code.1, ~n.15>)
                         ) @ #vk.50 )
                    case LinkClick
                    by contradiction /* cyclic */
                  next
                    case c_browserForward
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~code.1 ) @ #y )
                next
                  case OIDCIdPIssueCode_case_1
                  solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce.1, code_challenge>)
                         ) @ #vk.52 )
                    case c_tlsClientMsg
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCIdPIssueCode_case_2
                  solve( !KU( ~IdPKey ) @ #vk.50 )
                    case DomainCompromise
                    by contradiction /* from formulas */
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.1, code_challenge>)
                           ) @ #vk.53 )
                      case c_tlsClientMsg
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case OIDCTokenForward_case_1
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.30 < #x) ∧
                           (#x < #vr.35) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    by contradiction /* from formulas */
                  qed
                next
                  case OIDCTokenForward_case_2
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.30 < #x) ∧
                           (#x < #vr.35) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    by contradiction /* from formulas */
                  qed
                next
                  case OIDCTokenForward_case_3
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.30 < #x) ∧
                           (#x < #vr.35) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    by contradiction /* from formulas */
                  qed
                next
                  case OIDCTokenForward_case_4
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.30 < #x) ∧
                           (#x < #vr.35) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case OIDCClientInit
              solve( (∀ #z. (!KU( ~n.8 ) @ #z) ⇒ ⊥)  ∥
                     (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
                case case_1
                solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                         <'token_req', ~code.1, ~n.6>)
                       ) @ #vk.33 )
                  case OIDCClientCodeRedirect
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.30 < #x) ∧
                           (#x < #vr.9) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    solve( !KU( ~code ) @ #vk.28 )
                      case OIDCClientCodeRedirect_case_1
                      solve( !KU( browserForward(~sess.10, cert(~signalClient),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.36 )
                        case c_browserForward
                        by contradiction /* cyclic */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_2
                      solve( !KU( browserForward(~sess.10, cert(~signalClient),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.36 )
                        case c_browserForward
                        by contradiction /* cyclic */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_3
                      solve( !KU( browserForward(~sess.10, cert(~signalClient),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.36 )
                        case LinkClick
                        by contradiction /* cyclic */
                      next
                        case c_browserForward
                        by contradiction /* cyclic */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_4
                      solve( !KU( browserForward(~sess.10, cert(~signalClient),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.36 )
                        case LinkClick
                        by contradiction /* cyclic */
                      next
                        case c_browserForward
                        by contradiction /* cyclic */
                      qed
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y )
                    next
                      case OIDCIdPIssueCode_case_1
                      solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.38 )
                        case c_tlsClientMsg
                        by contradiction /* cyclic */
                      qed
                    next
                      case OIDCIdPIssueCode_case_2
                      solve( !KU( ~IdPKey ) @ #vk.36 )
                        case DomainCompromise
                        by contradiction /* from formulas */
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator, $IdP, ~IdPKey ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce, code_challenge>)
                               ) @ #vk.39 )
                          case c_tlsClientMsg
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_1
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.30 < #x) ∧
                               (#x < #vr.34) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      next
                        case case_3
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCTokenForward_case_2
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.30 < #x) ∧
                               (#x < #vr.34) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      next
                        case case_3
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCTokenForward_case_3
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.30 < #x) ∧
                               (#x < #vr.34) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      next
                        case case_3
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCTokenForward_case_4
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.30 < #x) ∧
                               (#x < #vr.34) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      next
                        case case_3
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    by contradiction /* from formulas */
                  qed
                next
                  case c_tlsClientMsg
                  by contradiction /* from formulas */
                qed
              next
                case case_2
                by contradiction /* from formulas */
              qed
            next
              case c_tlsClientMsg
              solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                       <'token_req', ~code.1, code_verifier>)
                     ) @ #vk.36 )
                case OIDCClientCodeRedirect
                solve( (∃ #x.
                         (UseCode( ~code ) @ #x)
                        ∧
                         (#vr.30 < #x) ∧
                         (#x < #vr.9) ∧
                         (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  solve( (∀ #z. (!KU( ~n.6 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
                    case case_1
                    solve( !KU( ~code ) @ #vk.31 )
                      case OIDCClientCodeRedirect_case_1
                      solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.44 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.45 )
                          case DomainCompromise
                          by contradiction /* from formulas */
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash, nonce, code_challenge>)
                                 ) @ #vk.58 )
                            case c_tlsClientMsg
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction /* cyclic */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_2
                      solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.44 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.46 )
                          case DomainCompromise
                          by contradiction /* from formulas */
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                                 ) @ #vk.61 )
                            case c_tlsClientMsg
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction /* cyclic */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_3
                      solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.44 )
                        case LinkClick
                        by contradiction /* cyclic */
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.45 )
                          case DomainCompromise
                          by contradiction /* from formulas */
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash, nonce, code_challenge>)
                                 ) @ #vk.55 )
                            case c_tlsClientMsg
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction /* cyclic */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_4
                      solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.44 )
                        case LinkClick
                        by contradiction /* cyclic */
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.45 )
                          case DomainCompromise
                          by contradiction /* from formulas */
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash, nonce.1, code_challenge>)
                                 ) @ #vk.56 )
                            case c_tlsClientMsg
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction /* cyclic */
                      qed
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y )
                    next
                      case OIDCIdPIssueCode_case_1
                      solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.1, code_challenge>)
                             ) @ #vk.46 )
                        case c_tlsClientMsg
                        by contradiction /* cyclic */
                      qed
                    next
                      case OIDCIdPIssueCode_case_2
                      solve( !KU( ~IdPKey ) @ #vk.44 )
                        case DomainCompromise
                        by contradiction /* from formulas */
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator, $IdP, ~IdPKey ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce.1, code_challenge>)
                               ) @ #vk.47 )
                          case c_tlsClientMsg
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_1
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.30 < #x) ∧
                               (#x < #vr.34) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      next
                        case case_3
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCTokenForward_case_2
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.30 < #x) ∧
                               (#x < #vr.34) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      next
                        case case_3
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCTokenForward_case_3
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.30 < #x) ∧
                               (#x < #vr.34) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      next
                        case case_3
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCTokenForward_case_4
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.30 < #x) ∧
                               (#x < #vr.34) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      next
                        case case_3
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                qed
              next
                case c_tlsClientMsg
                solve( !KU( ~code.1 ) @ #vk.48 )
                  case OIDCClientCodeRedirect_case_1
                  solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                             <'code', ~code.1, ~n.15>)
                         ) @ #vk.50 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.51 )
                      case DomainCompromise
                      by contradiction /* from formulas */
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.64 )
                        case c_tlsClientMsg
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                             <'code', ~code.1, ~n.15>)
                         ) @ #vk.50 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.52 )
                      case DomainCompromise
                      by contradiction /* from formulas */
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.1, code_challenge.1>)
                             ) @ #vk.67 )
                        case c_tlsClientMsg
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                             <'code', ~code.1, ~n.15>)
                         ) @ #vk.50 )
                    case LinkClick
                    by contradiction /* cyclic */
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.51 )
                      case DomainCompromise
                      by contradiction /* from formulas */
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce, code_challenge>)
                             ) @ #vk.61 )
                        case c_tlsClientMsg
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( !KU( browserForward(~sess.11, cert(~signalClient),
                                             <'code', ~code.1, ~n.15>)
                         ) @ #vk.50 )
                    case LinkClick
                    by contradiction /* cyclic */
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.51 )
                      case DomainCompromise
                      by contradiction /* from formulas */
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.1, code_challenge>)
                             ) @ #vk.62 )
                        case c_tlsClientMsg
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator, $IdP, ~code.1 ) @ #y )
                next
                  case OIDCIdPIssueCode_case_1
                  solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce.1, code_challenge>)
                         ) @ #vk.52 )
                    case c_tlsClientMsg
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCIdPIssueCode_case_2
                  solve( !KU( ~IdPKey ) @ #vk.50 )
                    case DomainCompromise
                    by contradiction /* from formulas */
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator, $IdP, ~IdPKey ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.1, code_challenge>)
                           ) @ #vk.53 )
                      case c_tlsClientMsg
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case OIDCTokenForward_case_1
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.30 < #x) ∧
                           (#x < #vr.34) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    by contradiction /* from formulas */
                  qed
                next
                  case OIDCTokenForward_case_2
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.30 < #x) ∧
                           (#x < #vr.34) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    by contradiction /* from formulas */
                  qed
                next
                  case OIDCTokenForward_case_3
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.30 < #x) ∧
                           (#x < #vr.34) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    by contradiction /* from formulas */
                  qed
                next
                  case OIDCTokenForward_case_4
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.30 < #x) ∧
                           (#x < #vr.34) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case c_tlsServerMsg
            by contradiction /* cyclic */
          qed
        next
          case OIDCIdPIssueCode
          solve( (∃ #x.
                   (UseCode( ~code ) @ #x)
                  ∧
                   (#vr.29 < #x) ∧
                   (#x < #vr.9) ∧
                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                 (∃ signalClient domain #x #y.
                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                   (CompromisedDomain( signalClient, domain ) @ #y)) )
            case case_1
            solve( !Domain( $IdP, ~IdPKey.1 ) ▶₁ #x.1 )
              case TLSSetup
              solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey),
                                       <'oidc_req', hash.1, ~n.4, code_challenge>)
                     ) @ #vk.34 )
                case c_tlsClientMsg
                solve( !KU( tlsClientMsg(~sess.3, cert(~IdPKey.1),
                                         <'token_req', ~code, code_verifier>)
                       ) @ #vk.36 )
                  case OIDCClientCodeRedirect_case_1
                  solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                    case case_1
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.46 )
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~code ) @ #vk.62 )
                          case OIDCClientCodeRedirect_case_1
                          solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                     <'code', ~code, ~n.30>)
                                 ) @ #vk.64 )
                            case c_browserForward
                            by contradiction /* cyclic */
                          qed
                        next
                          case OIDCClientCodeRedirect_case_2
                          solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                     <'code', ~code, ~n.30>)
                                 ) @ #vk.64 )
                            case c_browserForward
                            by contradiction /* cyclic */
                          qed
                        next
                          case OIDCClientCodeRedirect_case_3
                          solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                     <'code', ~code, ~n.30>)
                                 ) @ #vk.64 )
                            case LinkClick
                            by contradiction /* cyclic */
                          next
                            case c_browserForward
                            by contradiction /* cyclic */
                          qed
                        next
                          case OIDCClientCodeRedirect_case_4
                          solve( !KU( browserForward(~sess.19, cert(~signalClient.1),
                                                     <'code', ~code, ~n.30>)
                                 ) @ #vk.64 )
                            case LinkClick
                            by contradiction /* cyclic */
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( ~IdPKey ) @ #vk.64 )
                              case DomainCompromise
                              by contradiction /* from formulas */
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                            next
                              case OIDCIdPIssueCode
                              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                       <'oidc_req', hash.1, nonce.2, code_challenge
                                                       >)
                                     ) @ #vk.67 )
                                case c_tlsClientMsg
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_browserForward
                            by contradiction /* cyclic */
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                        next
                          case OIDCIdPIssueCode_case_1
                          solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.2, code_challenge>)
                                 ) @ #vk.66 )
                            case c_tlsClientMsg
                            by contradiction /* cyclic */
                          qed
                        next
                          case OIDCIdPIssueCode_case_2
                          solve( !KU( ~signalClient ) @ #vk.64 )
                            case DomainCompromise
                            by contradiction /* from formulas */
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                      ) @ #y )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.2, code_challenge>)
                                   ) @ #vk.67 )
                              case c_tlsClientMsg
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case OIDCTokenForward_case_1
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.54) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCTokenForward_case_2
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.54) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCTokenForward_case_3
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.54) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCTokenForward_case_4
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.54) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                      case TLSSetup
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.14>)
                             ) @ #vk.46 )
                        case c_browserForward
                        solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                s256(~n.5)
                               ) ▶₃ #x.1 )
                          case OIDCIdPIssueCode
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                    case case_1
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.46 )
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~code ) @ #vk.65 )
                          case OIDCClientCodeRedirect_case_1
                          solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                     <'code', ~code, ~n.22>)
                                 ) @ #vk.67 )
                            case c_browserForward
                            by contradiction /* cyclic */
                          qed
                        next
                          case OIDCClientCodeRedirect_case_2
                          solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                     <'code', ~code, ~n.22>)
                                 ) @ #vk.67 )
                            case c_browserForward
                            by contradiction /* cyclic */
                          qed
                        next
                          case OIDCClientCodeRedirect_case_3
                          solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                     <'code', ~code, ~n.22>)
                                 ) @ #vk.67 )
                            case LinkClick
                            by contradiction /* cyclic */
                          next
                            case c_browserForward
                            by contradiction /* cyclic */
                          qed
                        next
                          case OIDCClientCodeRedirect_case_4
                          solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                     <'code', ~code, ~n.22>)
                                 ) @ #vk.67 )
                            case LinkClick
                            by contradiction /* cyclic */
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( ~IdPKey ) @ #vk.67 )
                              case DomainCompromise
                              by contradiction /* from formulas */
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                            next
                              case OIDCIdPIssueCode
                              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                       <'oidc_req', hash.2, nonce.3, 
                                                        code_challenge.1>)
                                     ) @ #vk.70 )
                                case c_tlsClientMsg
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_browserForward
                            by contradiction /* cyclic */
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                        next
                          case OIDCIdPIssueCode_case_1
                          solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                   <'oidc_req', hash.2, nonce.3, code_challenge.1>)
                                 ) @ #vk.69 )
                            case c_tlsClientMsg
                            by contradiction /* cyclic */
                          qed
                        next
                          case OIDCIdPIssueCode_case_2
                          solve( !KU( ~signalClient ) @ #vk.67 )
                            case DomainCompromise
                            by contradiction /* from formulas */
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                      ) @ #y )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                     <'oidc_req', hash.2, nonce.3, code_challenge.1
                                                     >)
                                   ) @ #vk.70 )
                              case c_tlsClientMsg
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case OIDCTokenForward_case_1
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.45) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCTokenForward_case_2
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.45) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCTokenForward_case_3
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.45) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCTokenForward_case_4
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.45) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                      case TLSSetup
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.14>)
                             ) @ #vk.46 )
                        case c_browserForward
                        solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                s256(~n.5)
                               ) ▶₃ #x.1 )
                          case OIDCIdPIssueCode
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                    case case_1
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.46 )
                      case LinkClick
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.6)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~code ) @ #vk.55 )
                          case OIDCClientCodeRedirect_case_1
                          solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.57 )
                            case c_browserForward
                            by contradiction /* cyclic */
                          qed
                        next
                          case OIDCClientCodeRedirect_case_2
                          solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.57 )
                            case c_browserForward
                            by contradiction /* cyclic */
                          qed
                        next
                          case OIDCClientCodeRedirect_case_3
                          solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.57 )
                            case LinkClick
                            by contradiction /* cyclic */
                          next
                            case c_browserForward
                            by contradiction /* cyclic */
                          qed
                        next
                          case OIDCClientCodeRedirect_case_4
                          solve( !KU( browserForward(~sess.17, cert(~signalClient),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.57 )
                            case LinkClick
                            by contradiction /* cyclic */
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( ~IdPKey ) @ #vk.57 )
                              case DomainCompromise
                              by contradiction /* from formulas */
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                            next
                              case OIDCIdPIssueCode
                              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                       <'oidc_req', hash.1, nonce.2, code_challenge
                                                       >)
                                     ) @ #vk.60 )
                                case c_tlsClientMsg
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_browserForward
                            by contradiction /* cyclic */
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode_case_1
                          solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.2, code_challenge>)
                                 ) @ #vk.59 )
                            case c_tlsClientMsg
                            by contradiction /* cyclic */
                          qed
                        next
                          case OIDCIdPIssueCode_case_2
                          solve( !KU( ~IdPKey ) @ #vk.57 )
                            case DomainCompromise
                            by contradiction /* from formulas */
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.2, code_challenge>)
                                   ) @ #vk.60 )
                              case c_tlsClientMsg
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case OIDCTokenForward_case_1
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.28 < #x) ∧
                                   (#x < #vr.46) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCTokenForward_case_2
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.28 < #x) ∧
                                   (#x < #vr.46) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCTokenForward_case_3
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.28 < #x) ∧
                                   (#x < #vr.46) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCTokenForward_case_4
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.28 < #x) ∧
                                   (#x < #vr.46) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~code ) @ #vk.59 )
                          case OIDCClientCodeRedirect_case_1
                          solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.61 )
                            case c_browserForward
                            by contradiction /* cyclic */
                          qed
                        next
                          case OIDCClientCodeRedirect_case_2
                          solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.61 )
                            case c_browserForward
                            by contradiction /* cyclic */
                          qed
                        next
                          case OIDCClientCodeRedirect_case_3
                          solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.61 )
                            case LinkClick
                            by contradiction /* cyclic */
                          next
                            case c_browserForward
                            by contradiction /* cyclic */
                          qed
                        next
                          case OIDCClientCodeRedirect_case_4
                          solve( !KU( browserForward(~sess.17, cert(~signalClient.1),
                                                     <'code', ~code, ~n.23>)
                                 ) @ #vk.61 )
                            case LinkClick
                            by contradiction /* cyclic */
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( ~IdPKey ) @ #vk.61 )
                              case DomainCompromise
                              by contradiction /* from formulas */
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                            next
                              case OIDCIdPIssueCode
                              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                       <'oidc_req', hash.1, nonce.2, code_challenge
                                                       >)
                                     ) @ #vk.64 )
                                case c_tlsClientMsg
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_browserForward
                            by contradiction /* cyclic */
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode_case_1
                          solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.2, code_challenge>)
                                 ) @ #vk.63 )
                            case c_tlsClientMsg
                            by contradiction /* cyclic */
                          qed
                        next
                          case OIDCIdPIssueCode_case_2
                          solve( !KU( ~signalClient ) @ #vk.61 )
                            case DomainCompromise
                            by contradiction /* from formulas */
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                      ) @ #y.1 )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.2, code_challenge>)
                                   ) @ #vk.64 )
                              case c_tlsClientMsg
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case OIDCTokenForward_case_1
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.47) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCTokenForward_case_2
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.47) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCTokenForward_case_3
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.47) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCTokenForward_case_4
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.47) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                      case TLSSetup
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.14>)
                             ) @ #vk.46 )
                        case LinkClick
                        solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                s256(~n.6)
                               ) ▶₃ #x.1 )
                          case OIDCIdPIssueCode
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_browserForward
                        solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                s256(~n.5)
                               ) ▶₃ #x.1 )
                          case OIDCIdPIssueCode
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( (∀ #z. (!KU( ~n.5 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $IdP, domain ) @ #z)) )
                    case case_1
                    solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                               <'code', ~code, ~n.14>)
                           ) @ #vk.46 )
                      case LinkClick
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~code ) @ #vk.48 )
                          case OIDCClientCodeRedirect_case_1
                          solve( !KU( browserForward(~sess.16, cert(~signalClient),
                                                     <'code', ~code, ~n.22>)
                                 ) @ #vk.55 )
                            case c_browserForward
                            by contradiction /* cyclic */
                          qed
                        next
                          case OIDCClientCodeRedirect_case_2
                          solve( !KU( browserForward(~sess.16, cert(~signalClient),
                                                     <'code', ~code, ~n.22>)
                                 ) @ #vk.55 )
                            case c_browserForward
                            by contradiction /* cyclic */
                          qed
                        next
                          case OIDCClientCodeRedirect_case_3
                          solve( !KU( browserForward(~sess.16, cert(~signalClient),
                                                     <'code', ~code, ~n.22>)
                                 ) @ #vk.55 )
                            case LinkClick
                            by contradiction /* cyclic */
                          next
                            case c_browserForward
                            by contradiction /* cyclic */
                          qed
                        next
                          case OIDCClientCodeRedirect_case_4
                          solve( !KU( browserForward(~sess.16, cert(~signalClient),
                                                     <'code', ~code, ~n.22>)
                                 ) @ #vk.55 )
                            case LinkClick
                            by contradiction /* cyclic */
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( ~IdPKey ) @ #vk.55 )
                              case DomainCompromise
                              by contradiction /* from formulas */
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                            next
                              case OIDCIdPIssueCode
                              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                       <'oidc_req', hash.1, nonce.2, code_challenge
                                                       >)
                                     ) @ #vk.58 )
                                case c_tlsClientMsg
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_browserForward
                            by contradiction /* cyclic */
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                        next
                          case OIDCIdPIssueCode_case_1
                          solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.2, code_challenge>)
                                 ) @ #vk.57 )
                            case c_tlsClientMsg
                            by contradiction /* cyclic */
                          qed
                        next
                          case OIDCIdPIssueCode_case_2
                          solve( !KU( ~IdPKey ) @ #vk.55 )
                            case DomainCompromise
                            by contradiction /* from formulas */
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.2, code_challenge>)
                                   ) @ #vk.58 )
                              case c_tlsClientMsg
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case OIDCTokenForward_case_1
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.28 < #x) ∧
                                   (#x < #vr.44) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCTokenForward_case_2
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.28 < #x) ∧
                                   (#x < #vr.44) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCTokenForward_case_3
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.28 < #x) ∧
                                   (#x < #vr.44) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCTokenForward_case_4
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.28 < #x) ∧
                                   (#x < #vr.44) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case OIDCIdPIssueCode
                      solve( St_OIDCIdP_Code( $A, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( tlsServerMsg(~sessPost, ~IdPKey,
                                                 <'token', 
                                                  <$A, username, nonce, 
                                                   h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>, 
                                                  sign(<$A, username, nonce, 
                                                        h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>,
                                                       x)
                                                 >)
                               ) @ #vk.23 )
                          case OIDCIdPTokenIssue
                          solve( !KU( tlsClientMsg(~sess.10, cert(~IdPKey),
                                                   <'oidc_req', 
                                                    h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2), nonce, 
                                                    s256(code_verifier)>)
                                 ) @ #vk.48 )
                            case OIDCAdversaryInit
                            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                     <'token_req', ~code.2, code_verifier>)
                                   ) @ #vk.50 )
                              case c_tlsClientMsg
                              solve( !KU( ~code.2 ) @ #vk.60 )
                                case OIDCClientCodeRedirect_case_1
                                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.16>)
                                       ) @ #vk.62 )
                                  case c_browserForward
                                  by contradiction /* cyclic */
                                qed
                              next
                                case OIDCClientCodeRedirect_case_2
                                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.16>)
                                       ) @ #vk.62 )
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.63 )
                                    case DomainCompromise
                                    by contradiction /* from formulas */
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.1, nonce.1, 
                                                              code_challenge>)
                                           ) @ #vk.71 )
                                      case c_tlsClientMsg
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction /* cyclic */
                                qed
                              next
                                case OIDCClientCodeRedirect_case_3
                                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.16>)
                                       ) @ #vk.62 )
                                  case LinkClick
                                  by contradiction /* cyclic */
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.63 )
                                    case DomainCompromise
                                    by contradiction /* from formulas */
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y.1 )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.1, nonce.1, 
                                                              code_challenge>)
                                           ) @ #vk.73 )
                                      case c_tlsClientMsg
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction /* cyclic */
                                qed
                              next
                                case OIDCClientCodeRedirect_case_4
                                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.16>)
                                       ) @ #vk.62 )
                                  case LinkClick
                                  by contradiction /* cyclic */
                                next
                                  case c_browserForward
                                  by contradiction /* cyclic */
                                qed
                              next
                                case OIDCClientLogin
                                by solve( GenBrowserSession( $Initiator.2, $IdP, ~code.1 ) @ #y )
                              next
                                case OIDCIdPIssueCode_case_1
                                solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                                         <'oidc_req', hash.1, nonce.2, 
                                                          code_challenge>)
                                       ) @ #vk.64 )
                                  case c_tlsClientMsg
                                  by contradiction /* cyclic */
                                qed
                              next
                                case OIDCIdPIssueCode_case_2
                                solve( !KU( ~signalClient ) @ #vk.62 )
                                  case DomainCompromise
                                  by contradiction /* from formulas */
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.2, $IdP, ~signalClient
                                            ) @ #y )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce.2, 
                                                            code_challenge>)
                                         ) @ #vk.65 )
                                    case c_tlsClientMsg
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              next
                                case OIDCTokenForward_case_1
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.35 < #x) ∧
                                         (#x < #vr.40) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by contradiction /* from formulas */
                                next
                                  case case_3
                                  by contradiction /* from formulas */
                                qed
                              next
                                case OIDCTokenForward_case_2
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.35 < #x) ∧
                                         (#x < #vr.40) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by contradiction /* from formulas */
                                next
                                  case case_3
                                  by contradiction /* from formulas */
                                qed
                              next
                                case OIDCTokenForward_case_3
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.35 < #x) ∧
                                         (#x < #vr.40) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by contradiction /* from formulas */
                                next
                                  case case_3
                                  by contradiction /* from formulas */
                                qed
                              next
                                case OIDCTokenForward_case_4
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.35 < #x) ∧
                                         (#x < #vr.40) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by contradiction /* from formulas */
                                next
                                  case case_3
                                  by contradiction /* from formulas */
                                qed
                              qed
                            qed
                          next
                            case OIDCClientInit
                            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                     <'token_req', ~code.2, ~n.6>)
                                   ) @ #vk.46 )
                              case c_tlsClientMsg
                              by contradiction /* from formulas */
                            qed
                          next
                            case c_tlsClientMsg
                            solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                                     <'token_req', ~code.2, code_verifier>)
                                   ) @ #vk.50 )
                              case OIDCClientCodeRedirect
                              solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey),
                                                       <'login', $Username, pw>)
                                     ) @ #vk.38 )
                                case OIDCClientLogin
                                by contradiction /* from formulas */
                              next
                                case c_tlsClientMsg
                                solve( !KU( s256(~n.6) ) @ #vk.44 )
                                  case OIDCClientInit_case_1
                                  solve( !KU( ~IdPKey ) @ #vk.48 )
                                    case DomainCompromise
                                    by contradiction /* from formulas */
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash, nonce.1, 
                                                              code_challenge>)
                                           ) @ #vk.51 )
                                      case c_tlsClientMsg
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                next
                                  case OIDCClientInit_case_2
                                  solve( !KU( ~sess.2 ) @ #vk.43 )
                                    case LinkClick
                                    solve( !KU( ~IdPKey ) @ #vk.48 )
                                      case DomainCompromise
                                      by contradiction /* from formulas */
                                    next
                                      case OIDCClientLogin
                                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                                ) @ #y )
                                    next
                                      case OIDCIdPIssueCode
                                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                               <'oidc_req', hash, nonce.1, 
                                                                code_challenge>)
                                             ) @ #vk.51 )
                                        case c_tlsClientMsg
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  next
                                    case OIDCClientLogin
                                    solve( !KU( ~IdPKey ) @ #vk.49 )
                                      case DomainCompromise
                                      by contradiction /* from formulas */
                                    next
                                      case OIDCClientLogin
                                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey
                                                ) @ #y )
                                    next
                                      case OIDCIdPIssueCode
                                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                               <'oidc_req', hash, nonce.1, 
                                                                code_challenge>)
                                             ) @ #vk.53 )
                                        case c_tlsClientMsg
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( ~signalClient.1 ) @ #vk.49 )
                                      case DomainCompromise
                                      solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.1),
                                                               <'oidc_req', hash, nonce, 
                                                                code_challenge>)
                                             ) @ #vk.50 )
                                        case c_tlsClientMsg
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case OIDCClientLogin
                                      by solve( GenBrowserSession( $Initiator.1, $IdP.1,
                                                                   ~signalClient.1
                                                ) @ #y )
                                    next
                                      case OIDCIdPIssueCode
                                      solve( !KU( tlsClientMsg(~signalClient.1, cert(~IdPKey.2),
                                                               <'oidc_req', hash.1, nonce.2, 
                                                                code_challenge.1>)
                                             ) @ #vk.54 )
                                        case c_tlsClientMsg
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                next
                                  case c_s256
                                  by contradiction /* from formulas */
                                qed
                              qed
                            next
                              case c_tlsClientMsg
                              solve( !KU( ~code.2 ) @ #vk.59 )
                                case OIDCClientCodeRedirect_case_1
                                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.16>)
                                       ) @ #vk.61 )
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.62 )
                                    case DomainCompromise
                                    by contradiction /* from formulas */
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.1, nonce.1, 
                                                              code_challenge>)
                                           ) @ #vk.75 )
                                      case c_tlsClientMsg
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction /* cyclic */
                                qed
                              next
                                case OIDCClientCodeRedirect_case_2
                                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.16>)
                                       ) @ #vk.61 )
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.63 )
                                    case DomainCompromise
                                    by contradiction /* from formulas */
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.2, nonce.2, 
                                                              code_challenge.1>)
                                           ) @ #vk.78 )
                                      case c_tlsClientMsg
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction /* cyclic */
                                qed
                              next
                                case OIDCClientCodeRedirect_case_3
                                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.16>)
                                       ) @ #vk.61 )
                                  case LinkClick
                                  by contradiction /* cyclic */
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.62 )
                                    case DomainCompromise
                                    by contradiction /* from formulas */
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y.1 )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.1, nonce.1, 
                                                              code_challenge>)
                                           ) @ #vk.72 )
                                      case c_tlsClientMsg
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction /* cyclic */
                                qed
                              next
                                case OIDCClientCodeRedirect_case_4
                                solve( !KU( browserForward(~sess.12, cert(~signalClient.1),
                                                           <'code', ~code.1, ~n.16>)
                                       ) @ #vk.61 )
                                  case LinkClick
                                  by contradiction /* cyclic */
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( ~IdPKey ) @ #vk.62 )
                                    case DomainCompromise
                                    by contradiction /* from formulas */
                                  next
                                    case OIDCClientLogin
                                    by solve( GenBrowserSession( $Initiator.2, $IdP, ~IdPKey
                                              ) @ #y )
                                  next
                                    case OIDCIdPIssueCode
                                    solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                             <'oidc_req', hash.1, nonce.2, 
                                                              code_challenge>)
                                           ) @ #vk.73 )
                                      case c_tlsClientMsg
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                next
                                  case c_browserForward
                                  by contradiction /* cyclic */
                                qed
                              next
                                case OIDCClientLogin
                                by solve( GenBrowserSession( $Initiator.1, $IdP, ~code.1 ) @ #y )
                              next
                                case OIDCIdPIssueCode_case_1
                                solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                                         <'oidc_req', hash.1, nonce.2, 
                                                          code_challenge>)
                                       ) @ #vk.63 )
                                  case c_tlsClientMsg
                                  by contradiction /* cyclic */
                                qed
                              next
                                case OIDCIdPIssueCode_case_2
                                solve( !KU( ~signalClient ) @ #vk.61 )
                                  case DomainCompromise
                                  by contradiction /* from formulas */
                                next
                                  case OIDCClientLogin
                                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                            ) @ #y )
                                next
                                  case OIDCIdPIssueCode
                                  solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                           <'oidc_req', hash.1, nonce.2, 
                                                            code_challenge>)
                                         ) @ #vk.64 )
                                    case c_tlsClientMsg
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              next
                                case OIDCTokenForward_case_1
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.35 < #x) ∧
                                         (#x < #vr.39) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by contradiction /* from formulas */
                                next
                                  case case_3
                                  by contradiction /* from formulas */
                                qed
                              next
                                case OIDCTokenForward_case_2
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.35 < #x) ∧
                                         (#x < #vr.39) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by contradiction /* from formulas */
                                next
                                  case case_3
                                  by contradiction /* from formulas */
                                qed
                              next
                                case OIDCTokenForward_case_3
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.35 < #x) ∧
                                         (#x < #vr.39) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by contradiction /* from formulas */
                                next
                                  case case_3
                                  by contradiction /* from formulas */
                                qed
                              next
                                case OIDCTokenForward_case_4
                                solve( (∃ #x.
                                         (UseCode( ~code.1 ) @ #x)
                                        ∧
                                         (#vr.35 < #x) ∧
                                         (#x < #vr.39) ∧
                                         (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                       (∃ signalClient domain #x #y.
                                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by contradiction /* from formulas */
                                next
                                  case case_3
                                  by contradiction /* from formulas */
                                qed
                              qed
                            qed
                          qed
                        next
                          case c_tlsServerMsg
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case c_browserForward
                      solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                              s256(~n.5)
                             ) ▶₃ #x.1 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~code ) @ #vk.60 )
                          case OIDCClientCodeRedirect_case_1
                          solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                     <'code', ~code, ~n.22>)
                                 ) @ #vk.62 )
                            case c_browserForward
                            by contradiction /* cyclic */
                          qed
                        next
                          case OIDCClientCodeRedirect_case_2
                          solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                     <'code', ~code, ~n.22>)
                                 ) @ #vk.62 )
                            case c_browserForward
                            by contradiction /* cyclic */
                          qed
                        next
                          case OIDCClientCodeRedirect_case_3
                          solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                     <'code', ~code, ~n.22>)
                                 ) @ #vk.62 )
                            case LinkClick
                            by contradiction /* cyclic */
                          next
                            case c_browserForward
                            by contradiction /* cyclic */
                          qed
                        next
                          case OIDCClientCodeRedirect_case_4
                          solve( !KU( browserForward(~sess.16, cert(~signalClient.1),
                                                     <'code', ~code, ~n.22>)
                                 ) @ #vk.62 )
                            case LinkClick
                            by contradiction /* cyclic */
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( ~IdPKey ) @ #vk.62 )
                              case DomainCompromise
                              by contradiction /* from formulas */
                            next
                              case OIDCClientLogin
                              by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                            next
                              case OIDCIdPIssueCode
                              solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                       <'oidc_req', hash.1, nonce.3, code_challenge
                                                       >)
                                     ) @ #vk.65 )
                                case c_tlsClientMsg
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_browserForward
                            by contradiction /* cyclic */
                          qed
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                        next
                          case OIDCIdPIssueCode_case_1
                          solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.3, code_challenge>)
                                 ) @ #vk.64 )
                            case c_tlsClientMsg
                            by contradiction /* cyclic */
                          qed
                        next
                          case OIDCIdPIssueCode_case_2
                          solve( !KU( ~signalClient ) @ #vk.62 )
                            case DomainCompromise
                            by contradiction /* from formulas */
                          next
                            case OIDCClientLogin
                            by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                      ) @ #y )
                          next
                            case OIDCIdPIssueCode
                            solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                     <'oidc_req', hash.1, nonce.3, code_challenge>)
                                   ) @ #vk.65 )
                              case c_tlsClientMsg
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case OIDCTokenForward_case_1
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.45) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCTokenForward_case_2
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.45) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCTokenForward_case_3
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.45) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          qed
                        next
                          case OIDCTokenForward_case_4
                          solve( (∃ #x.
                                   (UseCode( ~code ) @ #x)
                                  ∧
                                   (#vr.29 < #x) ∧
                                   (#x < #vr.45) ∧
                                   (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                                 (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                                 (∃ signalClient domain #x #y.
                                   (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                                   (CompromisedDomain( signalClient, domain ) @ #y)) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( !Domain( $IdP, ~domain ) ▶₀ #z )
                      case TLSSetup
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.14>)
                             ) @ #vk.46 )
                        case LinkClick
                        solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                s256(~n.5)
                               ) ▶₃ #x.1 )
                          case OIDCIdPIssueCode
                          by contradiction /* from formulas */
                        qed
                      next
                        case OIDCIdPIssueCode
                        by contradiction /* from formulas */
                      next
                        case c_browserForward
                        solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                                s256(~n.5)
                               ) ▶₃ #x.1 )
                          case OIDCIdPIssueCode
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                next
                  case c_tlsClientMsg
                  solve( St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce.1,
                                          s256(code_verifier)
                         ) ▶₃ #x.1 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~code ) @ #vk.50 )
                      case OIDCClientCodeRedirect_case_1
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.14>)
                             ) @ #vk.52 )
                        case c_browserForward
                        by contradiction /* cyclic */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_2
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.14>)
                             ) @ #vk.52 )
                        case c_browserForward
                        by contradiction /* cyclic */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_3
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.14>)
                             ) @ #vk.52 )
                        case LinkClick
                        by contradiction /* cyclic */
                      next
                        case c_browserForward
                        by contradiction /* cyclic */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_4
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.14>)
                             ) @ #vk.52 )
                        case LinkClick
                        by contradiction /* cyclic */
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.52 )
                          case DomainCompromise
                          by contradiction /* from formulas */
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.2, code_challenge>)
                                 ) @ #vk.55 )
                            case c_tlsClientMsg
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction /* cyclic */
                      qed
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y )
                    next
                      case OIDCIdPIssueCode_case_1
                      solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.2, code_challenge>)
                             ) @ #vk.54 )
                        case c_tlsClientMsg
                        by contradiction /* cyclic */
                      qed
                    next
                      case OIDCIdPIssueCode_case_2
                      solve( !KU( ~signalClient ) @ #vk.52 )
                        case DomainCompromise
                        by contradiction /* from formulas */
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                                  ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                 <'oidc_req', hash.1, nonce.2, code_challenge>)
                               ) @ #vk.55 )
                          case c_tlsClientMsg
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_1
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.29 < #x) ∧
                               (#x < #vr.33) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      next
                        case case_3
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCTokenForward_case_2
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.29 < #x) ∧
                               (#x < #vr.33) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      next
                        case case_3
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCTokenForward_case_3
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.29 < #x) ∧
                               (#x < #vr.33) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      next
                        case case_3
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCTokenForward_case_4
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.29 < #x) ∧
                               (#x < #vr.33) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      next
                        case case_3
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          qed
        next
          case c_browserForward
          solve( !KU( tlsServerMsg(~sessPost, ~IdPKey,
                                   <'token', 
                                    <$A, username, nonce, h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>, 
                                    sign(<$A, username, nonce, 
                                          h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2)>,
                                         x)
                                   >)
                 ) @ #vk.21 )
            case OIDCIdPTokenIssue
            solve( !KU( tlsClientMsg(~sess.9, cert(~IdPKey),
                                     <'oidc_req', h(<trim(pk(~n)), trim(pk(~n.1))>, ~n.2), nonce, 
                                      s256(code_verifier)>)
                   ) @ #vk.42 )
              case OIDCAdversaryInit
              solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                       <'token_req', ~code.2, code_verifier>)
                     ) @ #vk.44 )
                case OIDCClientCodeRedirect
                solve( (∃ #x.
                         (UseCode( ~code ) @ #x)
                        ∧
                         (#vr.31 < #x) ∧
                         (#x < #vr.9) ∧
                         (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  solve( (∀ #z. (!KU( ~n.6 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
                    case case_1
                    solve( !KU( ~code ) @ #vk.44 )
                      case OIDCClientCodeRedirect_case_1
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.50 )
                        case c_browserForward
                        by contradiction /* cyclic */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_2
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.50 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.51 )
                          case DomainCompromise
                          by contradiction /* from formulas */
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash, nonce.1, code_challenge>)
                                 ) @ #vk.59 )
                            case c_tlsClientMsg
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction /* cyclic */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_3
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.50 )
                        case LinkClick
                        by contradiction /* cyclic */
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.51 )
                          case DomainCompromise
                          by contradiction /* from formulas */
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash, nonce.1, code_challenge>)
                                 ) @ #vk.61 )
                            case c_tlsClientMsg
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction /* cyclic */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_4
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.50 )
                        case LinkClick
                        by contradiction /* cyclic */
                      next
                        case c_browserForward
                        by contradiction /* cyclic */
                      qed
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~code ) @ #y )
                    next
                      case OIDCIdPIssueCode_case_1
                      solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.2, code_challenge>)
                             ) @ #vk.52 )
                        case c_tlsClientMsg
                        by contradiction /* cyclic */
                      qed
                    next
                      case OIDCIdPIssueCode_case_2
                      solve( !KU( ~signalClient ) @ #vk.50 )
                        case DomainCompromise
                        by contradiction /* from formulas */
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                                  ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce.2, code_challenge>)
                               ) @ #vk.53 )
                          case c_tlsClientMsg
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_1
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.31 < #x) ∧
                               (#x < #vr.36) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      next
                        case case_3
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCTokenForward_case_2
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.31 < #x) ∧
                               (#x < #vr.36) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      next
                        case case_3
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCTokenForward_case_3
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.31 < #x) ∧
                               (#x < #vr.36) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      next
                        case case_3
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCTokenForward_case_4
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.31 < #x) ∧
                               (#x < #vr.36) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      next
                        case case_3
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                qed
              next
                case c_tlsClientMsg
                solve( !KU( ~code.2 ) @ #vk.55 )
                  case OIDCClientCodeRedirect_case_1
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code.1, ~n.15>)
                         ) @ #vk.57 )
                    case c_browserForward
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code.1, ~n.15>)
                         ) @ #vk.57 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.58 )
                      case DomainCompromise
                      by contradiction /* from formulas */
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.1, code_challenge>)
                             ) @ #vk.66 )
                        case c_tlsClientMsg
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code.1, ~n.15>)
                         ) @ #vk.57 )
                    case LinkClick
                    by contradiction /* cyclic */
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.58 )
                      case DomainCompromise
                      by contradiction /* from formulas */
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.1, code_challenge>)
                             ) @ #vk.68 )
                        case c_tlsClientMsg
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code.1, ~n.15>)
                         ) @ #vk.57 )
                    case LinkClick
                    by contradiction /* cyclic */
                  next
                    case c_browserForward
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator.1, $IdP, ~code.1 ) @ #y )
                next
                  case OIDCIdPIssueCode_case_1
                  solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce.2, code_challenge>)
                         ) @ #vk.59 )
                    case c_tlsClientMsg
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCIdPIssueCode_case_2
                  solve( !KU( ~signalClient ) @ #vk.57 )
                    case DomainCompromise
                    by contradiction /* from formulas */
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator.1, $IdP, ~signalClient
                              ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.2, code_challenge>)
                           ) @ #vk.60 )
                      case c_tlsClientMsg
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case OIDCTokenForward_case_1
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.31 < #x) ∧
                           (#x < #vr.36) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    by contradiction /* from formulas */
                  qed
                next
                  case OIDCTokenForward_case_2
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.31 < #x) ∧
                           (#x < #vr.36) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    by contradiction /* from formulas */
                  qed
                next
                  case OIDCTokenForward_case_3
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.31 < #x) ∧
                           (#x < #vr.36) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    by contradiction /* from formulas */
                  qed
                next
                  case OIDCTokenForward_case_4
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.31 < #x) ∧
                           (#x < #vr.36) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case OIDCClientInit
              solve( (∀ #z. (!KU( ~n.8 ) @ #z) ⇒ ⊥)  ∥
                     (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
                case case_1
                solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                         <'token_req', ~code.2, ~n.6>)
                       ) @ #vk.40 )
                  case OIDCClientCodeRedirect
                  solve( (∃ #x.
                           (UseCode( ~code ) @ #x)
                          ∧
                           (#vr.31 < #x) ∧
                           (#x < #vr.9) ∧
                           (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    solve( !KU( ~code ) @ #vk.40 )
                      case OIDCClientCodeRedirect_case_1
                      solve( !KU( browserForward(~sess.10, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.43 )
                        case c_browserForward
                        by contradiction /* cyclic */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_2
                      solve( !KU( browserForward(~sess.10, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.43 )
                        case c_browserForward
                        by contradiction /* cyclic */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_3
                      solve( !KU( browserForward(~sess.10, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.43 )
                        case LinkClick
                        by contradiction /* cyclic */
                      next
                        case c_browserForward
                        by contradiction /* cyclic */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_4
                      solve( !KU( browserForward(~sess.10, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.43 )
                        case LinkClick
                        by contradiction /* cyclic */
                      next
                        case c_browserForward
                        by contradiction /* cyclic */
                      qed
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y )
                    next
                      case OIDCIdPIssueCode_case_1
                      solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.1, code_challenge>)
                             ) @ #vk.45 )
                        case c_tlsClientMsg
                        by contradiction /* cyclic */
                      qed
                    next
                      case OIDCIdPIssueCode_case_2
                      solve( !KU( ~signalClient ) @ #vk.43 )
                        case DomainCompromise
                        by contradiction /* from formulas */
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                                  ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce.1, code_challenge>)
                               ) @ #vk.46 )
                          case c_tlsClientMsg
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_1
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.31 < #x) ∧
                               (#x < #vr.35) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      next
                        case case_3
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCTokenForward_case_2
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.31 < #x) ∧
                               (#x < #vr.35) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      next
                        case case_3
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCTokenForward_case_3
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.31 < #x) ∧
                               (#x < #vr.35) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      next
                        case case_3
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCTokenForward_case_4
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.31 < #x) ∧
                               (#x < #vr.35) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      next
                        case case_3
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    by contradiction /* from formulas */
                  qed
                next
                  case c_tlsClientMsg
                  by contradiction /* from formulas */
                qed
              next
                case case_2
                by contradiction /* from formulas */
              qed
            next
              case c_tlsClientMsg
              solve( !KU( tlsClientMsg(~sessPost, cert(~IdPKey),
                                       <'token_req', ~code.2, code_verifier>)
                     ) @ #vk.43 )
                case OIDCClientCodeRedirect
                solve( (∃ #x.
                         (UseCode( ~code ) @ #x)
                        ∧
                         (#vr.31 < #x) ∧
                         (#x < #vr.9) ∧
                         (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                       (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                       (∃ signalClient domain #x #y.
                         (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                         (CompromisedDomain( signalClient, domain ) @ #y)) )
                  case case_1
                  solve( (∀ #z. (!KU( ~n.6 ) @ #z) ⇒ ⊥)  ∥
                         (∃ domain #z. (CompromisedDomain( $A, domain ) @ #z)) )
                    case case_1
                    solve( !KU( ~code ) @ #vk.43 )
                      case OIDCClientCodeRedirect_case_1
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.51 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.52 )
                          case DomainCompromise
                          by contradiction /* from formulas */
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash, nonce.1, code_challenge>)
                                 ) @ #vk.65 )
                            case c_tlsClientMsg
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction /* cyclic */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_2
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.51 )
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.53 )
                          case DomainCompromise
                          by contradiction /* from formulas */
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                                 ) @ #vk.68 )
                            case c_tlsClientMsg
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction /* cyclic */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_3
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.51 )
                        case LinkClick
                        by contradiction /* cyclic */
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.52 )
                          case DomainCompromise
                          by contradiction /* from formulas */
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash, nonce.1, code_challenge>)
                                 ) @ #vk.62 )
                            case c_tlsClientMsg
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction /* cyclic */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_4
                      solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                                 <'code', ~code, ~n.15>)
                             ) @ #vk.51 )
                        case LinkClick
                        by contradiction /* cyclic */
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( ~IdPKey ) @ #vk.52 )
                          case DomainCompromise
                          by contradiction /* from formulas */
                        next
                          case OIDCClientLogin
                          by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                        next
                          case OIDCIdPIssueCode
                          solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                                   <'oidc_req', hash, nonce.2, code_challenge>)
                                 ) @ #vk.63 )
                            case c_tlsClientMsg
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case c_browserForward
                        by contradiction /* cyclic */
                      qed
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator, $IdP, ~code ) @ #y )
                    next
                      case OIDCIdPIssueCode_case_1
                      solve( !KU( tlsClientMsg(~code, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.2, code_challenge>)
                             ) @ #vk.53 )
                        case c_tlsClientMsg
                        by contradiction /* cyclic */
                      qed
                    next
                      case OIDCIdPIssueCode_case_2
                      solve( !KU( ~signalClient ) @ #vk.51 )
                        case DomainCompromise
                        by contradiction /* from formulas */
                      next
                        case OIDCClientLogin
                        by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                                  ) @ #y )
                      next
                        case OIDCIdPIssueCode
                        solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                                 <'oidc_req', hash, nonce.2, code_challenge>)
                               ) @ #vk.54 )
                          case c_tlsClientMsg
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_1
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.31 < #x) ∧
                               (#x < #vr.35) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      next
                        case case_3
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCTokenForward_case_2
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.31 < #x) ∧
                               (#x < #vr.35) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      next
                        case case_3
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCTokenForward_case_3
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.31 < #x) ∧
                               (#x < #vr.35) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      next
                        case case_3
                        by contradiction /* from formulas */
                      qed
                    next
                      case OIDCTokenForward_case_4
                      solve( (∃ #x.
                               (UseCode( ~code ) @ #x)
                              ∧
                               (#vr.31 < #x) ∧
                               (#x < #vr.35) ∧
                               (∀ #y. (UseCode( ~code ) @ #y) ⇒ #x = #y))  ∥
                             (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                             (∃ signalClient domain #x #y.
                               (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                               (CompromisedDomain( signalClient, domain ) @ #y)) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      next
                        case case_3
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                qed
              next
                case c_tlsClientMsg
                solve( !KU( ~code.2 ) @ #vk.55 )
                  case OIDCClientCodeRedirect_case_1
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code.1, ~n.15>)
                         ) @ #vk.57 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.58 )
                      case DomainCompromise
                      by contradiction /* from formulas */
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.1, code_challenge>)
                             ) @ #vk.71 )
                        case c_tlsClientMsg
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code.1, ~n.15>)
                         ) @ #vk.57 )
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.59 )
                      case DomainCompromise
                      by contradiction /* from formulas */
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash.1, nonce.2, code_challenge.1>)
                             ) @ #vk.74 )
                        case c_tlsClientMsg
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code.1, ~n.15>)
                         ) @ #vk.57 )
                    case LinkClick
                    by contradiction /* cyclic */
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.58 )
                      case DomainCompromise
                      by contradiction /* from formulas */
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y.1 )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.1, code_challenge>)
                             ) @ #vk.68 )
                        case c_tlsClientMsg
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( !KU( browserForward(~sess.11, cert(~signalClient.1),
                                             <'code', ~code.1, ~n.15>)
                         ) @ #vk.57 )
                    case LinkClick
                    by contradiction /* cyclic */
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( ~IdPKey ) @ #vk.58 )
                      case DomainCompromise
                      by contradiction /* from formulas */
                    next
                      case OIDCClientLogin
                      by solve( GenBrowserSession( $Initiator.1, $IdP, ~IdPKey ) @ #y )
                    next
                      case OIDCIdPIssueCode
                      solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                               <'oidc_req', hash, nonce.2, code_challenge>)
                             ) @ #vk.69 )
                        case c_tlsClientMsg
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case c_browserForward
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCClientLogin
                  by solve( GenBrowserSession( $Initiator, $IdP, ~code.1 ) @ #y )
                next
                  case OIDCIdPIssueCode_case_1
                  solve( !KU( tlsClientMsg(~code.1, cert(~IdPKey.1),
                                           <'oidc_req', hash, nonce.2, code_challenge>)
                         ) @ #vk.59 )
                    case c_tlsClientMsg
                    by contradiction /* cyclic */
                  qed
                next
                  case OIDCIdPIssueCode_case_2
                  solve( !KU( ~signalClient ) @ #vk.57 )
                    case DomainCompromise
                    by contradiction /* from formulas */
                  next
                    case OIDCClientLogin
                    by solve( GenBrowserSession( $Initiator, $IdP, ~signalClient
                              ) @ #y )
                  next
                    case OIDCIdPIssueCode
                    solve( !KU( tlsClientMsg(~signalClient, cert(~IdPKey.1),
                                             <'oidc_req', hash, nonce.2, code_challenge>)
                           ) @ #vk.60 )
                      case c_tlsClientMsg
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case OIDCTokenForward_case_1
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.31 < #x) ∧
                           (#x < #vr.35) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    by contradiction /* from formulas */
                  qed
                next
                  case OIDCTokenForward_case_2
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.31 < #x) ∧
                           (#x < #vr.35) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    by contradiction /* from formulas */
                  qed
                next
                  case OIDCTokenForward_case_3
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.31 < #x) ∧
                           (#x < #vr.35) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    by contradiction /* from formulas */
                  qed
                next
                  case OIDCTokenForward_case_4
                  solve( (∃ #x.
                           (UseCode( ~code.1 ) @ #x)
                          ∧
                           (#vr.31 < #x) ∧
                           (#x < #vr.35) ∧
                           (∀ #y. (UseCode( ~code.1 ) @ #y) ⇒ #x = #y))  ∥
                         (∃ domain #x. (CompromisedDomain( $A, domain ) @ #x))  ∥
                         (∃ signalClient domain #x #y.
                           (IsSignalClientFor( $A, signalClient ) @ #x) ∧
                           (CompromisedDomain( signalClient, domain ) @ #y)) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case c_tlsServerMsg
            by contradiction /* cyclic */
          qed
        qed
      next
        case c_sign
        solve( !KU( tlsServerMsg(~sess, ~IdPKey, <'pk_response', pk(x)>)
               ) @ #vk.2 )
          case IdPPkDistribute
          solve( !KU( ~n.2 ) @ #vk.19 )
            case OIDCClientLogin
            by solve( GenBrowserSession( $Initiator, $IdP, ~n.2 ) @ #y )
          next
            case OIDCIdPIssueCode
            solve( !KU( tlsClientMsg(~n.2, cert(~IdPKey.1),
                                     <'oidc_req', hash, nonce.1, code_challenge>)
                   ) @ #vk.23 )
              case c_tlsClientMsg
              by contradiction /* cyclic */
            qed
          qed
        next
          case c_tlsServerMsg
          solve( !KU( ~IdPKey ) @ #vk.21 )
            case DomainCompromise
            by contradiction /* from formulas */
          next
            case OIDCClientLogin
            by solve( GenBrowserSession( $Initiator, $IdP, ~IdPKey ) @ #y )
          next
            case OIDCIdPIssueCode
            solve( !KU( tlsClientMsg(~IdPKey, cert(~IdPKey.1),
                                     <'oidc_req', hash, nonce.1, code_challenge>)
                   ) @ #vk.27 )
              case c_tlsClientMsg
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma Executability:
  all-traces
  "∃ initiator initiatorSim initiatorSk verifier verifierSim
     verifierSk idp salt hash nonce code_verifier session username pw
     code token idpSk body signature fingerprint #a #b #c #d #e #f #g #h
     #i #j #k #l #m #n #o #p #q #r #s #t.
    (((((((((((((((((((((((((((((((((ClaimNumber( initiator,
                                                  initiatorSim
                                     ) @ #a) ∧
                                    (SignalKeyClient( initiator, initiatorSk ) @ #b)) ∧
                                   (SignalKeyServer( initiator, pk(initiatorSk) ) @ #c)) ∧
                                  (ClaimSignalKey( initiator, initiatorSk ) @ #d)) ∧
                                 (¬(∃ #x. CompromisedSignal( initiator, initiatorSk ) @ #x))) ∧
                                (¬(∃ #x. CompromisedNumber( initiator, initiatorSim ) @ #x))) ∧
                               (ClaimNumber( verifier, verifierSim ) @ #e)) ∧
                              (SignalKeyClient( verifier, verifierSk ) @ #f)) ∧
                             (SignalKeyServer( verifier, pk(verifierSk) ) @ #g)) ∧
                            (ClaimSignalKey( verifier, verifierSk ) @ #h)) ∧
                           (¬(∃ #x. CompromisedSignal( verifier, verifierSk ) @ #x))) ∧
                          (¬(∃ #x. CompromisedNumber( verifier, verifierSim ) @ #x))) ∧
                         (UsernameClient( initiator, idp, username, pw ) @ #i)) ∧
                        (UsernameServer( initiator, idp, username, pw ) @ #j)) ∧
                       (ClaimUsername( initiator, idp, username ) @ #k)) ∧
                      (¬(∃ #x. CompromisedAccount( initiator, idp, username ) @ #x))) ∧
                     (OIDCRequest( initiator, idp, pk(verifierSk), salt, hash, nonce,
                                   s256(code_verifier)
                      ) @ #l)) ∧
                    (¬(∃ #x. AdversaryOIDCRequest( ) @ #x))) ∧
                   (AuthenticationRequest( session, idp, hash, nonce,
                                           s256(code_verifier)
                    ) @ #m)) ∧
                  (AuthenticationResponse( session, initiator, idp, username
                   ) @ #n)) ∧
                 (IdPIssueCode( idp, username, code ) @ #o)) ∧
                (ClientReceiveCode( initiator, idp, code ) @ #p)) ∧
               (IdPIssueToken( token ) @ #q)) ∧
              (ClaimIdPKey( idp, idpSk ) @ #r)) ∧
             (¬(∃ sk #x. CompromisedDomain( idp, sk ) @ #x))) ∧
            (token = <body, signature>)) ∧
           (body = <idp, username, nonce, hash>)) ∧
          (hash = h(salt, fingerprint))) ∧
         (fingerprint = trim(<pk(initiatorSk), pk(verifierSk)>))) ∧
        (signature = sign(body, idpSk))) ∧
       (Forward( initiator, token ) @ #s)) ∧
      (AssociateAs( pk(initiatorSk), idp, username, pk(verifierSk)
       ) @ #t)) ∧
     (¬(∃ signal sk #x #y.
         (IsSignal( signal ) @ #x) ∧
         (CompromisedDomain( signal, sk ) @ #y)))) ∧
    (¬(∃ client sk #x #y.
        (IsSignalClientFor( idp, client ) @ #x) ∧
        (CompromisedDomain( client, sk ) @ #y)))"
/*
guarded formula characterizing all counter-examples:
"∀ initiator initiatorSim initiatorSk verifier verifierSim
   verifierSk idp salt hash nonce code_verifier session username pw
   code token idpSk body signature fingerprint #a #b #c #d #e #f #g #h
   #i #j #k #l #m #n #o #p #q #r #s #t.
  (ClaimNumber( initiator, initiatorSim ) @ #a) ∧
  (SignalKeyClient( initiator, initiatorSk ) @ #b) ∧
  (SignalKeyServer( initiator, pk(initiatorSk) ) @ #c) ∧
  (ClaimSignalKey( initiator, initiatorSk ) @ #d) ∧
  (ClaimNumber( verifier, verifierSim ) @ #e) ∧
  (SignalKeyClient( verifier, verifierSk ) @ #f) ∧
  (SignalKeyServer( verifier, pk(verifierSk) ) @ #g) ∧
  (ClaimSignalKey( verifier, verifierSk ) @ #h) ∧
  (UsernameClient( initiator, idp, username, pw ) @ #i) ∧
  (UsernameServer( initiator, idp, username, pw ) @ #j) ∧
  (ClaimUsername( initiator, idp, username ) @ #k) ∧
  (OIDCRequest( initiator, idp, pk(verifierSk), salt, hash, nonce,
                s256(code_verifier)
   ) @ #l) ∧
  (AuthenticationRequest( session, idp, hash, nonce,
                          s256(code_verifier)
   ) @ #m) ∧
  (AuthenticationResponse( session, initiator, idp, username
   ) @ #n) ∧
  (IdPIssueCode( idp, username, code ) @ #o) ∧
  (ClientReceiveCode( initiator, idp, code ) @ #p) ∧
  (IdPIssueToken( token ) @ #q) ∧
  (ClaimIdPKey( idp, idpSk ) @ #r) ∧
  (token = <body, signature>) ∧
  (body = <idp, username, nonce, hash>) ∧
  (hash = h(salt, fingerprint)) ∧
  (fingerprint = trim(<pk(initiatorSk), pk(verifierSk)>)) ∧
  (signature = sign(body, idpSk)) ∧
  (Forward( initiator, token ) @ #s) ∧
  (AssociateAs( pk(initiatorSk), idp, username, pk(verifierSk)
   ) @ #t)
 ⇒
  ((∃ #x. (CompromisedSignal( initiator, initiatorSk ) @ #x)) ∨
   (∃ #x. (CompromisedNumber( initiator, initiatorSim ) @ #x)) ∨
   (∃ #x. (CompromisedSignal( verifier, verifierSk ) @ #x)) ∨
   (∃ #x. (CompromisedNumber( verifier, verifierSim ) @ #x)) ∨
   (∃ #x. (CompromisedAccount( initiator, idp, username ) @ #x)) ∨
   (∃ #x. (AdversaryOIDCRequest( ) @ #x)) ∨
   (∃ sk #x. (CompromisedDomain( idp, sk ) @ #x)) ∨
   (∃ signal sk #x #y.
     (IsSignal( signal ) @ #x) ∧
     (CompromisedDomain( signal, sk ) @ #y)) ∨
   (∃ client sk #x #y.
     (IsSignalClientFor( idp, client ) @ #x) ∧
     (CompromisedDomain( client, sk ) @ #y)))"
*/
by sorry

/* All well-formedness checks were successful. */

end