theory SignalOIDC begin

// Function signature and definition of the equational theory E

functions: browserForward/3, cert/1, forwardReceive/2, fst/1, h/2,
           pair/2, phone/1, pk/1, receive/2, s256/1, sign/2, signalMsg/3,
           signalRead/2, sms/2, snd/1, tlsClientMsg/3, tlsClientReceive/2,
           tlsServerMsg/3, tlsServerReceive/2, trim/1, true/0, verify/3
equations:
    forwardReceive(browserForward(~sess, cert(~domain), m), ~domain)
  = ~sess,
    forwardReceive(browserForward(~sess, cert(~domain), m), ~domain)
  = m,
    fst(<x.1, x.2>) = x.1,
    receive(sms(phone(sim), m), sim) = m,
    signalRead(signalMsg(~senderSk, pk(~receiverSk), m), ~receiverSk)
  = m,
    snd(<x.1, x.2>) = x.2,
    tlsClientReceive(tlsServerMsg(~sess, ~domain, m), ~sess) = m,
    tlsServerReceive(tlsClientMsg(~sess, cert(~domain), m), ~domain)
  = ~sess,
    tlsServerReceive(tlsClientMsg(~sess, cert(~domain), m), ~domain)
  = m,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true

heuristic: o "./oracle.py"

rule (modulo E) Phone:
   [ Fr( sim ) ]
  --[ ClaimNumber( $A, phone(sim) ) ]->
   [ !Phone( $A, sim ), Out( phone(sim) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) PhoneCompromise:
   [ !Phone( $A, sim ) ]
  --[ CompromisedNumber( $A, sim ) ]->
   [ Out( sim ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) TLSSetup:
   [ Fr( ~domain ) ]
  --[ OnlyOneDomain( $A ) ]->
   [ !Domain( $A, ~domain ), Out( cert(~domain) ) ]

  /* has exactly the trivial AC variant */

restriction OnlyOneDomain:
  "∀ domain #x #y.
    ((OnlyOneDomain( domain ) @ #x) ∧ (OnlyOneDomain( domain ) @ #y)) ⇒
    (#x = #y)"
  // safety formula

rule (modulo E) DomainCompromise:
   [ !Domain( $A, ~domain ) ]
  --[ CompromisedDomain( $A, ~domain ) ]->
   [ Out( ~domain ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) SignalServer:
   [ !Domain( $Signal, ~domain ) ]
  --[ OnlyOnceSignal( ), IsSignal( $Signal ) ]->
   [ !SignalDomain( ~domain ) ]

  /* has exactly the trivial AC variant */

restriction OnlyOnceSignal:
  "∀ #i #j.
    ((OnlyOnceSignal( ) @ #i) ∧ (OnlyOnceSignal( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

rule (modulo E) SignalClient:
   [ !Domain( $IdP, ~secret ), !Domain( $SignalClient, ~domain ) ]
  --[
  OnlyOnceSignalClientIdP( $IdP ),
  OnlyOnceSignalClient( $SignalClient ),
  IsSignalClientFor( $IdP, $SignalClient )
  ]->
   [ !SignalClientDomain( $IdP, ~domain ) ]

  /* has exactly the trivial AC variant */

restriction OnlyOnceSignalClientIdP:
  "∀ idp #i #j.
    ((OnlyOnceSignalClientIdP( idp ) @ #i) ∧
     (OnlyOnceSignalClientIdP( idp ) @ #j)) ⇒
    (#i = #j)"
  // safety formula

restriction OnlyOnceSignalClient:
  "∀ c #i #j.
    ((OnlyOnceSignalClient( c ) @ #i) ∧
     (OnlyOnceSignalClient( c ) @ #j)) ⇒
    (#i = #j)"
  // safety formula

rule (modulo E) SignalRegister:
   [
   Fr( sk ), Fr( ~sess ), !Phone( $A, sim ), !SignalDomain( ~signal )
   ]
  --[ SignalKeyClient( $A, sk ) ]->
   [
   Out( tlsClientMsg(~sess, cert(~signal),
                     <'signal_req', phone(sim), pk(sk)>)
   ),
   St_SignalReg_Client( $A, ~sess, sk )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) SignalChallenge:
   [
   !SignalDomain( ~signal ),
   In( tlsClientMsg(~sess, cert(~signal), <'signal_req', phone, ltk>)
   ),
   Fr( challenge )
   ]
  --[ OTPChallenge( challenge ) ]->
   [
   Out( sms(phone, <'otp', challenge>) ),
   St_SigReg_Server( ~sess, phone, ltk, challenge )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) SignalRespond:
   [
   !Phone( $A, sim ), In( sms(phone(sim), <'otp', challenge>) ),
   !SignalDomain( ~signal ), St_SignalReg_Client( $A, ~sess, sk )
   ]
  --[ OTPRespond( challenge ) ]->
   [
   Out( tlsClientMsg(~sess, cert(~signal), <'otp_respond', challenge>)
   ),
   St_SignalReg_ClientWait( $A, ~sess, sk )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) SignalAck:
   [
   !SignalDomain( ~signal ),
   In( tlsClientMsg(~sess, cert(~signal), <'otp_respond', challenge>)
   ),
   St_SigReg_Server( ~sess, phone, ltk, challenge )
   ]
  --[ SignalKeyServer( phone, ltk ) ]->
   [
   !SignalLtkServer( phone, ltk ),
   Out( tlsServerMsg(~sess, ~signal, 'signal_ack') )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) SignalFin:
   [
   !SignalDomain( ~signal ), St_SignalReg_ClientWait( $A, ~sess, sk ),
   In( tlsServerMsg(~sess, ~signal, 'signal_ack') )
   ]
  --[ ClaimSignalKey( $A, sk ) ]->
   [ !SignalLtkClient( $A, sk ), Out( pk(sk) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) SignalCompromise:
   [ !SignalLtkClient( $A, ~sk ) ]
  --[ CompromisedSignal( $A, ~sk ) ]->
   [ Out( ~sk ) ]

  /* has exactly the trivial AC variant */

lemma ServerKeysAuthentic:
  all-traces
  "∀ pk num #i.
    (SignalKeyServer( num, pk ) @ #i) ⇒
    (((∃ party sk #j #k.
        ((ClaimNumber( party, num ) @ #j) ∧
         (SignalKeyClient( party, sk ) @ #k)) ∧
        (pk = pk(sk))) ∨
      (∃ signal domain #j #k.
        (IsSignal( signal ) @ #j) ∧
        (CompromisedDomain( signal, domain ) @ #k))) ∨
     (∃ sim #j. (!KU( sim ) @ #j) ∧ (num = phone(sim))))"
/*
guarded formula characterizing all counter-examples:
"∃ pk num #i.
  (SignalKeyServer( num, pk ) @ #i)
 ∧
  (∀ party sk #j #k.
    (ClaimNumber( party, num ) @ #j) ∧
    (SignalKeyClient( party, sk ) @ #k) ∧
    (pk = pk(sk))
   ⇒
    ⊥) ∧
  (∀ signal domain #j #k.
    (IsSignal( signal ) @ #j) ∧
    (CompromisedDomain( signal, domain ) @ #k)
   ⇒
    ⊥) ∧
  (∀ sim #j. (!KU( sim ) @ #j) ∧ (num = phone(sim)) ⇒ ⊥)"
*/
by sorry /* removed */

rule (modulo E) IdPSetup:
   [ Fr( sk ) ]
  --[ ClaimIdPKey( $IdP, sk ) ]->
   [ !IdPLtk( $IdP, sk ), Out( pk(sk) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) IdPPkDistribute:
   [
   !IdPLtk( $IdP, sk ), !Domain( $IdP, ~IdPKey ),
   In( tlsClientMsg(~sess, cert(~IdPKey), 'pk_req') )
   ]
  -->
   [ Out( tlsServerMsg(~sess, ~IdPKey, <'pk_response', pk(sk)>) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) IdPSignUpInit:
   [ Fr( pw ), Fr( ~sess ), !Domain( $IdP, ~IdPKey ) ]
  --[ UsernameClient( $A, $IdP, $Username, pw ) ]->
   [
   Out( tlsClientMsg(~sess, cert(~IdPKey), <'sign_up', $Username, pw>)
   ),
   St_IdPRegistration_Client( ~sess, $A, $IdP, $Username, pw )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) IdPSignUpServer:
   [
   !Domain( $IdP, ~IdPKey ),
   In( tlsClientMsg(~sess, cert(~IdPKey), <'sign_up', username, pw>) )
   ]
  --[
  UsernameServer( $A, $IdP, username, pw ),
  AccountsUnique( $IdP, username )
  ]->
   [
   !IdPAccountServer( $A, $IdP, username, pw ),
   Out( tlsServerMsg(~sess, ~IdPKey, 'idp_ack') )
   ]

  /* has exactly the trivial AC variant */

restriction AccountsUnique:
  "∀ idp u #a #b.
    ((AccountsUnique( idp, u ) @ #a) ∧
     (AccountsUnique( idp, u ) @ #b)) ⇒
    (#a = #b)"
  // safety formula

rule (modulo E) IdPSignUpFin:
   [
   St_IdPRegistration_Client( ~sess, $A, $IdP, $Username, pw ),
   !Domain( $IdP, ~IdPKey ),
   In( tlsServerMsg(~sess, ~IdPKey, 'idp_ack') )
   ]
  --[ ClaimUsername( $A, $IdP, $Username ) ]->
   [ !IdPAccountClient( $A, $IdP, $Username, pw ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) IdPAccountCompromise:
   [ !IdPAccountClient( $A, $IdP, $Username, ~pw ) ]
  --[ CompromisedAccount( $A, $IdP, $Username ) ]->
   [ Out( ~pw ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) InitSessionStore:
   [ ]
  --[ OnlyOnceInitSessionStore( $User ) ]->
   [ SessionStore( $User, 'null', 'null' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ClearSessionStore:
   [ SessionStore( $User, x, y ) ]
  -->
   [ SessionStore( $User, 'null', 'null' ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

restriction OnlyOnceInitSessionStore:
  "∀ u #x #y.
    ((OnlyOnceInitSessionStore( u ) @ #x) ∧
     (OnlyOnceInitSessionStore( u ) @ #y)) ⇒
    (#x = #y)"
  // safety formula

rule (modulo E) OIDCClientInit:
   [
   !Domain( $IdP, ~IdPKey ),
   !SignalLtkClient( $Initiator, skInitiator ),
   !IdPAccountClient( $Initiator, $IdP, username, pw ),
   !SignalLtkServer( numVerifier, pkVerifier ),
   SessionStore( $Initiator, drop1, drop2 ), Fr( salt ), Fr( nonce ),
   Fr( code_verifier ), Fr( ~sess )
   ]
  --[
  OIDCRequest( $Initiator, $IdP, pkVerifier, salt,
               h(<trim(pk(skInitiator)), trim(pkVerifier)>, salt), nonce,
               s256(code_verifier)
  ),
  GenNonce( nonce ), GenBrowserSession( $Initiator, $IdP, ~sess ),
  GenerateCodeVerifierFor( code_verifier, $IdP )
  ]->
   [
   Out( tlsClientMsg(~sess, cert(~IdPKey),
                     <'oidc_req', h(<trim(pk(skInitiator)), trim(pkVerifier)>, salt), 
                      nonce, s256(code_verifier)>)
   ),
   Out( <h(<trim(pk(skInitiator)), trim(pkVerifier)>, salt), nonce, 
         s256(code_verifier)>
   ),
   SessionStore( $Initiator, nonce,
                 <$IdP, h(<trim(pk(skInitiator)), trim(pkVerifier)>, salt), salt, 
                  code_verifier>
   ),
   Browser( $Initiator, $IdP, ~sess )
   ]

  // loop breaker: [4]
  /* has exactly the trivial AC variant */

rule (modulo E) OIDCAdversaryInit:
   [
   !Domain( $IdP, ~IdPKey ),
   In( <$IdP, $Initiator, hash, nonce, code_challenge> ), Fr( ~sess )
   ]
  --[
  AdversaryOIDCRequest( ),
  GenBrowserSession( $Initiator, $IdP, ~sess )
  ]->
   [
   Out( tlsClientMsg(~sess, cert(~IdPKey),
                     <'oidc_req', hash, nonce, code_challenge>)
   ),
   Browser( $Initiator, $IdP, ~sess )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) OIDCIdPInit:
   [
   !Domain( $IdP, ~IdPKey ),
   In( tlsClientMsg(~sess, cert(~IdPKey),
                    <'oidc_req', hash, nonce, code_challenge>)
   )
   ]
  --[
  AuthenticationRequest( ~sess, $IdP, hash, nonce, code_challenge ),
  IsNonce( nonce )
  ]->
   [
   Out( tlsServerMsg(~sess, ~IdPKey, 'auth_req') ),
   St_OIDCServer_Auth( $IdP, ~sess, hash, nonce, code_challenge )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) OIDCClientLogin:
   [
   Browser( $Initiator, $IdP, ~sess ), !Domain( $IdP, ~IdPKey ),
   In( tlsServerMsg(~sess, ~IdPKey, 'auth_req') ),
   !IdPAccountClient( $Initiator, $IdP, $Username, pw )
   ]
  --[
  AuthenticationResponse( ~sess, $Initiator, $IdP, $Username ),
  UseBrowserSession( $Initiator, $IdP, ~sess )
  ]->
   [
   Out( tlsClientMsg(~sess, cert(~IdPKey), <'login', $Username, pw>)
   ),
   Browser( $Initiator, $IdP, ~sess )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

lemma BrowserSessionSources [reuse, use_induction]:
  all-traces
  "∀ user domain sess #x.
    (UseBrowserSession( user, domain, sess ) @ #x) ⇒
    (∃ user.1 domain.1 #y.
      (GenBrowserSession( user.1, domain.1, sess ) @ #y) ∧ (#y < #x))"
/*
guarded formula characterizing all counter-examples:
"∃ user domain sess #x.
  (UseBrowserSession( user, domain, sess ) @ #x)
 ∧
  ∀ user.1 domain.1 #y.
   (GenBrowserSession( user.1, domain.1, sess ) @ #y) ⇒ ¬(#y < #x)"
*/
by sorry

lemma BrowserSessionBinding [reuse, use_induction]:
  all-traces
  "∀ user1 user2 domain1 domain2 sess #x #y.
    ((UseBrowserSession( user1, domain1, sess ) @ #x) ∧
     (GenBrowserSession( user2, domain2, sess ) @ #y)) ⇒
    ((user1 = user2) ∧ (domain1 = domain2))"
/*
guarded formula characterizing all counter-examples:
"∃ user1 user2 domain1 domain2 sess #x #y.
  (UseBrowserSession( user1, domain1, sess ) @ #x) ∧
  (GenBrowserSession( user2, domain2, sess ) @ #y)
 ∧
  ((¬(user1 = user2)) ∨ (¬(domain1 = domain2)))"
*/
by sorry

lemma BrowserSessionUnique [reuse, use_induction]:
  all-traces
  "∀ user1 user2 domain1 domain2 sess #x #y.
    ((GenBrowserSession( user1, domain1, sess ) @ #x) ∧
     (GenBrowserSession( user2, domain2, sess ) @ #y)) ⇒
    (#x = #y)"
/*
guarded formula characterizing all counter-examples:
"∃ user1 user2 domain1 domain2 sess #x #y.
  (GenBrowserSession( user1, domain1, sess ) @ #x) ∧
  (GenBrowserSession( user2, domain2, sess ) @ #y)
 ∧
  ¬(#x = #y)"
*/
by sorry

rule (modulo E) OIDCIdPIssueCode:
   [
   St_OIDCServer_Auth( $IdP, ~sess, hash, nonce, code_challenge ),
   In( tlsClientMsg(~sess, cert(~IdPKey), <'login', $Username, pw>) ),
   !IdPAccountServer( $SomeOne, $IdP, $Username, pw ),
   !IdPLtk( $IdP, sk ), !Domain( $IdP, ~IdPKey ),
   !SignalClientDomain( $IdP, ~signalClient ), Fr( ~sess2 ),
   Fr( ~code )
   ]
  --[
  IdPIssueCode( $IdP, $Username, ~code ), IsNonce( nonce ),
  GenCode( $IdP, ~code )
  ]->
   [
   Out( browserForward(~sess, cert(~signalClient),
                       <'code', ~code, nonce>)
   ),
   St_OIDCIdP_Code( $IdP, $Username, ~code, hash, nonce,
                    code_challenge
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) LinkClick:
   [ Fr( ~sess ), In( <code, nonce> ), !Domain( $Party, ~domain ) ]
  --[ GenBrowserSession( $Initiator, $Party, ~sess ) ]->
   [
   Out( browserForward(~sess, cert(~domain), <'code', code, nonce>) ),
   Browser( $Initiator, $Party, ~sess )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) OIDCClientCodeRedirect:
   [
   Browser( $Initiator, $IdP, ~sess ),
   In( browserForward(~sess, cert(~signalClient),
                      <'code', code, nonce>)
   ),
   !SignalClientDomain( $IdP, ~signalClient ),
   !Domain( $IdP, ~IdPKey ),
   SessionStore( $Initiator, nonce, <$IdP, hash, salt, code_verifier>
   ),
   Fr( ~sessPost )
   ]
  --[
  ClientReceiveCode( $Initiator, $IdP, code ), Neq( nonce, 'null' ),
  IsCode( code )
  ]->
   [
   Out( tlsClientMsg(~sessPost, cert(~IdPKey),
                     <'token_req', code, code_verifier>)
   ),
   St_OIDCClient_CodeReq( $Initiator, $IdP, ~sessPost, hash, salt,
                          code
   ),
   SessionStore( $Initiator, 'null', 'null' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) OIDCIdPTokenIssue:
   [
   In( tlsClientMsg(~sess, cert(~IdPKey),
                    <'token_req', code, code_verifier>)
   ),
   !Domain( $IdP, ~IdPKey ), !IdPLtk( $IdP, sk ),
   St_OIDCIdP_Code( $IdP, $Username, code, hash, nonce, code_challenge
   )
   ]
  --[
  Eq( s256(code_verifier), code_challenge ),
  IdPIssueToken( <<$IdP, $Username, nonce, hash>, 
                  sign(<$IdP, $Username, nonce, hash>, sk)>
  ),
  IsToken( <<$IdP, $Username, nonce, hash>, 
            sign(<$IdP, $Username, nonce, hash>, sk)>
  ),
  UseCode( code ), UseCodeVerifierFor( code_verifier, $IdP )
  ]->
   [
   Out( tlsServerMsg(~sess, ~IdPKey,
                     <'token', <$IdP, $Username, nonce, hash>, 
                      sign(<$IdP, $Username, nonce, hash>, sk)>)
   )
   ]

  /* has exactly the trivial AC variant */

lemma CodeVerifierSecrecy [reuse, use_induction]:
  all-traces
  "∀ verifier idp #x #y.
    ((UseCodeVerifierFor( verifier, idp ) @ #x) ∧
     (GenerateCodeVerifierFor( verifier, idp ) @ #y)) ⇒
    ((¬(∃ #z. !KU( verifier ) @ #z)) ∨
     (∃ domain #z. CompromisedDomain( idp, domain ) @ #z))"
/*
guarded formula characterizing all counter-examples:
"∃ verifier idp #x #y.
  (UseCodeVerifierFor( verifier, idp ) @ #x) ∧
  (GenerateCodeVerifierFor( verifier, idp ) @ #y)
 ∧
  (∃ #z. (!KU( verifier ) @ #z)) ∧
  (∀ domain #z. (CompromisedDomain( idp, domain ) @ #z) ⇒ ⊥)"
*/
by sorry

restriction Neq:
  "∀ a b #x. (Neq( a, b ) @ #x) ⇒ (¬(a = b))"
  // safety formula

lemma TokenFormatAndOTPLearning [sources]:
  all-traces
  "(((∀ token #i.
       (IsToken( token ) @ #i) ⇒
       (∃ first second user idp nonce hashed sk.
         ((((((token = <first, second>) ∧
              (first = <idp, user, nonce, hashed>)) ∧
             ((∃ #h. (!KU( idp ) @ #h) ∧ (#h < #i)) ∨
              (∃ sk.1 #h. ClaimIdPKey( idp, sk.1 ) @ #h))) ∧
            ((∃ #h. (!KU( user ) @ #h) ∧ (#h < #i)) ∨
             (∃ party #h. ClaimUsername( party, idp, user ) @ #h))) ∧
           ((∃ #h. (!KU( nonce ) @ #h) ∧ (#h < #i)) ∨
            (∃ #h. GenNonce( nonce ) @ #h))) ∧
          ((∃ #h. (!KU( hashed ) @ #h) ∧ (#h < #i)) ∨
           (∃ fp salt. hashed = h(fp, salt)))) ∧
         (second = sign(first, sk)))) ∧
     (∀ nonce #i.
       (IsNonce( nonce ) @ #i) ⇒
       ((∃ #h. (!KU( nonce ) @ #h) ∧ (#h < #i)) ∨
        (∃ #h. GenNonce( nonce ) @ #h)))) ∧
    (∀ code #i.
      (IsCode( code ) @ #i) ⇒
      ((∃ #h. (!KU( code ) @ #h) ∧ (#h < #i)) ∨
       (∃ idp #h. GenCode( idp, code ) @ #h)))) ∧
   (∀ chall #i.
     (OTPRespond( chall ) @ #i) ⇒
     ((∃ #j. (OTPChallenge( chall ) @ #j) ∧ (#j < #i)) ∨
      (∃ #j. (!KU( chall ) @ #j) ∧ (#j < #i))))"
/*
guarded formula characterizing all counter-examples:
"((∃ token #i.
    (IsToken( token ) @ #i)
   ∧
    ∀ first second user idp nonce hashed sk.
     (token = <first, second>) ∧
     (first = <idp, user, nonce, hashed>) ∧
     (second = sign(first, sk))
    ⇒
     (((∀ #h. (!KU( idp ) @ #h) ⇒ ¬(#h < #i)) ∧
       (∀ sk.1 #h. (ClaimIdPKey( idp, sk.1 ) @ #h) ⇒ ⊥)) ∨
      ((∀ #h. (!KU( user ) @ #h) ⇒ ¬(#h < #i)) ∧
       (∀ party #h. (ClaimUsername( party, idp, user ) @ #h) ⇒ ⊥)) ∨
      ((∀ #h. (!KU( nonce ) @ #h) ⇒ ¬(#h < #i)) ∧
       (∀ #h. (GenNonce( nonce ) @ #h) ⇒ ⊥)) ∨
      ((∀ #h. (!KU( hashed ) @ #h) ⇒ ¬(#h < #i)) ∧
       (∀ fp salt. (hashed = h(fp, salt)) ⇒ ⊥)))) ∨
  (∃ nonce #i.
    (IsNonce( nonce ) @ #i)
   ∧
    (∀ #h. (!KU( nonce ) @ #h) ⇒ ¬(#h < #i)) ∧
    (∀ #h. (GenNonce( nonce ) @ #h) ⇒ ⊥)) ∨
  (∃ code #i.
    (IsCode( code ) @ #i)
   ∧
    (∀ #h. (!KU( code ) @ #h) ⇒ ¬(#h < #i)) ∧
    (∀ idp #h. (GenCode( idp, code ) @ #h) ⇒ ⊥)) ∨
  (∃ chall #i.
    (OTPRespond( chall ) @ #i)
   ∧
    (∀ #j. (OTPChallenge( chall ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j. (!KU( chall ) @ #j) ⇒ ¬(#j < #i))))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∃ token #i.
           (IsToken( token ) @ #i)
          ∧
           ∀ first second user idp nonce hashed sk.
            (token = <first, second>) ∧
            (first = <idp, user, nonce, hashed>) ∧
            (second = sign(first, sk))
           ⇒
            (((∀ #h. (!KU( idp ) @ #h) ⇒ ¬(#h < #i)) ∧
              (∀ sk.1 #h. (ClaimIdPKey( idp, sk.1 ) @ #h) ⇒ ⊥)) ∨
             ((∀ #h. (!KU( user ) @ #h) ⇒ ¬(#h < #i)) ∧
              (∀ party #h. (ClaimUsername( party, idp, user ) @ #h) ⇒ ⊥)) ∨
             ((∀ #h. (!KU( nonce ) @ #h) ⇒ ¬(#h < #i)) ∧
              (∀ #h. (GenNonce( nonce ) @ #h) ⇒ ⊥)) ∨
             ((∀ #h. (!KU( hashed ) @ #h) ⇒ ¬(#h < #i)) ∧
              (∀ fp salt. (hashed = h(fp, salt)) ⇒ ⊥))))  ∥
         (∃ nonce #i.
           (IsNonce( nonce ) @ #i)
          ∧
           (∀ #h. (!KU( nonce ) @ #h) ⇒ ¬(#h < #i)) ∧
           (∀ #h. (GenNonce( nonce ) @ #h) ⇒ ⊥))  ∥
         (∃ code #i.
           (IsCode( code ) @ #i)
          ∧
           (∀ #h. (!KU( code ) @ #h) ⇒ ¬(#h < #i)) ∧
           (∀ idp #h. (GenCode( idp, code ) @ #h) ⇒ ⊥))  ∥
         (∃ chall #i.
           (OTPRespond( chall ) @ #i)
          ∧
           (∀ #j. (OTPChallenge( chall ) @ #j) ⇒ ¬(#j < #i)) ∧
           (∀ #j. (!KU( chall ) @ #j) ⇒ ¬(#j < #i))) )
    case case_1
    solve( (last(#i))  ∥
           (∃ first second user idp nonce hashed sk.
             (token = <first, second>) ∧
             (first = <idp, user, nonce, hashed>) ∧
             (second = sign(first, sk))
            ∧
             (((∃ #h. (!KU( idp ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #i)) ∨
               (∃ sk.1 #h. (ClaimIdPKey( idp, sk.1 ) @ #h) ∧ ¬(last(#h))))) ∧
             (((∃ #h. (!KU( user ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #i)) ∨
               (∃ party #h.
                 (ClaimUsername( party, idp, user ) @ #h) ∧ ¬(last(#h))))) ∧
             (((∃ #h. (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #i)) ∨
               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))))) ∧
             (((∃ #h. (!KU( hashed ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #i)) ∨
               (∃ fp salt. (hashed = h(fp, salt)))))) )
      case case_1
      solve( IsToken( token ) @ #i )
        case OIDCIdPTokenIssue
        solve( ((∀ #h. (!KU( $IdP ) @ #h) ⇒ ¬(#h < #i)) ∧
                (∀ sk #h. (ClaimIdPKey( $IdP, sk ) @ #h) ⇒ ⊥))  ∥
               ((∀ #h. (!KU( $Username ) @ #h) ⇒ ¬(#h < #i)) ∧
                (∀ party #h.
                  (ClaimUsername( party, $IdP, $Username ) @ #h) ⇒ ⊥))  ∥
               ((∀ #h. (!KU( nonce ) @ #h) ⇒ ¬(#h < #i)) ∧
                (∀ #h. (GenNonce( nonce ) @ #h) ⇒ ⊥))  ∥
               ((∀ #h. (!KU( hash ) @ #h) ⇒ ¬(#h < #i)) ∧
                (∀ fp salt. (hash = h(fp, salt)) ⇒ ⊥)) )
          case case_1
          solve( St_OIDCIdP_Code( $IdP, $Username, code, hash, nonce,
                                  s256(code_verifier)
                 ) ▶₃ #i )
            case OIDCIdPIssueCode
            by contradiction /* from formulas */
          qed
        next
          case case_2
          solve( St_OIDCIdP_Code( $IdP, $Username, code, hash, nonce,
                                  s256(code_verifier)
                 ) ▶₃ #i )
            case OIDCIdPIssueCode
            solve( (∃ #h. (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h.
                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( !KU( tlsClientMsg(~sess.1, cert(~IdPKey.1),
                                         <'oidc_req', hash, nonce, s256(code_verifier)>)
                       ) @ #vk.2 )
                  case OIDCAdversaryInit
                  solve( !KU( tlsClientMsg(~sess.1, cert(~IdPKey.1),
                                           <'login', $Username, pw>)
                         ) @ #vk.3 )
                    case OIDCClientCodeRedirect_case_1
                    solve( (∃ #h.
                             (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_2
                    solve( (∃ #h.
                             (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_3
                    solve( (∃ #h.
                             (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_4
                    solve( (∃ #h.
                             (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCClientLogin
                    by contradiction /* from formulas */
                  next
                    case OIDCIdPIssueCode
                    solve( (∃ #h.
                             (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCIdPTokenIssue_case_1
                    solve( (∃ #h.
                             (!KU( $Username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.1, $Username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case OIDCIdPTokenIssue_case_2
                    solve( (∃ #h.
                             (!KU( $Username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.1, $Username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.2 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.2 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( ~n.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.2 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.2 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.2 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.2 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( ~n.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.2 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.2 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_01
                    solve( (∃ #h.
                             (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* forbidden KD-fact */
                    qed
                  next
                    case OIDCTokenForward_case_02
                    solve( (∃ #h.
                             (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* forbidden KD-fact */
                    qed
                  next
                    case OIDCTokenForward_case_03
                    solve( (∃ #h.
                             (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* forbidden KD-fact */
                    qed
                  next
                    case OIDCTokenForward_case_04
                    solve( (∃ #h.
                             (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* forbidden KD-fact */
                    qed
                  next
                    case OIDCTokenForward_case_05
                    solve( (∃ #h.
                             (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_06
                    solve( (∃ #h.
                             (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_07
                    solve( (∃ #h.
                             (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_08
                    solve( (∃ #h.
                             (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_09
                    solve( (∃ #h.
                             (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_10
                    solve( (∃ #h.
                             (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_11
                    solve( (∃ #h.
                             (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_12
                    solve( (∃ #h.
                             (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case SignalRespond
                    solve( (∃ #j.
                             (OTPChallenge( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8)) )
                      case case_1
                      by contradiction /* impossible chain */
                    next
                      case case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_tlsClientMsg
                    by contradiction /* from formulas */
                  qed
                next
                  case OIDCClientCodeRedirect_case_1
                  solve( (∃ #h.
                           (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( (∃ #h.
                           (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( (∃ #h.
                           (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( (∃ #h.
                           (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCClientInit
                  solve( (∃ #j.
                           (OTPChallenge( challenge ) @ #j)
                          ∧
                           (¬(last(#j))) ∧ (#j < #vr.12))  ∥
                         (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.12)) )
                    case case_1
                    solve( !KU( tlsClientMsg(~sess.1, cert(~IdPKey.1),
                                             <'login', $Username, pw>)
                           ) @ #vk.2 )
                      case OIDCClientCodeRedirect_case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_3
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_4
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCClientLogin
                      by contradiction /* from formulas */
                    next
                      case OIDCIdPIssueCode
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCIdPTokenIssue_case_1
                      solve( (∃ #h.
                               (!KU( $Username.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, $Username.2 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case OIDCIdPTokenIssue_case_2
                      solve( (∃ #h.
                               (!KU( $Username.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, $Username.2 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.29))  ∥
                                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.29))  ∥
                                     (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                   (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.29))  ∥
                                     (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.29))  ∥
                                     (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.29))  ∥
                                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.29))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                   (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( ~n.8 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.29))  ∥
                                     (∃ #h. (GenNonce( ~n.8 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.8 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.29))  ∥
                                     (∃ #h. (GenNonce( ~n.8 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.29))  ∥
                                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.29))  ∥
                                     (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                   (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.29))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.29))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.29))  ∥
                                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.29))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                   (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.29))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.29))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_01
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* forbidden KD-fact */
                      qed
                    next
                      case OIDCTokenForward_case_02
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* forbidden KD-fact */
                      qed
                    next
                      case OIDCTokenForward_case_03
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* forbidden KD-fact */
                      qed
                    next
                      case OIDCTokenForward_case_04
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* forbidden KD-fact */
                      qed
                    next
                      case OIDCTokenForward_case_05
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_06
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_07
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_08
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_09
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.20))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.20))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.20))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.20))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_10
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.20))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.20))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.20))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.20))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_11
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.20))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.20))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.20))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.20))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_12
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.20))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.20))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.20))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.20))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case SignalRespond
                      solve( (∃ #j.
                               (OTPChallenge( challenge ) @ #j)
                              ∧
                               (¬(last(#j))) ∧ (#j < #vr.19))  ∥
                             (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.19)) )
                        case case_1
                        by contradiction /* impossible chain */
                      next
                        case case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_tlsClientMsg
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_2
                    solve( !KU( tlsClientMsg(~sess.1, cert(~IdPKey.1),
                                             <'login', $Username, pw>)
                           ) @ #vk.2 )
                      case OIDCClientCodeRedirect_case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_3
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_4
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCClientLogin
                      by contradiction /* from formulas */
                    next
                      case OIDCIdPIssueCode
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCIdPTokenIssue_case_1
                      solve( (∃ #h.
                               (!KU( $Username.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, $Username.2 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case OIDCIdPTokenIssue_case_2
                      solve( (∃ #h.
                               (!KU( $Username.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, $Username.2 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.29))  ∥
                                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.5 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.29))  ∥
                                     (∃ #h. (GenNonce( ~n.5 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.5 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                   (∃ #h. (GenNonce( ~n.5 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.29))  ∥
                                     (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.29))  ∥
                                     (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.29))  ∥
                                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.29))  ∥
                                     (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                   (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.29))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.29))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.29))  ∥
                                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.5 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.29))  ∥
                                     (∃ #h. (GenNonce( ~n.5 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.5 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                   (∃ #h. (GenNonce( ~n.5 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.29))  ∥
                                     (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.29))  ∥
                                     (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.29))  ∥
                                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.29))  ∥
                                     (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                   (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.29))  ∥
                                     (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.29))  ∥
                                     (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.25, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_01
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* forbidden KD-fact */
                      qed
                    next
                      case OIDCTokenForward_case_02
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* forbidden KD-fact */
                      qed
                    next
                      case OIDCTokenForward_case_03
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* forbidden KD-fact */
                      qed
                    next
                      case OIDCTokenForward_case_04
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* forbidden KD-fact */
                      qed
                    next
                      case OIDCTokenForward_case_05
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_06
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_07
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_08
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_09
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.20))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.20))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.20))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.20))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_10
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.20))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.20))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.20))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.20))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_11
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.20))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.20))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.20))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.20))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_12
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.20))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.20))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.20))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.20))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case SignalRespond
                      solve( (∃ #j.
                               (OTPChallenge( challenge.1 ) @ #j)
                              ∧
                               (¬(last(#j))) ∧ (#j < #vr.19))  ∥
                             (∃ #j. (!KU( challenge.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.19)) )
                        case case_1
                        by contradiction /* impossible chain */
                      next
                        case case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_tlsClientMsg
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case OIDCIdPIssueCode
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCIdPTokenIssue_case_1
                  solve( (∃ #h.
                           (!KU( $Username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.1, $Username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case OIDCIdPTokenIssue_case_2
                  solve( (∃ #h.
                           (!KU( $Username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.1, $Username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_01
                  solve( (∃ #h.
                           (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* forbidden KD-fact */
                  qed
                next
                  case OIDCTokenForward_case_02
                  solve( (∃ #h.
                           (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* forbidden KD-fact */
                  qed
                next
                  case OIDCTokenForward_case_03
                  solve( (∃ #h.
                           (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* forbidden KD-fact */
                  qed
                next
                  case OIDCTokenForward_case_04
                  solve( (∃ #h.
                           (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* forbidden KD-fact */
                  qed
                next
                  case OIDCTokenForward_case_05
                  solve( (∃ #h.
                           (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_06
                  solve( (∃ #h.
                           (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_07
                  solve( (∃ #h.
                           (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_08
                  solve( (∃ #h.
                           (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_09
                  solve( (∃ #h.
                           (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_10
                  solve( (∃ #h.
                           (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_11
                  solve( (∃ #h.
                           (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_12
                  solve( (∃ #h.
                           (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case SignalRespond
                  solve( (∃ #j.
                           (OTPChallenge( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                         (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7)) )
                    case case_1
                    by contradiction /* impossible chain */
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case c_tlsClientMsg
                  solve( !KU( tlsClientMsg(~sess.1, cert(~IdPKey.1),
                                           <'login', $Username, pw>)
                         ) @ #vk.3 )
                    case OIDCClientCodeRedirect_case_1
                    solve( (∃ #h.
                             (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_2
                    solve( (∃ #h.
                             (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_3
                    solve( (∃ #h.
                             (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_4
                    solve( (∃ #h.
                             (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCClientLogin
                    by contradiction /* from formulas */
                  next
                    case OIDCIdPIssueCode
                    solve( (∃ #h.
                             (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCIdPTokenIssue_case_1
                    solve( (∃ #h.
                             (!KU( $Username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.1, $Username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case OIDCIdPTokenIssue_case_2
                    solve( (∃ #h.
                             (!KU( $Username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.1, $Username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                                 (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                                 (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                                 (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                                 (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_01
                    solve( (∃ #h.
                             (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* forbidden KD-fact */
                    qed
                  next
                    case OIDCTokenForward_case_02
                    solve( (∃ #h.
                             (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* forbidden KD-fact */
                    qed
                  next
                    case OIDCTokenForward_case_03
                    solve( (∃ #h.
                             (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* forbidden KD-fact */
                    qed
                  next
                    case OIDCTokenForward_case_04
                    solve( (∃ #h.
                             (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* forbidden KD-fact */
                    qed
                  next
                    case OIDCTokenForward_case_05
                    solve( (∃ #h.
                             (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_06
                    solve( (∃ #h.
                             (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_07
                    solve( (∃ #h.
                             (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_08
                    solve( (∃ #h.
                             (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_09
                    solve( (∃ #h.
                             (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_10
                    solve( (∃ #h.
                             (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_11
                    solve( (∃ #h.
                             (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_12
                    solve( (∃ #h.
                             (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case SignalRespond
                    solve( (∃ #j.
                             (OTPChallenge( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7)) )
                      case case_1
                      by contradiction /* impossible chain */
                    next
                      case case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_tlsClientMsg
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_2
                solve( !KU( tlsClientMsg(~sess.1, cert(~IdPKey.1),
                                         <'oidc_req', hash, ~n, s256(code_verifier)>)
                       ) @ #vk.2 )
                  case OIDCAdversaryInit
                  solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.2),
                                           <'login', $Username, pw.1>)
                         ) @ #vk.3 )
                    case OIDCClientCodeRedirect_case_1
                    solve( (∃ #h.
                             (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_2
                    solve( (∃ #h.
                             (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_3
                    solve( (∃ #h.
                             (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_4
                    solve( (∃ #h.
                             (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCClientLogin
                    by contradiction /* from formulas */
                  next
                    case OIDCIdPIssueCode
                    solve( (∃ #h.
                             (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCIdPTokenIssue_case_1
                    solve( (∃ #h.
                             (!KU( $Username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, $Username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case OIDCIdPTokenIssue_case_2
                    solve( (∃ #h.
                             (!KU( $Username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, $Username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( ~n.5 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.5 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.5 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.5 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.5 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.5 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.5 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.5 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( ~n.5 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.5 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.5 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.5 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_01
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* forbidden KD-fact */
                    qed
                  next
                    case OIDCTokenForward_case_02
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* forbidden KD-fact */
                    qed
                  next
                    case OIDCTokenForward_case_03
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* forbidden KD-fact */
                    qed
                  next
                    case OIDCTokenForward_case_04
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* forbidden KD-fact */
                    qed
                  next
                    case OIDCTokenForward_case_05
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_06
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_07
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_08
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_09
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_10
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_11
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_12
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case SignalRespond
                    solve( (∃ #j.
                             (OTPChallenge( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8)) )
                      case case_1
                      by contradiction /* impossible chain */
                    next
                      case case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_tlsClientMsg
                    by contradiction /* from formulas */
                  qed
                next
                  case OIDCClientCodeRedirect_case_1
                  solve( (∃ #h.
                           (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( (∃ #h.
                           (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( (∃ #h.
                           (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( (∃ #h.
                           (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCClientInit
                  solve( (∃ #j.
                           (OTPChallenge( challenge ) @ #j)
                          ∧
                           (¬(last(#j))) ∧ (#j < #vr.11))  ∥
                         (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11)) )
                    case case_1
                    solve( !KU( tlsClientMsg(~sess, cert(~IdPKey),
                                             <'login', $Username.1, pw>)
                           ) @ #vk.2 )
                      case OIDCClientCodeRedirect_case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_3
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_4
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCClientLogin
                      by contradiction /* from formulas */
                    next
                      case OIDCIdPIssueCode
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCIdPTokenIssue_case_1
                      solve( (∃ #h.
                               (!KU( $Username.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, $Username.2 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case OIDCIdPTokenIssue_case_2
                      solve( (∃ #h.
                               (!KU( $Username.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, $Username.2 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( ~n.8 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.8 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.8 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.8 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.8 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.8 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.8 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( ~n.8 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( ~n.8 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.8 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.8 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.8 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_01
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* forbidden KD-fact */
                      qed
                    next
                      case OIDCTokenForward_case_02
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* forbidden KD-fact */
                      qed
                    next
                      case OIDCTokenForward_case_03
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* forbidden KD-fact */
                      qed
                    next
                      case OIDCTokenForward_case_04
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* forbidden KD-fact */
                      qed
                    next
                      case OIDCTokenForward_case_05
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_06
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_07
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_08
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_09
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_10
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_11
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_12
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case SignalRespond
                      solve( (∃ #j.
                               (OTPChallenge( challenge ) @ #j)
                              ∧
                               (¬(last(#j))) ∧ (#j < #vr.18))  ∥
                             (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.18)) )
                        case case_1
                        by contradiction /* impossible chain */
                      next
                        case case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_tlsClientMsg
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_2
                    solve( !KU( tlsClientMsg(~sess, cert(~IdPKey),
                                             <'login', $Username.1, pw>)
                           ) @ #vk.2 )
                      case OIDCClientCodeRedirect_case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_3
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_4
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCClientLogin
                      by contradiction /* from formulas */
                    next
                      case OIDCIdPIssueCode
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCIdPTokenIssue_case_1
                      solve( (∃ #h.
                               (!KU( $Username.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, $Username.2 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case OIDCIdPTokenIssue_case_2
                      solve( (∃ #h.
                               (!KU( $Username.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, $Username.2 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_01
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* forbidden KD-fact */
                      qed
                    next
                      case OIDCTokenForward_case_02
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* forbidden KD-fact */
                      qed
                    next
                      case OIDCTokenForward_case_03
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* forbidden KD-fact */
                      qed
                    next
                      case OIDCTokenForward_case_04
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* forbidden KD-fact */
                      qed
                    next
                      case OIDCTokenForward_case_05
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_06
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_07
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_08
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_09
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_10
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_11
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_12
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case SignalRespond
                      solve( (∃ #j.
                               (OTPChallenge( challenge.1 ) @ #j)
                              ∧
                               (¬(last(#j))) ∧ (#j < #vr.18))  ∥
                             (∃ #j. (!KU( challenge.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.18)) )
                        case case_1
                        by contradiction /* impossible chain */
                      next
                        case case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_tlsClientMsg
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case OIDCIdPIssueCode
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCIdPTokenIssue_case_1
                  solve( (∃ #h.
                           (!KU( $Username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, $Username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case OIDCIdPTokenIssue_case_2
                  solve( (∃ #h.
                           (!KU( $Username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, $Username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_01
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* forbidden KD-fact */
                  qed
                next
                  case OIDCTokenForward_case_02
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* forbidden KD-fact */
                  qed
                next
                  case OIDCTokenForward_case_03
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* forbidden KD-fact */
                  qed
                next
                  case OIDCTokenForward_case_04
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* forbidden KD-fact */
                  qed
                next
                  case OIDCTokenForward_case_05
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_06
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_07
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_08
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_09
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_10
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_11
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_12
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case SignalRespond
                  solve( (∃ #j.
                           (OTPChallenge( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                         (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7)) )
                    case case_1
                    by contradiction /* impossible chain */
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case c_tlsClientMsg
                  solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.2),
                                           <'login', $Username, pw.1>)
                         ) @ #vk.3 )
                    case OIDCClientCodeRedirect_case_1
                    solve( (∃ #h.
                             (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_2
                    solve( (∃ #h.
                             (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_3
                    solve( (∃ #h.
                             (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_4
                    solve( (∃ #h.
                             (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCClientLogin
                    by contradiction /* from formulas */
                  next
                    case OIDCIdPIssueCode
                    solve( (∃ #h.
                             (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCIdPTokenIssue_case_1
                    solve( (∃ #h.
                             (!KU( $Username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, $Username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case OIDCIdPTokenIssue_case_2
                    solve( (∃ #h.
                             (!KU( $Username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, $Username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_01
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* forbidden KD-fact */
                    qed
                  next
                    case OIDCTokenForward_case_02
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* forbidden KD-fact */
                    qed
                  next
                    case OIDCTokenForward_case_03
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* forbidden KD-fact */
                    qed
                  next
                    case OIDCTokenForward_case_04
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* forbidden KD-fact */
                    qed
                  next
                    case OIDCTokenForward_case_05
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_06
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_07
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_08
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_09
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_10
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_11
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_12
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case SignalRespond
                    solve( (∃ #j.
                             (OTPChallenge( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7)) )
                      case case_1
                      by contradiction /* impossible chain */
                    next
                      case case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_tlsClientMsg
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                     (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.2),
                                         <'oidc_req', hash, ~n.1, s256(code_verifier)>)
                       ) @ #vk.2 )
                  case OIDCAdversaryInit
                  solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.2),
                                           <'login', $Username, pw.1>)
                         ) @ #vk.3 )
                    case OIDCClientCodeRedirect_case_1
                    solve( (∃ #h.
                             (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_2
                    solve( (∃ #h.
                             (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_3
                    solve( (∃ #h.
                             (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_4
                    solve( (∃ #h.
                             (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCClientLogin
                    by contradiction /* from formulas */
                  next
                    case OIDCIdPIssueCode
                    solve( (∃ #h.
                             (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCIdPTokenIssue_case_1
                    solve( (∃ #h.
                             (!KU( $Username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, $Username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case OIDCIdPTokenIssue_case_2
                    solve( (∃ #h.
                             (!KU( $Username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, $Username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( ~n.5 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.5 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.5 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.5 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.5 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.5 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.5 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.5 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( ~n.5 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.5 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.5 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.5 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_01
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* forbidden KD-fact */
                    qed
                  next
                    case OIDCTokenForward_case_02
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* forbidden KD-fact */
                    qed
                  next
                    case OIDCTokenForward_case_03
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* forbidden KD-fact */
                    qed
                  next
                    case OIDCTokenForward_case_04
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* forbidden KD-fact */
                    qed
                  next
                    case OIDCTokenForward_case_05
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_06
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_07
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_08
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_09
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_10
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_11
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_12
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case SignalRespond
                    solve( (∃ #j.
                             (OTPChallenge( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8)) )
                      case case_1
                      by contradiction /* impossible chain */
                    next
                      case case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_tlsClientMsg
                    by contradiction /* from formulas */
                  qed
                next
                  case OIDCClientCodeRedirect_case_1
                  solve( (∃ #h.
                           (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( (∃ #h.
                           (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( (∃ #h.
                           (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( (∃ #h.
                           (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCClientInit
                  solve( (∃ #j.
                           (OTPChallenge( challenge ) @ #j)
                          ∧
                           (¬(last(#j))) ∧ (#j < #vr.11))  ∥
                         (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11)) )
                    case case_1
                    solve( !KU( tlsClientMsg(~sess, cert(~IdPKey),
                                             <'login', $Username.1, pw>)
                           ) @ #vk.2 )
                      case OIDCClientCodeRedirect_case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_3
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_4
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCClientLogin
                      by contradiction /* from formulas */
                    next
                      case OIDCIdPIssueCode
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCIdPTokenIssue_case_1
                      solve( (∃ #h.
                               (!KU( $Username.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, $Username.2 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case OIDCIdPTokenIssue_case_2
                      solve( (∃ #h.
                               (!KU( $Username.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, $Username.2 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( ~n.8 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.8 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.8 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.8 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.8 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.8 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.8 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( ~n.8 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( ~n.8 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.8 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.8 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.8 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_01
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* forbidden KD-fact */
                      qed
                    next
                      case OIDCTokenForward_case_02
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* forbidden KD-fact */
                      qed
                    next
                      case OIDCTokenForward_case_03
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* forbidden KD-fact */
                      qed
                    next
                      case OIDCTokenForward_case_04
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* forbidden KD-fact */
                      qed
                    next
                      case OIDCTokenForward_case_05
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_06
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_07
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_08
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_09
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_10
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_11
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_12
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case SignalRespond
                      solve( (∃ #j.
                               (OTPChallenge( challenge ) @ #j)
                              ∧
                               (¬(last(#j))) ∧ (#j < #vr.18))  ∥
                             (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.18)) )
                        case case_1
                        by contradiction /* impossible chain */
                      next
                        case case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_tlsClientMsg
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_2
                    solve( !KU( tlsClientMsg(~sess, cert(~IdPKey),
                                             <'login', $Username.1, pw>)
                           ) @ #vk.2 )
                      case OIDCClientCodeRedirect_case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_3
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_4
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCClientLogin
                      by contradiction /* from formulas */
                    next
                      case OIDCIdPIssueCode
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCIdPTokenIssue_case_1
                      solve( (∃ #h.
                               (!KU( $Username.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, $Username.2 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case OIDCIdPTokenIssue_case_2
                      solve( (∃ #h.
                               (!KU( $Username.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, $Username.2 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_01
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* forbidden KD-fact */
                      qed
                    next
                      case OIDCTokenForward_case_02
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* forbidden KD-fact */
                      qed
                    next
                      case OIDCTokenForward_case_03
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* forbidden KD-fact */
                      qed
                    next
                      case OIDCTokenForward_case_04
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* forbidden KD-fact */
                      qed
                    next
                      case OIDCTokenForward_case_05
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_06
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_07
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_08
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_09
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_10
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_11
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_12
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case SignalRespond
                      solve( (∃ #j.
                               (OTPChallenge( challenge.1 ) @ #j)
                              ∧
                               (¬(last(#j))) ∧ (#j < #vr.18))  ∥
                             (∃ #j. (!KU( challenge.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.18)) )
                        case case_1
                        by contradiction /* impossible chain */
                      next
                        case case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_tlsClientMsg
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case OIDCIdPIssueCode
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCIdPTokenIssue_case_1
                  solve( (∃ #h.
                           (!KU( $Username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, $Username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case OIDCIdPTokenIssue_case_2
                  solve( (∃ #h.
                           (!KU( $Username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, $Username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_01
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* forbidden KD-fact */
                  qed
                next
                  case OIDCTokenForward_case_02
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* forbidden KD-fact */
                  qed
                next
                  case OIDCTokenForward_case_03
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* forbidden KD-fact */
                  qed
                next
                  case OIDCTokenForward_case_04
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* forbidden KD-fact */
                  qed
                next
                  case OIDCTokenForward_case_05
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_06
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_07
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_08
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_09
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_10
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_11
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_12
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case SignalRespond
                  solve( (∃ #j.
                           (OTPChallenge( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                         (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7)) )
                    case case_1
                    by contradiction /* impossible chain */
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case c_tlsClientMsg
                  solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.2),
                                           <'login', $Username, pw.1>)
                         ) @ #vk.3 )
                    case OIDCClientCodeRedirect_case_1
                    solve( (∃ #h.
                             (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_2
                    solve( (∃ #h.
                             (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_3
                    solve( (∃ #h.
                             (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_4
                    solve( (∃ #h.
                             (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCClientLogin
                    by contradiction /* from formulas */
                  next
                    case OIDCIdPIssueCode
                    solve( (∃ #h.
                             (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCIdPTokenIssue_case_1
                    solve( (∃ #h.
                             (!KU( $Username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, $Username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case OIDCIdPTokenIssue_case_2
                    solve( (∃ #h.
                             (!KU( $Username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, $Username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_01
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* forbidden KD-fact */
                    qed
                  next
                    case OIDCTokenForward_case_02
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* forbidden KD-fact */
                    qed
                  next
                    case OIDCTokenForward_case_03
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* forbidden KD-fact */
                    qed
                  next
                    case OIDCTokenForward_case_04
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* forbidden KD-fact */
                    qed
                  next
                    case OIDCTokenForward_case_05
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_06
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_07
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_08
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_09
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_10
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_11
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_12
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case SignalRespond
                    solve( (∃ #j.
                             (OTPChallenge( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7)) )
                      case case_1
                      by contradiction /* impossible chain */
                    next
                      case case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_tlsClientMsg
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_2
                solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.2),
                                         <'oidc_req', hash, ~n.1, s256(code_verifier)>)
                       ) @ #vk.2 )
                  case OIDCAdversaryInit
                  solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.2),
                                           <'login', $Username, pw.1>)
                         ) @ #vk.2 )
                    case OIDCClientCodeRedirect_case_1
                    solve( (∃ #h.
                             (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_2
                    solve( (∃ #h.
                             (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_3
                    solve( (∃ #h.
                             (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_4
                    solve( (∃ #h.
                             (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCClientLogin
                    by contradiction /* from formulas */
                  next
                    case OIDCIdPIssueCode
                    solve( (∃ #h.
                             (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCIdPTokenIssue_case_1
                    solve( (∃ #h.
                             (!KU( $Username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, $Username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case OIDCIdPTokenIssue_case_2
                    solve( (∃ #h.
                             (!KU( $Username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, $Username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( ~n.5 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.5 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.5 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.5 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.5 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.5 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.5 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.5 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( ~n.5 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.5 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.5 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.5 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.14, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_01
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* forbidden KD-fact */
                    qed
                  next
                    case OIDCTokenForward_case_02
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* forbidden KD-fact */
                    qed
                  next
                    case OIDCTokenForward_case_03
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* forbidden KD-fact */
                    qed
                  next
                    case OIDCTokenForward_case_04
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* forbidden KD-fact */
                    qed
                  next
                    case OIDCTokenForward_case_05
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_06
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_07
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_08
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_09
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_10
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_11
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_12
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case SignalRespond
                    solve( (∃ #j.
                             (OTPChallenge( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8)) )
                      case case_1
                      by contradiction /* impossible chain */
                    next
                      case case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_tlsClientMsg
                    by contradiction /* from formulas */
                  qed
                next
                  case OIDCClientCodeRedirect_case_1
                  solve( (∃ #h.
                           (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( (∃ #h.
                           (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( (∃ #h.
                           (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( (∃ #h.
                           (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCClientInit
                  solve( (∃ #j.
                           (OTPChallenge( challenge ) @ #j)
                          ∧
                           (¬(last(#j))) ∧ (#j < #vr.11))  ∥
                         (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.11)) )
                    case case_1
                    solve( !KU( tlsClientMsg(~sess, cert(~IdPKey),
                                             <'login', $Username.1, pw>)
                           ) @ #vk.2 )
                      case OIDCClientCodeRedirect_case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_3
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_4
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCClientLogin
                      by contradiction /* from formulas */
                    next
                      case OIDCIdPIssueCode
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCIdPTokenIssue_case_1
                      solve( (∃ #h.
                               (!KU( $Username.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, $Username.2 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case OIDCIdPTokenIssue_case_2
                      solve( (∃ #h.
                               (!KU( $Username.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, $Username.2 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( ~n.8 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.8 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.8 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.8 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.8 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.8 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.8 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( ~n.8 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( ~n.8 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.8 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.8 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.8 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_01
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* forbidden KD-fact */
                      qed
                    next
                      case OIDCTokenForward_case_02
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* forbidden KD-fact */
                      qed
                    next
                      case OIDCTokenForward_case_03
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* forbidden KD-fact */
                      qed
                    next
                      case OIDCTokenForward_case_04
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* forbidden KD-fact */
                      qed
                    next
                      case OIDCTokenForward_case_05
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_06
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_07
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_08
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_09
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_10
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_11
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_12
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case SignalRespond
                      solve( (∃ #j.
                               (OTPChallenge( challenge ) @ #j)
                              ∧
                               (¬(last(#j))) ∧ (#j < #vr.18))  ∥
                             (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.18)) )
                        case case_1
                        by contradiction /* impossible chain */
                      next
                        case case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_tlsClientMsg
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_2
                    solve( !KU( tlsClientMsg(~sess, cert(~IdPKey),
                                             <'login', $Username.1, pw>)
                           ) @ #vk.2 )
                      case OIDCClientCodeRedirect_case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_3
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCClientCodeRedirect_case_4
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCClientLogin
                      by contradiction /* from formulas */
                    next
                      case OIDCIdPIssueCode
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case OIDCIdPTokenIssue_case_1
                      solve( (∃ #h.
                               (!KU( $Username.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, $Username.2 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case OIDCIdPTokenIssue_case_2
                      solve( (∃ #h.
                               (!KU( $Username.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, $Username.2 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.7 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.7 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.27))  ∥
                                   (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.28))  ∥
                                     (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                                case case_1
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              next
                                case case_2
                                solve( (∃ #h.
                                         (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                       (∃ fp salt. (hash = h(fp, salt))) )
                                  case case_1
                                  by contradiction /* cyclic */
                                next
                                  case case_2
                                  by solve( (#vr.24, 0) ~~> (#vk.1, 0) )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_01
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* forbidden KD-fact */
                      qed
                    next
                      case OIDCTokenForward_case_02
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* forbidden KD-fact */
                      qed
                    next
                      case OIDCTokenForward_case_03
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* forbidden KD-fact */
                      qed
                    next
                      case OIDCTokenForward_case_04
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* forbidden KD-fact */
                      qed
                    next
                      case OIDCTokenForward_case_05
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_06
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_07
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_08
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.26))  ∥
                                 (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by contradiction /* impossible chain */
                            qed
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_09
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_10
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_11
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case OIDCTokenForward_case_12
                      solve( (∃ #h.
                               (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                             (∃ party #h.
                               (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.18))  ∥
                               (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.19))  ∥
                                 (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case SignalRespond
                      solve( (∃ #j.
                               (OTPChallenge( challenge.1 ) @ #j)
                              ∧
                               (¬(last(#j))) ∧ (#j < #vr.18))  ∥
                             (∃ #j. (!KU( challenge.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.18)) )
                        case case_1
                        by contradiction /* impossible chain */
                      next
                        case case_2
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_tlsClientMsg
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case OIDCIdPIssueCode
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCIdPTokenIssue_case_1
                  solve( (∃ #h.
                           (!KU( $Username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, $Username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case OIDCIdPTokenIssue_case_2
                  solve( (∃ #h.
                           (!KU( $Username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, $Username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_01
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* forbidden KD-fact */
                  qed
                next
                  case OIDCTokenForward_case_02
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* forbidden KD-fact */
                  qed
                next
                  case OIDCTokenForward_case_03
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* forbidden KD-fact */
                  qed
                next
                  case OIDCTokenForward_case_04
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* forbidden KD-fact */
                  qed
                next
                  case OIDCTokenForward_case_05
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_06
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_07
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_08
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_09
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_10
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_11
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_12
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case SignalRespond
                  solve( (∃ #j.
                           (OTPChallenge( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                         (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7)) )
                    case case_1
                    by contradiction /* impossible chain */
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case c_tlsClientMsg
                  solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.2),
                                           <'login', $Username, pw.1>)
                         ) @ #vk.2 )
                    case OIDCClientCodeRedirect_case_1
                    solve( (∃ #h.
                             (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_2
                    solve( (∃ #h.
                             (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_3
                    solve( (∃ #h.
                             (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCClientCodeRedirect_case_4
                    solve( (∃ #h.
                             (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCClientLogin
                    by contradiction /* from formulas */
                  next
                    case OIDCIdPIssueCode
                    solve( (∃ #h.
                             (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* impossible chain */
                    qed
                  next
                    case OIDCIdPTokenIssue_case_1
                    solve( (∃ #h.
                             (!KU( $Username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, $Username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case OIDCIdPTokenIssue_case_2
                    solve( (∃ #h.
                             (!KU( $Username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, $Username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                   (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                              case case_1
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            next
                              case case_2
                              solve( (∃ #h.
                                       (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                     (∃ fp salt. (hash.1 = h(fp, salt))) )
                                case case_1
                                by contradiction /* cyclic */
                              next
                                case case_2
                                by solve( (#vr.13, 0) ~~> (#vk.1, 0) )
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_01
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* forbidden KD-fact */
                    qed
                  next
                    case OIDCTokenForward_case_02
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* forbidden KD-fact */
                    qed
                  next
                    case OIDCTokenForward_case_03
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* forbidden KD-fact */
                    qed
                  next
                    case OIDCTokenForward_case_04
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by contradiction /* forbidden KD-fact */
                    qed
                  next
                    case OIDCTokenForward_case_05
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_06
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_07
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_08
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                               (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            by contradiction /* cyclic */
                          next
                            case case_2
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_09
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_10
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_11
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case OIDCTokenForward_case_12
                    solve( (∃ #h.
                             (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ party #h.
                             (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                               (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case SignalRespond
                    solve( (∃ #j.
                             (OTPChallenge( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                           (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7)) )
                      case case_1
                      by contradiction /* impossible chain */
                    next
                      case case_2
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_tlsClientMsg
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case case_3
          solve( St_OIDCIdP_Code( $IdP, $Username, code, hash, nonce,
                                  s256(code_verifier)
                 ) ▶₃ #i )
            case OIDCIdPIssueCode
            solve( (∃ #h. (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        next
          case case_4
          solve( St_OIDCIdP_Code( $IdP, $Username, code, hash, nonce,
                                  s256(code_verifier)
                 ) ▶₃ #i )
            case OIDCIdPIssueCode
            solve( (∃ #h. (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h.
                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( !KU( tlsClientMsg(~sess.1, cert(~IdPKey.1),
                                         <'oidc_req', hash, nonce, s256(code_verifier)>)
                       ) @ #vk.2 )
                  case OIDCAdversaryInit
                  by contradiction /* from formulas */
                next
                  case OIDCClientCodeRedirect_case_1
                  solve( (∃ #h.
                           (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( (∃ #h.
                           (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( (∃ #h.
                           (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( (∃ #h.
                           (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCClientInit
                  by contradiction /* from formulas */
                next
                  case OIDCIdPIssueCode
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCIdPTokenIssue_case_1
                  solve( (∃ #h.
                           (!KU( $Username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.1, $Username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case OIDCIdPTokenIssue_case_2
                  solve( (∃ #h.
                           (!KU( $Username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.1, $Username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_01
                  solve( (∃ #h.
                           (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* forbidden KD-fact */
                  qed
                next
                  case OIDCTokenForward_case_02
                  solve( (∃ #h.
                           (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* forbidden KD-fact */
                  qed
                next
                  case OIDCTokenForward_case_03
                  solve( (∃ #h.
                           (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* forbidden KD-fact */
                  qed
                next
                  case OIDCTokenForward_case_04
                  solve( (∃ #h.
                           (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* forbidden KD-fact */
                  qed
                next
                  case OIDCTokenForward_case_05
                  solve( (∃ #h.
                           (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_06
                  solve( (∃ #h.
                           (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_07
                  solve( (∃ #h.
                           (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_08
                  solve( (∃ #h.
                           (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_09
                  solve( (∃ #h.
                           (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_10
                  solve( (∃ #h.
                           (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_11
                  solve( (∃ #h.
                           (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_12
                  solve( (∃ #h.
                           (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case SignalRespond
                  solve( (∃ #j.
                           (OTPChallenge( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                         (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7)) )
                    case case_1
                    by contradiction /* impossible chain */
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case c_tlsClientMsg
                  by contradiction /* from formulas */
                qed
              next
                case case_2
                solve( !KU( tlsClientMsg(~sess.1, cert(~IdPKey.1),
                                         <'oidc_req', hash, ~n, s256(code_verifier)>)
                       ) @ #vk.2 )
                  case OIDCAdversaryInit
                  by contradiction /* from formulas */
                next
                  case OIDCClientCodeRedirect_case_1
                  solve( (∃ #h.
                           (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( (∃ #h.
                           (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( (∃ #h.
                           (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( (∃ #h.
                           (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCClientInit
                  by contradiction /* from formulas */
                next
                  case OIDCIdPIssueCode
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCIdPTokenIssue_case_1
                  solve( (∃ #h.
                           (!KU( $Username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, $Username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case OIDCIdPTokenIssue_case_2
                  solve( (∃ #h.
                           (!KU( $Username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, $Username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_01
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* forbidden KD-fact */
                  qed
                next
                  case OIDCTokenForward_case_02
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* forbidden KD-fact */
                  qed
                next
                  case OIDCTokenForward_case_03
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* forbidden KD-fact */
                  qed
                next
                  case OIDCTokenForward_case_04
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* forbidden KD-fact */
                  qed
                next
                  case OIDCTokenForward_case_05
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_06
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_07
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_08
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_09
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_10
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_11
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_12
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case SignalRespond
                  solve( (∃ #j.
                           (OTPChallenge( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                         (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7)) )
                    case case_1
                    by contradiction /* impossible chain */
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case c_tlsClientMsg
                  by contradiction /* from formulas */
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                     (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.2),
                                         <'oidc_req', hash, ~n.1, s256(code_verifier)>)
                       ) @ #vk.2 )
                  case OIDCAdversaryInit
                  by contradiction /* from formulas */
                next
                  case OIDCClientCodeRedirect_case_1
                  solve( (∃ #h.
                           (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( (∃ #h.
                           (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( (∃ #h.
                           (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( (∃ #h.
                           (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCClientInit
                  by contradiction /* from formulas */
                next
                  case OIDCIdPIssueCode
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCIdPTokenIssue_case_1
                  solve( (∃ #h.
                           (!KU( $Username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, $Username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case OIDCIdPTokenIssue_case_2
                  solve( (∃ #h.
                           (!KU( $Username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, $Username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_01
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* forbidden KD-fact */
                  qed
                next
                  case OIDCTokenForward_case_02
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* forbidden KD-fact */
                  qed
                next
                  case OIDCTokenForward_case_03
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* forbidden KD-fact */
                  qed
                next
                  case OIDCTokenForward_case_04
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* forbidden KD-fact */
                  qed
                next
                  case OIDCTokenForward_case_05
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_06
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_07
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_08
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_09
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_10
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_11
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_12
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case SignalRespond
                  solve( (∃ #j.
                           (OTPChallenge( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                         (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7)) )
                    case case_1
                    by contradiction /* impossible chain */
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case c_tlsClientMsg
                  by contradiction /* from formulas */
                qed
              next
                case case_2
                solve( !KU( tlsClientMsg(~sess.2, cert(~IdPKey.2),
                                         <'oidc_req', hash, ~n.1, s256(code_verifier)>)
                       ) @ #vk.2 )
                  case OIDCAdversaryInit
                  by contradiction /* from formulas */
                next
                  case OIDCClientCodeRedirect_case_1
                  solve( (∃ #h.
                           (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCClientCodeRedirect_case_2
                  solve( (∃ #h.
                           (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCClientCodeRedirect_case_3
                  solve( (∃ #h.
                           (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCClientCodeRedirect_case_4
                  solve( (∃ #h.
                           (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCClientInit
                  by contradiction /* from formulas */
                next
                  case OIDCIdPIssueCode
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case OIDCIdPTokenIssue_case_1
                  solve( (∃ #h.
                           (!KU( $Username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, $Username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case OIDCIdPTokenIssue_case_2
                  solve( (∃ #h.
                           (!KU( $Username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, $Username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                             (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.16))  ∥
                               (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #h.
                                   (!KU( ~n.3 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.17))  ∥
                                 (∃ #h. (GenNonce( ~n.3 ) @ #h) ∧ ¬(last(#h))) )
                            case case_1
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          next
                            case case_2
                            solve( (∃ #h.
                                     (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                                   (∃ fp salt. (hash.1 = h(fp, salt))) )
                              case case_1
                              by contradiction /* cyclic */
                            next
                              case case_2
                              by solve( (#vr.13, 0) ~~> (#vk, 0) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_01
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* forbidden KD-fact */
                  qed
                next
                  case OIDCTokenForward_case_02
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* forbidden KD-fact */
                  qed
                next
                  case OIDCTokenForward_case_03
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* forbidden KD-fact */
                  qed
                next
                  case OIDCTokenForward_case_04
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* forbidden KD-fact */
                  qed
                next
                  case OIDCTokenForward_case_05
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_06
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_07
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_08
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.15))  ∥
                             (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      next
                        case case_2
                        solve( (∃ #h.
                                 (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                               (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                          case case_1
                          by contradiction /* cyclic */
                        next
                          case case_2
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_09
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_10
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_11
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case OIDCTokenForward_case_12
                  solve( (∃ #h.
                           (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                         (∃ party #h.
                           (ClaimUsername( party, $IdP.2, username.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( $IdP.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.7))  ∥
                           (∃ sk #h. (ClaimIdPKey( $IdP.2, sk ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                             (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by contradiction /* impossible chain */
                      qed
                    qed
                  qed
                next
                  case SignalRespond
                  solve( (∃ #j.
                           (OTPChallenge( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                         (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7)) )
                    case case_1
                    by contradiction /* impossible chain */
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case c_tlsClientMsg
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      next
        case OIDCTokenForward
        solve( ((∀ #h. (!KU( $IdP ) @ #h) ⇒ ¬(#h < #i)) ∧
                (∀ sk #h. (ClaimIdPKey( $IdP, sk ) @ #h) ⇒ ⊥))  ∥
               ((∀ #h. (!KU( username ) @ #h) ⇒ ¬(#h < #i)) ∧
                (∀ party #h. (ClaimUsername( party, $IdP, username ) @ #h) ⇒ ⊥))  ∥
               ((∀ #h. (!KU( nonce ) @ #h) ⇒ ¬(#h < #i)) ∧
                (∀ #h. (GenNonce( nonce ) @ #h) ⇒ ⊥))  ∥
               ((∀ #h.
                  (!KU( h(<trim(pk(skInitiator)), trim(pkVerifier)>, salt) ) @ #h)
                 ⇒
                  ¬(#h < #i)) ∧
                (∀ fp salt.1.
                  (h(<trim(pk(skInitiator)), trim(pkVerifier)>, salt) =
                   h(fp, salt.1))
                 ⇒
                  ⊥)) )
          case case_1
          solve( !KU( tlsServerMsg(~sessPost, ~IdPKey,
                                   <'token', 
                                    <$IdP, username, nonce, 
                                     h(<trim(pk(skInitiator)), trim(pkVerifier)>, salt)>, 
                                    sign(<$IdP, username, nonce, 
                                          h(<trim(pk(skInitiator)), trim(pkVerifier)>, salt)>,
                                         x)
                                   >)
                 ) @ #vk.1 )
            case OIDCClientCodeRedirect_case_1
            solve( (∃ #h. (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case OIDCClientCodeRedirect_case_2
            solve( (∃ #h. (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case OIDCClientCodeRedirect_case_3
            solve( (∃ #h. (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case OIDCClientCodeRedirect_case_4
            solve( (∃ #h. (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case OIDCIdPIssueCode
            solve( (∃ #h.
                     (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case OIDCIdPTokenIssue_case_1
            by contradiction /* from formulas */
          next
            case OIDCIdPTokenIssue_case_2
            solve( (∃ #h.
                     (!KU( $Username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, $Username ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case OIDCIdPTokenIssue_case_3
            solve( (∃ #h.
                     (!KU( $Username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, $Username ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                         (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #h. (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                         (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                         (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                         (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_01
            solve( (∃ #h.
                     (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* forbidden KD-fact */
            qed
          next
            case OIDCTokenForward_case_02
            solve( (∃ #h.
                     (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* forbidden KD-fact */
            qed
          next
            case OIDCTokenForward_case_03
            solve( (∃ #h.
                     (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* forbidden KD-fact */
            qed
          next
            case OIDCTokenForward_case_04
            solve( (∃ #h.
                     (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* forbidden KD-fact */
            qed
          next
            case OIDCTokenForward_case_05
            solve( (∃ #h.
                     (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_06
            solve( (∃ #h.
                     (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_07
            solve( (∃ #h.
                     (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_08
            solve( (∃ #h.
                     (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_09
            solve( (∃ #h.
                     (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_10
            solve( (∃ #h.
                     (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_11
            solve( (∃ #h.
                     (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_12
            solve( (∃ #h.
                     (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case SignalRespond
            solve( (∃ #j.
                     (OTPChallenge( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr))  ∥
                   (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr)) )
              case case_1
              by contradiction /* impossible chain */
            next
              case case_2
              by contradiction /* cyclic */
            qed
          next
            case c_tlsServerMsg
            by contradiction /* from formulas */
          qed
        next
          case case_2
          solve( !KU( tlsServerMsg(~sessPost, ~IdPKey,
                                   <'token', 
                                    <$IdP, username, nonce, 
                                     h(<trim(pk(skInitiator)), trim(pkVerifier)>, salt)>, 
                                    sign(<$IdP, username, nonce, 
                                          h(<trim(pk(skInitiator)), trim(pkVerifier)>, salt)>,
                                         x)
                                   >)
                 ) @ #vk.1 )
            case OIDCClientCodeRedirect_case_1
            solve( (∃ #h. (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case OIDCClientCodeRedirect_case_2
            solve( (∃ #h. (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case OIDCClientCodeRedirect_case_3
            solve( (∃ #h. (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case OIDCClientCodeRedirect_case_4
            solve( (∃ #h. (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case OIDCIdPIssueCode
            solve( (∃ #h.
                     (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case OIDCIdPTokenIssue_case_1
            solve( (∃ #h.
                     (!KU( $Username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP, $Username ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case OIDCIdPTokenIssue_case_2
            solve( (∃ #h.
                     (!KU( $Username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, $Username ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case OIDCIdPTokenIssue_case_3
            solve( (∃ #h.
                     (!KU( $Username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, $Username ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                         (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #h. (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                         (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                         (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                         (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_01
            solve( (∃ #h.
                     (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* forbidden KD-fact */
            qed
          next
            case OIDCTokenForward_case_02
            solve( (∃ #h.
                     (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* forbidden KD-fact */
            qed
          next
            case OIDCTokenForward_case_03
            solve( (∃ #h.
                     (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* forbidden KD-fact */
            qed
          next
            case OIDCTokenForward_case_04
            solve( (∃ #h.
                     (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* forbidden KD-fact */
            qed
          next
            case OIDCTokenForward_case_05
            solve( (∃ #h.
                     (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_06
            solve( (∃ #h.
                     (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_07
            solve( (∃ #h.
                     (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_08
            solve( (∃ #h.
                     (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_09
            solve( (∃ #h.
                     (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_10
            solve( (∃ #h.
                     (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_11
            solve( (∃ #h.
                     (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_12
            solve( (∃ #h.
                     (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case SignalRespond
            solve( (∃ #j.
                     (OTPChallenge( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr))  ∥
                   (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr)) )
              case case_1
              by contradiction /* impossible chain */
            next
              case case_2
              by contradiction /* cyclic */
            qed
          next
            case c_tlsServerMsg
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( !KU( tlsServerMsg(~sessPost, ~IdPKey,
                                   <'token', 
                                    <$IdP, username, nonce, 
                                     h(<trim(pk(skInitiator)), trim(pkVerifier)>, salt)>, 
                                    sign(<$IdP, username, nonce, 
                                          h(<trim(pk(skInitiator)), trim(pkVerifier)>, salt)>,
                                         x)
                                   >)
                 ) @ #vk.1 )
            case OIDCClientCodeRedirect_case_1
            solve( (∃ #h. (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case OIDCClientCodeRedirect_case_2
            solve( (∃ #h. (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case OIDCClientCodeRedirect_case_3
            solve( (∃ #h. (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case OIDCClientCodeRedirect_case_4
            solve( (∃ #h. (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case OIDCIdPIssueCode
            solve( (∃ #h.
                     (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case OIDCIdPTokenIssue_case_1
            solve( (∃ #h.
                     (!KU( $Username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP, $Username ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( $IdP ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( $IdP ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case OIDCIdPTokenIssue_case_2
            solve( (∃ #h.
                     (!KU( $Username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, $Username ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case OIDCIdPTokenIssue_case_3
            solve( (∃ #h.
                     (!KU( $Username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, $Username ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                         (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #h. (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                         (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                         (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                         (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                           (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.6, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_01
            solve( (∃ #h.
                     (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* forbidden KD-fact */
            qed
          next
            case OIDCTokenForward_case_02
            solve( (∃ #h.
                     (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* forbidden KD-fact */
            qed
          next
            case OIDCTokenForward_case_03
            solve( (∃ #h.
                     (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* forbidden KD-fact */
            qed
          next
            case OIDCTokenForward_case_04
            solve( (∃ #h.
                     (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* forbidden KD-fact */
            qed
          next
            case OIDCTokenForward_case_05
            solve( (∃ #h.
                     (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_06
            solve( (∃ #h.
                     (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_07
            solve( (∃ #h.
                     (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_08
            solve( (∃ #h.
                     (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_09
            solve( (∃ #h.
                     (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_10
            solve( (∃ #h.
                     (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_11
            solve( (∃ #h.
                     (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_12
            solve( (∃ #h.
                     (!KU( username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case SignalRespond
            solve( (∃ #j.
                     (OTPChallenge( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr))  ∥
                   (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr)) )
              case case_1
              by contradiction /* impossible chain */
            next
              case case_2
              by contradiction /* cyclic */
            qed
          next
            case c_tlsServerMsg
            by contradiction /* from formulas */
          qed
        next
          case case_4
          by contradiction /* from formulas */
        qed
      qed
    next
      case case_2
      solve( (∃ #h. (!KU( user ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #i))  ∥
             (∃ party #h.
               (ClaimUsername( party, idp, user ) @ #h) ∧ ¬(last(#h))) )
        case case_1
        solve( ((∀ #h. (!KU( idp ) @ #h) ⇒ ¬(#h < #i)) ∧
                (∀ sk #h. (ClaimIdPKey( idp, sk ) @ #h) ⇒ ⊥))  ∥
               ((∀ #h. (!KU( user ) @ #h) ⇒ ¬(#h < #i)) ∧
                (∀ party #h. (ClaimUsername( party, idp, user ) @ #h) ⇒ ⊥))  ∥
               ((∀ #h. (!KU( nonce ) @ #h) ⇒ ¬(#h < #i)) ∧
                (∀ #h. (GenNonce( nonce ) @ #h) ⇒ ⊥))  ∥
               ((∀ #h. (!KU( hashed ) @ #h) ⇒ ¬(#h < #i)) ∧
                (∀ fp salt. (hashed = h(fp, salt)) ⇒ ⊥)) )
          case case_1
          solve( (∃ #h. (!KU( idp ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #i))  ∥
                 (∃ sk #h. (ClaimIdPKey( idp, sk ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_2
          by contradiction /* from formulas */
        next
          case case_3
          solve( (∃ #h. (!KU( idp ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #i))  ∥
                 (∃ sk #h. (ClaimIdPKey( idp, sk ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            solve( (∃ #h. (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #i))  ∥
                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_2
            solve( (∃ #h. (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #i))  ∥
                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        next
          case case_4
          solve( (∃ #h. (!KU( idp ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #i))  ∥
                 (∃ sk #h. (ClaimIdPKey( idp, sk ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            solve( (∃ #h. (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #i))  ∥
                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( hashed ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #i))  ∥
                     (∃ fp salt. (hashed = h(fp, salt))) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( hashed ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #i))  ∥
                     (∃ fp salt. (hashed = h(fp, salt))) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          next
            case case_2
            solve( (∃ #h. (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #i))  ∥
                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( hashed ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #i))  ∥
                     (∃ fp salt. (hashed = h(fp, salt))) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( hashed ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #i))  ∥
                     (∃ fp salt. (hashed = h(fp, salt))) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      next
        case case_2
        solve( ((∀ #h. (!KU( $IdP ) @ #h) ⇒ ¬(#h < #i)) ∧
                (∀ sk #h. (ClaimIdPKey( $IdP, sk ) @ #h) ⇒ ⊥))  ∥
               ((∀ #h. (!KU( $Username ) @ #h) ⇒ ¬(#h < #i)) ∧
                (∀ party #h.
                  (ClaimUsername( party, $IdP, $Username ) @ #h) ⇒ ⊥))  ∥
               ((∀ #h. (!KU( nonce ) @ #h) ⇒ ¬(#h < #i)) ∧
                (∀ #h. (GenNonce( nonce ) @ #h) ⇒ ⊥))  ∥
               ((∀ #h. (!KU( hashed ) @ #h) ⇒ ¬(#h < #i)) ∧
                (∀ fp salt. (hashed = h(fp, salt)) ⇒ ⊥)) )
          case case_1
          solve( (∃ #h. (!KU( $IdP ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #i))  ∥
                 (∃ sk #h. (ClaimIdPKey( $IdP, sk ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_2
          by contradiction /* from formulas */
        next
          case case_3
          solve( (∃ #h. (!KU( $IdP ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #i))  ∥
                 (∃ sk #h. (ClaimIdPKey( $IdP, sk ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            solve( (∃ #h. (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #i))  ∥
                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_2
            solve( (∃ #h. (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #i))  ∥
                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        next
          case case_4
          solve( (∃ #h. (!KU( $IdP ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #i))  ∥
                 (∃ sk #h. (ClaimIdPKey( $IdP, sk ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            solve( (∃ #h. (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #i))  ∥
                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( hashed ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #i))  ∥
                     (∃ fp salt. (hashed = h(fp, salt))) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( hashed ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #i))  ∥
                     (∃ fp salt. (hashed = h(fp, salt))) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          next
            case case_2
            solve( (∃ #h. (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #i))  ∥
                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( hashed ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #i))  ∥
                     (∃ fp salt. (hashed = h(fp, salt))) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( hashed ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #i))  ∥
                     (∃ fp salt. (hashed = h(fp, salt))) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( (last(#i))  ∥
           (∃ #h. (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #i))  ∥
           (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
      case case_1
      solve( IsNonce( nonce ) @ #i )
        case OIDCIdPInit
        solve( !KU( tlsClientMsg(~sess, cert(~IdPKey),
                                 <'oidc_req', hash, nonce, code_challenge>)
               ) @ #vk )
          case OIDCAdversaryInit
          by contradiction /* from formulas */
        next
          case OIDCClientCodeRedirect_case_1
          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                 (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case OIDCClientCodeRedirect_case_2
          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                 (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case OIDCClientCodeRedirect_case_3
          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                 (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case OIDCClientCodeRedirect_case_4
          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                 (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case OIDCClientInit
          by contradiction /* from formulas */
        next
          case OIDCIdPIssueCode
          solve( (∃ #h.
                   (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                 (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case OIDCIdPTokenIssue_case_1
          solve( (∃ #h.
                   (!KU( $Username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                 (∃ party #h.
                   (ClaimUsername( party, $IdP.1, $Username ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h.
                       (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case case_2
              solve( (∃ #h.
                       (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            qed
          next
            case case_2
            solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h.
                       (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case case_2
              solve( (∃ #h.
                       (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            qed
          qed
        next
          case OIDCIdPTokenIssue_case_2
          solve( (∃ #h.
                   (!KU( $Username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                 (∃ party #h.
                   (ClaimUsername( party, $IdP.1, $Username ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h.
                       (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                           (∃ fp salt. (hash.1 = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.6, 0) ~~> (#vk, 0) )
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                           (∃ fp salt. (hash.1 = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.6, 0) ~~> (#vk, 0) )
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                         (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                           (∃ fp salt. (hash.1 = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.6, 0) ~~> (#vk, 0) )
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                           (∃ fp salt. (hash.1 = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.6, 0) ~~> (#vk, 0) )
                    qed
                  qed
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                       (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                         (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                           (∃ fp salt. (hash.1 = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.6, 0) ~~> (#vk, 0) )
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                           (∃ fp salt. (hash.1 = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.6, 0) ~~> (#vk, 0) )
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                         (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                           (∃ fp salt. (hash.1 = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.6, 0) ~~> (#vk, 0) )
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                           (∃ fp salt. (hash.1 = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.6, 0) ~~> (#vk, 0) )
                    qed
                  qed
                qed
              qed
            next
              case case_2
              solve( (∃ #h.
                       (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                           (∃ fp salt. (hash.1 = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.6, 0) ~~> (#vk, 0) )
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                           (∃ fp salt. (hash.1 = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.6, 0) ~~> (#vk, 0) )
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                         (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                           (∃ fp salt. (hash.1 = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.6, 0) ~~> (#vk, 0) )
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                           (∃ fp salt. (hash.1 = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.6, 0) ~~> (#vk, 0) )
                    qed
                  qed
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                       (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                         (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                           (∃ fp salt. (hash.1 = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.6, 0) ~~> (#vk, 0) )
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                           (∃ fp salt. (hash.1 = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.6, 0) ~~> (#vk, 0) )
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                         (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                           (∃ fp salt. (hash.1 = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.6, 0) ~~> (#vk, 0) )
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                           (∃ fp salt. (hash.1 = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.6, 0) ~~> (#vk, 0) )
                    qed
                  qed
                qed
              qed
            qed
          next
            case case_2
            solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h.
                       (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                           (∃ fp salt. (hash.1 = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.6, 0) ~~> (#vk, 0) )
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                           (∃ fp salt. (hash.1 = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.6, 0) ~~> (#vk, 0) )
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                         (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                           (∃ fp salt. (hash.1 = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.6, 0) ~~> (#vk, 0) )
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                           (∃ fp salt. (hash.1 = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.6, 0) ~~> (#vk, 0) )
                    qed
                  qed
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                       (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                         (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                           (∃ fp salt. (hash.1 = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.6, 0) ~~> (#vk, 0) )
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                           (∃ fp salt. (hash.1 = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.6, 0) ~~> (#vk, 0) )
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                         (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                           (∃ fp salt. (hash.1 = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.6, 0) ~~> (#vk, 0) )
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                           (∃ fp salt. (hash.1 = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.6, 0) ~~> (#vk, 0) )
                    qed
                  qed
                qed
              qed
            next
              case case_2
              solve( (∃ #h.
                       (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                     (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                         (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                           (∃ fp salt. (hash.1 = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.6, 0) ~~> (#vk, 0) )
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                           (∃ fp salt. (hash.1 = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.6, 0) ~~> (#vk, 0) )
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                         (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                           (∃ fp salt. (hash.1 = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.6, 0) ~~> (#vk, 0) )
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                           (∃ fp salt. (hash.1 = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.6, 0) ~~> (#vk, 0) )
                    qed
                  qed
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                       (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                         (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                           (∃ fp salt. (hash.1 = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.6, 0) ~~> (#vk, 0) )
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                           (∃ fp salt. (hash.1 = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.6, 0) ~~> (#vk, 0) )
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #h. (!KU( ~n ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                         (∃ #h. (GenNonce( ~n ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                           (∃ fp salt. (hash.1 = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.6, 0) ~~> (#vk, 0) )
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( hash.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                           (∃ fp salt. (hash.1 = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.6, 0) ~~> (#vk, 0) )
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case OIDCTokenForward_case_01
          solve( (∃ #h.
                   (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                 (∃ party #h.
                   (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* forbidden KD-fact */
          qed
        next
          case OIDCTokenForward_case_02
          solve( (∃ #h.
                   (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                 (∃ party #h.
                   (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* forbidden KD-fact */
          qed
        next
          case OIDCTokenForward_case_03
          solve( (∃ #h.
                   (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                 (∃ party #h.
                   (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* forbidden KD-fact */
          qed
        next
          case OIDCTokenForward_case_04
          solve( (∃ #h.
                   (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                 (∃ party #h.
                   (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* forbidden KD-fact */
          qed
        next
          case OIDCTokenForward_case_05
          solve( (∃ #h.
                   (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                 (∃ party #h.
                   (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                     (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                     (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case case_2
            solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                     (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                     (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          qed
        next
          case OIDCTokenForward_case_06
          solve( (∃ #h.
                   (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                 (∃ party #h.
                   (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                     (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                     (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case case_2
            solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                     (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                     (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          qed
        next
          case OIDCTokenForward_case_07
          solve( (∃ #h.
                   (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                 (∃ party #h.
                   (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                     (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                     (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case case_2
            solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                     (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                     (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          qed
        next
          case OIDCTokenForward_case_08
          solve( (∃ #h.
                   (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                 (∃ party #h.
                   (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                     (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                     (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case case_2
            solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                     (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.8))  ∥
                     (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                       (∃ #h. (GenNonce( nonce.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          qed
        next
          case OIDCTokenForward_case_09
          solve( (∃ #h.
                   (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                 (∃ party #h.
                   (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                     (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                     (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            qed
          next
            case case_2
            solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                     (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                     (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            qed
          qed
        next
          case OIDCTokenForward_case_10
          solve( (∃ #h.
                   (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                 (∃ party #h.
                   (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                     (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                     (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            qed
          next
            case case_2
            solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                     (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                     (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            qed
          qed
        next
          case OIDCTokenForward_case_11
          solve( (∃ #h.
                   (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                 (∃ party #h.
                   (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                     (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                     (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            qed
          next
            case case_2
            solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                     (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                     (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            qed
          qed
        next
          case OIDCTokenForward_case_12
          solve( (∃ #h.
                   (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                 (∃ party #h.
                   (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                     (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                     (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            qed
          next
            case case_2
            solve( (∃ #h. (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                     (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                     (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            qed
          qed
        next
          case SignalRespond
          solve( (∃ #j.
                   (OTPChallenge( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr))  ∥
                 (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr)) )
            case case_1
            by contradiction /* impossible chain */
          next
            case case_2
            by contradiction /* cyclic */
          qed
        next
          case c_tlsClientMsg
          by contradiction /* from formulas */
        qed
      next
        case OIDCIdPIssueCode
        solve( St_OIDCServer_Auth( $IdP, ~sess, hash, nonce, code_challenge
               ) ▶₀ #i )
          case OIDCIdPInit
          solve( (∃ #h. (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr))  ∥
                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  next
    case case_3
    solve( (last(#i))  ∥
           (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #i))  ∥
           (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
      case case_1
      solve( SessionStore( $Initiator, nonce,
                           <$IdP, hash, salt, code_verifier>
             ) ▶₄ #i )
        case OIDCClientInit
        solve( (∃ #j.
                 (OTPChallenge( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
               (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6)) )
          case case_1
          solve( !KU( browserForward(~sess, cert(~signalClient),
                                     <'code', code, ~n>)
                 ) @ #vk )
            case LinkClick
            by contradiction /* from formulas */
          next
            case OIDCClientCodeRedirect_case_1
            solve( (∃ #h.
                     (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case OIDCClientCodeRedirect_case_2
            solve( (∃ #h.
                     (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case OIDCClientCodeRedirect_case_3
            solve( (∃ #h.
                     (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case OIDCClientCodeRedirect_case_4
            solve( (∃ #h.
                     (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case OIDCIdPIssueCode_case_1
            by contradiction /* from formulas */
          next
            case OIDCIdPIssueCode_case_2
            solve( (∃ #h.
                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case OIDCIdPTokenIssue_case_1
            solve( (∃ #h.
                     (!KU( $Username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, $Username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case OIDCIdPTokenIssue_case_2
            solve( (∃ #h.
                     (!KU( $Username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, $Username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.22))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                           (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( ~n.5 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                           (∃ #h. (GenNonce( ~n.5 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( ~n.5 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.22))  ∥
                         (∃ #h. (GenNonce( ~n.5 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                           (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                           (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.22))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                           (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                           (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.22))  ∥
                         (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                           (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( ~n.6 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                           (∃ #h. (GenNonce( ~n.6 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case case_2
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.22))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                           (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( ~n.5 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                           (∃ #h. (GenNonce( ~n.5 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( ~n.5 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.22))  ∥
                         (∃ #h. (GenNonce( ~n.5 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( ~n.5 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                           (∃ #h. (GenNonce( ~n.5 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( ~n.5 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                           (∃ #h. (GenNonce( ~n.5 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.22))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                           (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( ~n.5 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                           (∃ #h. (GenNonce( ~n.5 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( ~n.5 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.22))  ∥
                         (∃ #h. (GenNonce( ~n.5 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( ~n.5 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                           (∃ #h. (GenNonce( ~n.5 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( ~n.5 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                           (∃ #h. (GenNonce( ~n.5 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_01
            solve( (∃ #h.
                     (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* forbidden KD-fact */
            qed
          next
            case OIDCTokenForward_case_02
            solve( (∃ #h.
                     (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* forbidden KD-fact */
            qed
          next
            case OIDCTokenForward_case_03
            solve( (∃ #h.
                     (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* forbidden KD-fact */
            qed
          next
            case OIDCTokenForward_case_04
            solve( (∃ #h.
                     (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* forbidden KD-fact */
            qed
          next
            case OIDCTokenForward_case_05
            solve( (∃ #h.
                     (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.21))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.21))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case case_2
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.21))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.21))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_06
            solve( (∃ #h.
                     (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.21))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.21))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case case_2
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.21))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.21))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_07
            solve( (∃ #h.
                     (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.21))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.21))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case case_2
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.21))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.21))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_08
            solve( (∃ #h.
                     (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.21))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.21))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case case_2
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.21))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.21))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_09
            solve( (∃ #h.
                     (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.14))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.14))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.14))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.14))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_10
            solve( (∃ #h.
                     (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.14))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.14))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.14))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.14))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_11
            solve( (∃ #h.
                     (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.14))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.14))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.14))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.14))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_12
            solve( (∃ #h.
                     (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.14))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.14))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.14))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.14))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case SignalRespond
            solve( (∃ #j.
                     (OTPChallenge( challenge ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.13))  ∥
                   (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) )
              case case_1
              by contradiction /* impossible chain */
            next
              case case_2
              by contradiction /* cyclic */
            qed
          next
            case c_browserForward
            by contradiction /* from formulas */
          qed
        next
          case case_2
          solve( !KU( browserForward(~sess, cert(~signalClient),
                                     <'code', code, ~n>)
                 ) @ #vk )
            case LinkClick
            by contradiction /* from formulas */
          next
            case OIDCClientCodeRedirect_case_1
            solve( (∃ #h.
                     (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case OIDCClientCodeRedirect_case_2
            solve( (∃ #h.
                     (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case OIDCClientCodeRedirect_case_3
            solve( (∃ #h.
                     (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case OIDCClientCodeRedirect_case_4
            solve( (∃ #h.
                     (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case OIDCIdPIssueCode_case_1
            by contradiction /* from formulas */
          next
            case OIDCIdPIssueCode_case_2
            solve( (∃ #h.
                     (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* impossible chain */
            qed
          next
            case OIDCIdPTokenIssue_case_1
            solve( (∃ #h.
                     (!KU( $Username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, $Username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case OIDCIdPTokenIssue_case_2
            solve( (∃ #h.
                     (!KU( $Username.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, $Username.1 ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.22))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                           (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                           (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.22))  ∥
                         (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                           (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                           (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.22))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                           (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( ~n.5 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                           (∃ #h. (GenNonce( ~n.5 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( ~n.5 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.22))  ∥
                         (∃ #h. (GenNonce( ~n.5 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( ~n.5 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                           (∃ #h. (GenNonce( ~n.5 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( ~n.5 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                           (∃ #h. (GenNonce( ~n.5 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case case_2
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.22))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                           (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                           (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.22))  ∥
                         (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                           (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                           (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.22))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                           (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                           (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.22))  ∥
                         (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h.
                             (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                           (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #h.
                             (!KU( ~n.4 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.23))  ∥
                           (∃ #h. (GenNonce( ~n.4 ) @ #h) ∧ ¬(last(#h))) )
                      case case_1
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    next
                      case case_2
                      solve( (∃ #h.
                               (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                             (∃ fp salt. (hash = h(fp, salt))) )
                        case case_1
                        by contradiction /* cyclic */
                      next
                        case case_2
                        by solve( (#vr.19, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_01
            solve( (∃ #h.
                     (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* forbidden KD-fact */
            qed
          next
            case OIDCTokenForward_case_02
            solve( (∃ #h.
                     (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* forbidden KD-fact */
            qed
          next
            case OIDCTokenForward_case_03
            solve( (∃ #h.
                     (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* forbidden KD-fact */
            qed
          next
            case OIDCTokenForward_case_04
            solve( (∃ #h.
                     (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              by contradiction /* cyclic */
            next
              case case_2
              by contradiction /* forbidden KD-fact */
            qed
          next
            case OIDCTokenForward_case_05
            solve( (∃ #h.
                     (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.21))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.21))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case case_2
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.21))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.21))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_06
            solve( (∃ #h.
                     (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.21))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.21))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case case_2
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.21))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.21))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_07
            solve( (∃ #h.
                     (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.21))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.21))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case case_2
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.21))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.21))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_08
            solve( (∃ #h.
                     (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.21))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.21))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case case_2
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.21))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( code.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.21))  ∥
                       (∃ idp #h. (GenCode( idp, code.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    by contradiction /* cyclic */
                  next
                    case case_2
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_09
            solve( (∃ #h.
                     (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.14))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.14))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.14))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.14))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_10
            solve( (∃ #h.
                     (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.14))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.14))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.14))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.14))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_11
            solve( (∃ #h.
                     (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.14))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.14))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.14))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.14))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case OIDCTokenForward_case_12
            solve( (∃ #h.
                     (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                   (∃ party #h.
                     (ClaimUsername( party, $IdP.1, username ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.14))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.14))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h.
                       (!KU( $IdP.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.13))  ∥
                     (∃ sk #h. (ClaimIdPKey( $IdP.1, sk ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.14))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.14))  ∥
                       (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case SignalRespond
            solve( (∃ #j.
                     (OTPChallenge( challenge.1 ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.13))  ∥
                   (∃ #j. (!KU( challenge.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.13)) )
              case case_1
              by contradiction /* impossible chain */
            next
              case case_2
              by contradiction /* cyclic */
            qed
          next
            case c_browserForward
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  next
    case case_4
    solve( (last(#i))  ∥
           (∃ #j. (OTPChallenge( chall ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j. (!KU( chall ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( !Phone( $A, sim ) ▶₀ #i )
        case Phone
        solve( !KU( sms(phone(~n), <'otp', chall>) ) @ #vk )
          case OIDCClientCodeRedirect_case_1
          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                 (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case OIDCClientCodeRedirect_case_2
          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                 (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case OIDCClientCodeRedirect_case_3
          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                 (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case OIDCClientCodeRedirect_case_4
          solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                 (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case OIDCIdPIssueCode
          solve( (∃ #h.
                   (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                 (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* impossible chain */
          qed
        next
          case OIDCIdPTokenIssue_case_1
          solve( (∃ #h.
                   (!KU( $Username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                 (∃ party #h.
                   (ClaimUsername( party, $IdP, $Username ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            solve( (∃ #h. (!KU( $IdP ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h.
                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case case_2
              solve( (∃ #h.
                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            qed
          next
            case case_2
            solve( (∃ #h. (!KU( $IdP ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h.
                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case case_2
              solve( (∃ #h.
                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            qed
          qed
        next
          case OIDCIdPTokenIssue_case_2
          solve( (∃ #h.
                   (!KU( $Username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                 (∃ party #h.
                   (ClaimUsername( party, $IdP, $Username ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            solve( (∃ #h. (!KU( $IdP ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h.
                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.11))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                           (∃ fp salt. (hash = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.7, 0) ~~> (#vk, 0) )
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                           (∃ fp salt. (hash = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.7, 0) ~~> (#vk, 0) )
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.11))  ∥
                         (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                           (∃ fp salt. (hash = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.7, 0) ~~> (#vk, 0) )
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                           (∃ fp salt. (hash = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.7, 0) ~~> (#vk, 0) )
                    qed
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                       (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.11))  ∥
                         (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                           (∃ fp salt. (hash = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.7, 0) ~~> (#vk, 0) )
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                           (∃ fp salt. (hash = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.7, 0) ~~> (#vk, 0) )
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.11))  ∥
                         (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                           (∃ fp salt. (hash = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.7, 0) ~~> (#vk, 0) )
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                           (∃ fp salt. (hash = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.7, 0) ~~> (#vk, 0) )
                    qed
                  qed
                qed
              qed
            next
              case case_2
              solve( (∃ #h.
                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.11))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                           (∃ fp salt. (hash = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.7, 0) ~~> (#vk, 0) )
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                           (∃ fp salt. (hash = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.7, 0) ~~> (#vk, 0) )
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( ~n.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.11))  ∥
                         (∃ #h. (GenNonce( ~n.2 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                           (∃ fp salt. (hash = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.7, 0) ~~> (#vk, 0) )
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                           (∃ fp salt. (hash = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.7, 0) ~~> (#vk, 0) )
                    qed
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( ~n.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                       (∃ #h. (GenNonce( ~n.2 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( ~n.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.11))  ∥
                         (∃ #h. (GenNonce( ~n.2 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                           (∃ fp salt. (hash = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.7, 0) ~~> (#vk, 0) )
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                           (∃ fp salt. (hash = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.7, 0) ~~> (#vk, 0) )
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( ~n.2 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.11))  ∥
                         (∃ #h. (GenNonce( ~n.2 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                           (∃ fp salt. (hash = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.7, 0) ~~> (#vk, 0) )
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                           (∃ fp salt. (hash = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.7, 0) ~~> (#vk, 0) )
                    qed
                  qed
                qed
              qed
            qed
          next
            case case_2
            solve( (∃ #h. (!KU( $IdP ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h.
                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.11))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                           (∃ fp salt. (hash = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.7, 0) ~~> (#vk, 0) )
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                           (∃ fp salt. (hash = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.7, 0) ~~> (#vk, 0) )
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.11))  ∥
                         (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                           (∃ fp salt. (hash = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.7, 0) ~~> (#vk, 0) )
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                           (∃ fp salt. (hash = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.7, 0) ~~> (#vk, 0) )
                    qed
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                       (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.11))  ∥
                         (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                           (∃ fp salt. (hash = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.7, 0) ~~> (#vk, 0) )
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                           (∃ fp salt. (hash = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.7, 0) ~~> (#vk, 0) )
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.11))  ∥
                         (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                           (∃ fp salt. (hash = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.7, 0) ~~> (#vk, 0) )
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                           (∃ fp salt. (hash = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.7, 0) ~~> (#vk, 0) )
                    qed
                  qed
                qed
              qed
            next
              case case_2
              solve( (∃ #h.
                       (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                     (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.11))  ∥
                         (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                           (∃ fp salt. (hash = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.7, 0) ~~> (#vk, 0) )
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                           (∃ fp salt. (hash = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.7, 0) ~~> (#vk, 0) )
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.11))  ∥
                         (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                           (∃ fp salt. (hash = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.7, 0) ~~> (#vk, 0) )
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                           (∃ fp salt. (hash = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.7, 0) ~~> (#vk, 0) )
                    qed
                  qed
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.10))  ∥
                       (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  solve( (∃ #h.
                           (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.11))  ∥
                         (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                           (∃ fp salt. (hash = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.7, 0) ~~> (#vk, 0) )
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                           (∃ fp salt. (hash = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.7, 0) ~~> (#vk, 0) )
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #h.
                           (!KU( ~n.1 ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.11))  ∥
                         (∃ #h. (GenNonce( ~n.1 ) @ #h) ∧ ¬(last(#h))) )
                    case case_1
                    solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                           (∃ fp salt. (hash = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.7, 0) ~~> (#vk, 0) )
                    qed
                  next
                    case case_2
                    solve( (∃ #h. (!KU( hash ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                           (∃ fp salt. (hash = h(fp, salt))) )
                      case case_1
                      by contradiction /* cyclic */
                    next
                      case case_2
                      by solve( (#vr.7, 0) ~~> (#vk, 0) )
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case OIDCTokenForward_case_01
          solve( (∃ #h.
                   (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                 (∃ party #h.
                   (ClaimUsername( party, $IdP, username ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* forbidden KD-fact */
          qed
        next
          case OIDCTokenForward_case_02
          solve( (∃ #h.
                   (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                 (∃ party #h.
                   (ClaimUsername( party, $IdP, username ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* forbidden KD-fact */
          qed
        next
          case OIDCTokenForward_case_03
          solve( (∃ #h.
                   (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                 (∃ party #h.
                   (ClaimUsername( party, $IdP, username ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* forbidden KD-fact */
          qed
        next
          case OIDCTokenForward_case_04
          solve( (∃ #h.
                   (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                 (∃ party #h.
                   (ClaimUsername( party, $IdP, username ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* forbidden KD-fact */
          qed
        next
          case OIDCTokenForward_case_05
          solve( (∃ #h.
                   (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                 (∃ party #h.
                   (ClaimUsername( party, $IdP, username ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            solve( (∃ #h. (!KU( $IdP ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                     (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                     (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case case_2
            solve( (∃ #h. (!KU( $IdP ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                     (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                     (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          qed
        next
          case OIDCTokenForward_case_06
          solve( (∃ #h.
                   (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                 (∃ party #h.
                   (ClaimUsername( party, $IdP, username ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            solve( (∃ #h. (!KU( $IdP ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                     (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                     (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case case_2
            solve( (∃ #h. (!KU( $IdP ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                     (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                     (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          qed
        next
          case OIDCTokenForward_case_07
          solve( (∃ #h.
                   (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                 (∃ party #h.
                   (ClaimUsername( party, $IdP, username ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            solve( (∃ #h. (!KU( $IdP ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                     (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                     (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case case_2
            solve( (∃ #h. (!KU( $IdP ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                     (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                     (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          qed
        next
          case OIDCTokenForward_case_08
          solve( (∃ #h.
                   (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                 (∃ party #h.
                   (ClaimUsername( party, $IdP, username ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            solve( (∃ #h. (!KU( $IdP ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                     (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                     (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          next
            case case_2
            solve( (∃ #h. (!KU( $IdP ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                     (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( code ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.9))  ∥
                     (∃ idp #h. (GenCode( idp, code ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              next
                case case_2
                solve( (∃ #h.
                         (!KU( nonce ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                       (∃ #h. (GenNonce( nonce ) @ #h) ∧ ¬(last(#h))) )
                  case case_1
                  by contradiction /* cyclic */
                next
                  case case_2
                  by contradiction /* impossible chain */
                qed
              qed
            qed
          qed
        next
          case OIDCTokenForward_case_09
          solve( (∃ #h.
                   (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                 (∃ party #h.
                   (ClaimUsername( party, $IdP, username ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            solve( (∃ #h. (!KU( $IdP ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.2))  ∥
                     (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.2))  ∥
                     (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            qed
          next
            case case_2
            solve( (∃ #h. (!KU( $IdP ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.2))  ∥
                     (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.2))  ∥
                     (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            qed
          qed
        next
          case OIDCTokenForward_case_10
          solve( (∃ #h.
                   (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                 (∃ party #h.
                   (ClaimUsername( party, $IdP, username ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            solve( (∃ #h. (!KU( $IdP ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.2))  ∥
                     (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.2))  ∥
                     (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            qed
          next
            case case_2
            solve( (∃ #h. (!KU( $IdP ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.2))  ∥
                     (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.2))  ∥
                     (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            qed
          qed
        next
          case OIDCTokenForward_case_11
          solve( (∃ #h.
                   (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                 (∃ party #h.
                   (ClaimUsername( party, $IdP, username ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            solve( (∃ #h. (!KU( $IdP ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.2))  ∥
                     (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.2))  ∥
                     (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            qed
          next
            case case_2
            solve( (∃ #h. (!KU( $IdP ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.2))  ∥
                     (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.2))  ∥
                     (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            qed
          qed
        next
          case OIDCTokenForward_case_12
          solve( (∃ #h.
                   (!KU( username ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                 (∃ party #h.
                   (ClaimUsername( party, $IdP, username ) @ #h) ∧ ¬(last(#h))) )
            case case_1
            solve( (∃ #h. (!KU( $IdP ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.2))  ∥
                     (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.2))  ∥
                     (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            qed
          next
            case case_2
            solve( (∃ #h. (!KU( $IdP ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.1))  ∥
                   (∃ sk #h. (ClaimIdPKey( $IdP, sk ) @ #h) ∧ ¬(last(#h))) )
              case case_1
              solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.2))  ∥
                     (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case case_2
              solve( (∃ #h. (!KU( t ) @ #h) ∧ (¬(last(#h))) ∧ (#h < #vr.2))  ∥
                     (∃ idp #h. (GenCode( idp, t ) @ #h) ∧ ¬(last(#h))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            qed
          qed
        next
          case SignalChallenge
          by contradiction /* from formulas */
        next
          case SignalRespond
          solve( (∃ #j.
                   (OTPChallenge( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.1))  ∥
                 (∃ #j. (!KU( challenge ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.1)) )
            case case_1
            by contradiction /* impossible chain */
          next
            case case_2
            by contradiction /* cyclic */
          qed
        next
          case c_sms
          by contradiction /* from formulas */
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  qed
qed

rule (modulo E) pk_req:
   [ Fr( ~sess ), !Domain( $IdP, ~IdPKey ) ]
  -->
   [ Out( tlsClientMsg(~sess, cert(~IdPKey), 'pk_req') ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) OIDCTokenForward:
   [
   St_OIDCClient_CodeReq( $Initiator, $IdP, ~sessPost, hash, salt,
                          code
   ),
   !Domain( $IdP, ~IdPKey ),
   In( tlsServerMsg(~sess, ~IdPKey, <'pk_response', pkIdP>) ),
   In( tlsServerMsg(~sessPost, ~IdPKey,
                    <'token', <$IdP, username, nonce, hash>, signature>)
   ),
   !SignalLtkClient( $Initiator, skInitiator ),
   !SignalLtkServer( phone, pkVerifier )
   ]
  --[
  Eq( h(<trim(pk(skInitiator)), trim(pkVerifier)>, salt), hash ),
  Eq( verify(signature, <$IdP, username, nonce, hash>, pkIdP), true
  ),
  Forward( $Initiator, <<$IdP, username, nonce, hash>, signature> ),
  IsToken( <<$IdP, username, nonce, hash>, signature> ),
  UsedCode( code )
  ]->
   [
   Out( signalMsg(skInitiator, pkVerifier,
                  <'fwd_token', <<$IdP, username, nonce, hash>, signature>, salt>)
   ),
   Out( code )
   ]

  /*
  rule (modulo AC) OIDCTokenForward:
     [
     St_OIDCClient_CodeReq( $Initiator, $IdP, ~sessPost, hash, salt,
                            code
     ),
     !Domain( $IdP, ~IdPKey ),
     In( tlsServerMsg(~sess, ~IdPKey, <'pk_response', pkIdP>) ),
     In( tlsServerMsg(~sessPost, ~IdPKey,
                      <'token', <$IdP, username, nonce, hash>, signature>)
     ),
     !SignalLtkClient( $Initiator, skInitiator ),
     !SignalLtkServer( phone, pkVerifier )
     ]
    --[
    Eq( h(<trim(pk(skInitiator)), trim(pkVerifier)>, salt), hash ),
    Eq( z, true ),
    Forward( $Initiator, <<$IdP, username, nonce, hash>, signature> ),
    IsToken( <<$IdP, username, nonce, hash>, signature> ),
    UsedCode( code )
    ]->
     [
     Out( signalMsg(skInitiator, pkVerifier,
                    <'fwd_token', <<$IdP, username, nonce, hash>, signature>, salt>)
     ),
     Out( code )
     ]
    variants (modulo AC)
    1. $IdP  = $IdP.35
       hash  = hash.41
       nonce = nonce.42
       pkIdP = pkIdP.44
       signature
             = signature.47
       username
             = username.49
       z     = verify(signature.47,
                      <$IdP.35, username.49, nonce.42, hash.41>, pkIdP.44)
    
    2. $IdP  = $IdP.68
       hash  = hash.74
       nonce = nonce.75
       pkIdP = pk(x.134)
       signature
             = sign(<$IdP.68, username.82, nonce.75, hash.74>, x.134)
       username
             = username.82
       z     = true
  */

lemma CodeIsSingleUse [use_induction, reuse]:
  all-traces
  "∀ idp code #a #b.
    ((GenCode( idp, code ) @ #a) ∧ (UsedCode( code ) @ #b)) ⇒
    (((∃ #x.
        (((UseCode( code ) @ #x) ∧ (#a < #x)) ∧ (#x < #b)) ∧
        (∀ #y. (UseCode( code ) @ #y) ⇒ (#x = #y))) ∨
      (∃ domain #x. CompromisedDomain( idp, domain ) @ #x)) ∨
     (∃ signalClient domain #x #y.
       (IsSignalClientFor( idp, signalClient ) @ #x) ∧
       (CompromisedDomain( signalClient, domain ) @ #y)))"
/*
guarded formula characterizing all counter-examples:
"∃ idp code #a #b.
  (GenCode( idp, code ) @ #a) ∧ (UsedCode( code ) @ #b)
 ∧
  (∀ #x.
    (UseCode( code ) @ #x)
   ⇒
    ((¬(#a < #x)) ∨
     (¬(#x < #b)) ∨
     (∃ #y. (UseCode( code ) @ #y) ∧ ¬(#x = #y)))) ∧
  (∀ domain #x. (CompromisedDomain( idp, domain ) @ #x) ⇒ ⊥) ∧
  (∀ signalClient domain #x #y.
    (IsSignalClientFor( idp, signalClient ) @ #x) ∧
    (CompromisedDomain( signalClient, domain ) @ #y)
   ⇒
    ⊥)"
*/
by sorry

rule (modulo E) OIDCTokenReceive:
   [
   !SignalLtkClient( $Verifier, skVerifier ),
   In( signalMsg(skSender, pk(skVerifier),
                 <'fwd_token', <<IdP, username, nonce, hash>, signature>, salt>)
   ),
   !Domain( IdP, ~IdPKey ), Fr( ~sess )
   ]
  -->
   [
   St_OIDCVerifier( ~sess, pk(skSender), skVerifier,
                    <<IdP, username, nonce, hash>, signature>, salt
   ),
   Out( tlsClientMsg(~sess, cert(~IdPKey), 'pk_req') )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) OIDCTokenVerify:
   [
   St_OIDCVerifier( ~sess, pkInitiator, skVerifier,
                    <<IdP, username, nonce, hash>, signature>, salt
   ),
   !Domain( IdP, ~IdPKey ),
   In( tlsServerMsg(~sess, ~IdPKey, <'pk_response', pkIdP>) )
   ]
  --[
  Eq( h(<trim(pkInitiator), trim(pk(skVerifier))>, salt), hash ),
  Eq( verify(signature, <IdP, username, nonce, hash>, pkIdP), true ),
  AssociateAs( pkInitiator, IdP, username, pk(skVerifier) )
  ]->
   [ ]

  /*
  rule (modulo AC) OIDCTokenVerify:
     [
     St_OIDCVerifier( ~sess, pkInitiator, skVerifier,
                      <<IdP, username, nonce, hash>, signature>, salt
     ),
     !Domain( IdP, ~IdPKey ),
     In( tlsServerMsg(~sess, ~IdPKey, <'pk_response', pkIdP>) )
     ]
    --[
    Eq( h(<trim(pkInitiator), trim(pk(skVerifier))>, salt), hash ),
    Eq( z, true ),
    AssociateAs( pkInitiator, IdP, username, pk(skVerifier) )
    ]->
     [ ]
    variants (modulo AC)
    1. IdP   = IdP.15
       hash  = hash.16
       nonce = nonce.17
       pkIdP = pkIdP.18
       signature
             = signature.21
       username
             = username.23
       z     = verify(signature.21,
                      <IdP.15, username.23, nonce.17, hash.16>, pkIdP.18)
    
    2. IdP   = IdP.21
       hash  = hash.22
       nonce = nonce.23
       pkIdP = pk(x.35)
       signature
             = sign(<IdP.21, username.29, nonce.23, hash.22>, x.35)
       username
             = username.29
       z     = true
  */

restriction Equality:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

lemma NonInjectiveAgreement:
  all-traces
  "∀ pkI idp username pkV initiator skI #i #j.
    (((AssociateAs( pkI, idp, username, pkV ) @ #i) ∧
      (SignalKeyClient( initiator, skI ) @ #j)) ∧
     (pkI = pk(skI))) ⇒
    ((((∃ salt hash nonce code_challenge sess #k #l #m.
         (((((OIDCRequest( initiator, idp, pkV, salt, hash, nonce,
                           code_challenge
              ) @ #k) ∧
             (#k < #i)) ∧
            (AuthenticationRequest( sess, idp, hash, nonce, code_challenge
             ) @ #l)) ∧
           (#l < #i)) ∧
          (AuthenticationResponse( sess, initiator, idp, username ) @ #m)) ∧
         (#m < #i)) ∨
       (∃ domain #k. CompromisedDomain( idp, domain ) @ #k)) ∨
      (∃ signalClient domain #k #l.
        (IsSignalClientFor( idp, signalClient ) @ #k) ∧
        (CompromisedDomain( signalClient, domain ) @ #l))) ∨
     (∃ party #k. CompromisedAccount( party, idp, username ) @ #k))"
/*
guarded formula characterizing all counter-examples:
"∃ pkI idp username pkV initiator skI #i #j.
  (AssociateAs( pkI, idp, username, pkV ) @ #i) ∧
  (SignalKeyClient( initiator, skI ) @ #j) ∧
  (pkI = pk(skI))
 ∧
  (∀ salt hash nonce code_challenge sess #k #l #m.
    (OIDCRequest( initiator, idp, pkV, salt, hash, nonce,
                  code_challenge
     ) @ #k) ∧
    (AuthenticationRequest( sess, idp, hash, nonce, code_challenge
     ) @ #l) ∧
    (AuthenticationResponse( sess, initiator, idp, username ) @ #m)
   ⇒
    ((¬(#k < #i)) ∨ (¬(#l < #i)) ∨ (¬(#m < #i)))) ∧
  (∀ domain #k. (CompromisedDomain( idp, domain ) @ #k) ⇒ ⊥) ∧
  (∀ signalClient domain #k #l.
    (IsSignalClientFor( idp, signalClient ) @ #k) ∧
    (CompromisedDomain( signalClient, domain ) @ #l)
   ⇒
    ⊥) ∧
  (∀ party #k.
    (CompromisedAccount( party, idp, username ) @ #k) ⇒ ⊥)"
*/
by sorry

lemma Executability:
  all-traces
  "∃ initiator initiatorSim initiatorSk verifier verifierSim
     verifierSk idp salt hash nonce code_verifier session username pw
     code token idpSk body signature fingerprint #a #b #c #d #e #f #g #h
     #i #j #k #l #m #n #o #p #q #r #s #t.
    (((((((((((((((((((((((((((((((((ClaimNumber( initiator,
                                                  initiatorSim
                                     ) @ #a) ∧
                                    (SignalKeyClient( initiator, initiatorSk ) @ #b)) ∧
                                   (SignalKeyServer( initiator, pk(initiatorSk) ) @ #c)) ∧
                                  (ClaimSignalKey( initiator, initiatorSk ) @ #d)) ∧
                                 (¬(∃ #x. CompromisedSignal( initiator, initiatorSk ) @ #x))) ∧
                                (¬(∃ #x. CompromisedNumber( initiator, initiatorSim ) @ #x))) ∧
                               (ClaimNumber( verifier, verifierSim ) @ #e)) ∧
                              (SignalKeyClient( verifier, verifierSk ) @ #f)) ∧
                             (SignalKeyServer( verifier, pk(verifierSk) ) @ #g)) ∧
                            (ClaimSignalKey( verifier, verifierSk ) @ #h)) ∧
                           (¬(∃ #x. CompromisedSignal( verifier, verifierSk ) @ #x))) ∧
                          (¬(∃ #x. CompromisedNumber( verifier, verifierSim ) @ #x))) ∧
                         (UsernameClient( initiator, idp, username, pw ) @ #i)) ∧
                        (UsernameServer( initiator, idp, username, pw ) @ #j)) ∧
                       (ClaimUsername( initiator, idp, username ) @ #k)) ∧
                      (¬(∃ #x. CompromisedAccount( initiator, idp, username ) @ #x))) ∧
                     (OIDCRequest( initiator, idp, pk(verifierSk), salt, hash, nonce,
                                   s256(code_verifier)
                      ) @ #l)) ∧
                    (¬(∃ #x. AdversaryOIDCRequest( ) @ #x))) ∧
                   (AuthenticationRequest( session, idp, hash, nonce,
                                           s256(code_verifier)
                    ) @ #m)) ∧
                  (AuthenticationResponse( session, initiator, idp, username
                   ) @ #n)) ∧
                 (IdPIssueCode( idp, username, code ) @ #o)) ∧
                (ClientReceiveCode( initiator, idp, code ) @ #p)) ∧
               (IdPIssueToken( token ) @ #q)) ∧
              (ClaimIdPKey( idp, idpSk ) @ #r)) ∧
             (¬(∃ sk #x. CompromisedDomain( idp, sk ) @ #x))) ∧
            (token = <body, signature>)) ∧
           (body = <idp, username, nonce, hash>)) ∧
          (hash = h(salt, fingerprint))) ∧
         (fingerprint = trim(<pk(initiatorSk), pk(verifierSk)>))) ∧
        (signature = sign(body, idpSk))) ∧
       (Forward( initiator, token ) @ #s)) ∧
      (AssociateAs( pk(initiatorSk), idp, username, pk(verifierSk)
       ) @ #t)) ∧
     (¬(∃ signal sk #x #y.
         (IsSignal( signal ) @ #x) ∧
         (CompromisedDomain( signal, sk ) @ #y)))) ∧
    (¬(∃ client sk #x #y.
        (IsSignalClientFor( idp, client ) @ #x) ∧
        (CompromisedDomain( client, sk ) @ #y)))"
/*
guarded formula characterizing all counter-examples:
"∀ initiator initiatorSim initiatorSk verifier verifierSim
   verifierSk idp salt hash nonce code_verifier session username pw
   code token idpSk body signature fingerprint #a #b #c #d #e #f #g #h
   #i #j #k #l #m #n #o #p #q #r #s #t.
  (ClaimNumber( initiator, initiatorSim ) @ #a) ∧
  (SignalKeyClient( initiator, initiatorSk ) @ #b) ∧
  (SignalKeyServer( initiator, pk(initiatorSk) ) @ #c) ∧
  (ClaimSignalKey( initiator, initiatorSk ) @ #d) ∧
  (ClaimNumber( verifier, verifierSim ) @ #e) ∧
  (SignalKeyClient( verifier, verifierSk ) @ #f) ∧
  (SignalKeyServer( verifier, pk(verifierSk) ) @ #g) ∧
  (ClaimSignalKey( verifier, verifierSk ) @ #h) ∧
  (UsernameClient( initiator, idp, username, pw ) @ #i) ∧
  (UsernameServer( initiator, idp, username, pw ) @ #j) ∧
  (ClaimUsername( initiator, idp, username ) @ #k) ∧
  (OIDCRequest( initiator, idp, pk(verifierSk), salt, hash, nonce,
                s256(code_verifier)
   ) @ #l) ∧
  (AuthenticationRequest( session, idp, hash, nonce,
                          s256(code_verifier)
   ) @ #m) ∧
  (AuthenticationResponse( session, initiator, idp, username
   ) @ #n) ∧
  (IdPIssueCode( idp, username, code ) @ #o) ∧
  (ClientReceiveCode( initiator, idp, code ) @ #p) ∧
  (IdPIssueToken( token ) @ #q) ∧
  (ClaimIdPKey( idp, idpSk ) @ #r) ∧
  (token = <body, signature>) ∧
  (body = <idp, username, nonce, hash>) ∧
  (hash = h(salt, fingerprint)) ∧
  (fingerprint = trim(<pk(initiatorSk), pk(verifierSk)>)) ∧
  (signature = sign(body, idpSk)) ∧
  (Forward( initiator, token ) @ #s) ∧
  (AssociateAs( pk(initiatorSk), idp, username, pk(verifierSk)
   ) @ #t)
 ⇒
  ((∃ #x. (CompromisedSignal( initiator, initiatorSk ) @ #x)) ∨
   (∃ #x. (CompromisedNumber( initiator, initiatorSim ) @ #x)) ∨
   (∃ #x. (CompromisedSignal( verifier, verifierSk ) @ #x)) ∨
   (∃ #x. (CompromisedNumber( verifier, verifierSim ) @ #x)) ∨
   (∃ #x. (CompromisedAccount( initiator, idp, username ) @ #x)) ∨
   (∃ #x. (AdversaryOIDCRequest( ) @ #x)) ∨
   (∃ sk #x. (CompromisedDomain( idp, sk ) @ #x)) ∨
   (∃ signal sk #x #y.
     (IsSignal( signal ) @ #x) ∧
     (CompromisedDomain( signal, sk ) @ #y)) ∨
   (∃ client sk #x #y.
     (IsSignalClientFor( idp, client ) @ #x) ∧
     (CompromisedDomain( client, sk ) @ #y)))"
*/
by sorry

/* All well-formedness checks were successful. */

end