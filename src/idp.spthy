rule IdPSetup:
  [ !Domain($IdP, ~secret), Fr(~idpSk) ]
  -->
  [ !IdP($IdP), !IdPLtk($IdP, ~idpSk)
  , Out(pk(~idpSk)) ]

rule IdPCompromise[color=#FF6961]:
  [ !IdPLtk($IdP, idpSk) ]
  --[ CompromisedIdP($IdP)
    , SomeCompromise() ]->
  [ !IdPCompromise($IdP), Out(idpSk) ]

rule IdPKeyRequest[color=#9AD5D8]:
  [ !IdP($IdP), !Domain($IdP, ~domainSecret), Fr(~sess) ]
  -->
  [ Out(tlsClient('GET', ~sess, cert(~domainSecret), 'pk_req'))
  , St_IdPKeyReq($IdP, ~sess) ]

rule IdPPkDistribute[color=#9AD5D8]:
  [ !Domain($IdP, ~domainSecret)
  , In(tlsClient('GET', ~sess, cert(~domainSecret), 'pk_req'))
  , !IdPLtk($IdP, idpSk) ]
  -->
  [ Out(tlsServer('GET', ~sess, ~domainSecret, <'idp_pk', pk(idpSk)>)) ]

rule IdPKeyObtain[color=#9AD5D8]:
  [ !Domain($IdP, ~domainSecret)
  , St_IdPKeyReq($IdP, ~sess)
  , In(tlsServer('GET', ~sess, ~domainSecret, <'idp_pk', idpPk>)) ]
  -->
  [ !UseIdPKey($User, $IdP, idpPk) ]

rule IdPSignUp:
  [ Fr(~pw), !IdP($IdP) ]
  --[ Username($A, $IdP, $Username, ~pw) ]->
  [ !IdPAccount($A, $IdP, $Username, ~pw) ]

restriction AccountsUnique:
  "All p1 p2 idp u pw1 pw2 #a #b.
        ( Username(p1, idp, u, pw1) @ #a
        & Username(p2, idp, u, pw2) @ #b)
    ==> (p1 = p2 & pw1 = pw2 & #a = #b)"

rule IdPAccountCompromise[color=#FF6961]:
  [ !IdPAccount($A, $IdP, $Username, ~pw) ]
  --[ CompromisedAccount($A, $IdP, $Username)
    , SomeCompromise() ]->
  [ Out(~pw) ]

rule IdPPublishClient:
  [ Fr(~sess), Fr(~m)
  , !IdPAccount($A, $IdP, $Username, ~pw)
  , !Domain($IdP, ~domainSecret) ]
  --[ SendIdP($IdP, $Username, ~m)
    , Sender($A)
    , IsMessage(~m) ]->
  [ Out(tlsClient('GET', ~sess, cert(~domainSecret), <'publish', $Username, ~pw, ~m>)) ]

rule IdPPublishServer:
  [ !IdPAccount(p, $IdP, $Username, ~pw)
  , !Domain($IdP, ~domainSecret)
  , In(tlsClient('GET', ~sess, cert(~domainSecret), <'publish', $Username, ~pw, m>)) ]
  --[ MustBeMessage(m) ]->
  [ Out(m)
  , !Publish($IdP, $Username, m) ]

lemma MessageSources[sources]:
  "All m #t. MustBeMessage(m) @ #t
    ==> ( (Ex #x. IsMessage(m) @ #x & #x < #t)
        | (Ex #x. KU(m) @ #x & #x < #t))"

rule IdPPublishCompromised:
  [ !IdPCompromise($IdP), In(m) ]
  -->
  [ !Publish($IdP, $Username, m) ]

rule IdPRead:
  [ !Publish($IdP, $Username, m) ]
  --[ ReceiveIdP($IdP, $Username, m) ]->
  []

lemma PublishExecutability:
  exists-trace
  "Ex user idp m #t.
       ReceiveIdP(idp, user, m) @ #t
    & (not Ex #x. SomeCompromise() @ #x)"

lemma IdPChannelSenderInvariance:
  "All user idp m #t.
        ReceiveIdP(idp, user, m) @ #t
    ==>   (Ex #x. SendIdP(idp, user, m) @ #x)
        | (Ex #x. CompromisedIdP(idp) @ #x)
        | (Ex #x. CompromisedDomain(idp) @ #x)
        | (Ex p #x. CompromisedAccount(p, idp, user) @ #x)"
