rule IdPSetup:
  [ !Domain($IdP), Fr(~idpSk) ]
  -->
  [ !IdP($IdP), !IdPLtk($IdP, ~idpSk)
  , Out(pk(~idpSk)) ]

rule IdPCompromise[color=#FF6961]:
  [ !IdPLtk($IdP, idpSk) ]
  --[ CompromisedIdP($IdP)
    , AdversaryActivity() ]->
  [ !IdPCompromise($IdP), Out(idpSk) ]

rule IdPKeyRequest[color=#9AD5D8]:
  [ !IdP($IdP), Fr(~sess) ]
  -->
  [ TLSClient_Out('GET', ~sess, $IdP, 'pk_req')
  , St_IdPKeyReq($IdP, ~sess) ]

rule IdPPkDistribute[color=#9AD5D8]:
  [ TLSServer_In('GET', ~sess, $IdP, 'pk_req')
  , !IdPLtk($IdP, idpSk) ]
  -->
  [ TLSServer_Out('GET', ~sess, $IdP, <'idp_pk', pk(idpSk)>) ]

rule IdPKeyObtain[color=#9AD5D8]:
  [ St_IdPKeyReq($IdP, ~sess)
  , TLSClient_In('GET', ~sess, $IdP, <'idp_pk', idpPk>) ]
  -->
  [ !UseIdPKey($User, $IdP, idpPk) ]

rule IdPSignUp:
  [ Fr(~pw), !IdP($IdP) ]
  --[ Username($A, $IdP, $Username, ~pw) ]->
  [ !IdPAccount($A, $IdP, $Username, ~pw) ]

// An IdP does not register the same account multiple times.
restriction AccountsUnique:
  "All p1 p2 idp u pw1 pw2 #a #b.
        ( Username(p1, idp, u, pw1) @ #a
        & Username(p2, idp, u, pw2) @ #b)
    ==> (p1 = p2 & pw1 = pw2 & #a = #b)"

rule IdPAccountCompromise[color=#FF6961]:
  [ !IdPAccount($A, $IdP, $Username, ~pw) ]
  --[ CompromisedAccount($A, $IdP, $Username)
    , AdversaryActivity() ]->
  [ Out(~pw) ]

rule IdPPublishClient:
  [ Fr(~sess), Fr(~m)
  , !IdPAccount($A, $IdP, $Username, ~pw) ]
  --[ SendIdP($IdP, $Username, ~m)
    , Sender($A) ]->
  [ TLSClient_Out('GET', ~sess, $IdP, <'publish', $Username, ~pw, ~m>) ]

rule IdPPublishServer:
  [ !IdPAccount(p, $IdP, $Username, ~pw)
  , TLSServer_In('GET', ~sess, $IdP, <'publish', $Username, ~pw, m>) ]
  -->
  [ Out(m)
  , !Publish($IdP, $Username, m) ]

rule IdPPublishCompromised:
  [ !IdPCompromise($IdP), In(m) ]
  --[ AdversaryActivity() ]->
  [ !Publish($IdP, $Username, m) ]

rule IdPRead:
  [ !Publish($IdP, $Username, m) ]
  --[ ReceiveIdP($IdP, $Username, m) ]->
  []
